/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */


//transmitter inludes
#include "sx126x/lr_fhss_mac.h"
#include "sx126x/lr_fhss_v1_base_types.h"
#include "sx126x/lr_fhss_mac.h"
#include "sx126x/sx126x_driver_version.h"
#include "sx126x/sx126x_hal.h"
#include "sx126x/sx126x_lr_fhss.h"
#include "sx126x/sx126x_regs.h"
#include "sx126x/sx126x.h"
#include "telemetry/context.h"
#include "usbd_cdc_if.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void sx126x_init(e22trans *transmitter);
void handle_command(e22trans *transmitter, char *line);
static uint16_t parseHexString(const char* hex, uint8_t* out, uint16_t maxLen);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


//USB virtual commm variables
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);




uint8_t fcBuff[82];		//Flight computer RX buffer
uint8_t gpsBuff[82];	//Gps Module RX Buffer
uint8_t txDone = 0; 	//Transmitter Transmit intterupt flag



/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
//e22 stm32 context and param struct
	e22trans transmitter = {
	  .hardwareConfig = {
	    .chip_select_port = GPIOA,        // Chip select pin port
	    .chip_select_pin  = GPIO_PIN_15,  // Chip select pin number
	    .busy_pin_port    = GPIOB,        // Busy signal pin port
	    .busy_pin         = GPIO_PIN_6,   // Busy signal pin number
	    .reset_pin_port   = GPIOB,        // Reset line pin port
	    .reset_pin        = GPIO_PIN_7,   // Reset line pin number
	    .txDone_port      = GPIOB,        // TxDone interrupt pin port
	    .txDone_pin       = GPIO_PIN_8,   // TxDone interrupt pin number
	    .hspi             = &hspi1,       // Pointer to SPI handle
	  },
	  .loraParams = {
	    .sf   			 = SX126X_LORA_SF12,   // LoRa spreading factor
	    .bw          	 = SX126X_LORA_BW_250, // LoRa bandwidth (250 kHz)
	    .cr         	 = SX126X_LORA_CR_4_8, // LoRa coding rate (4/8)
	    .ldro = 0x00,              			   // Low data rate optimization disabled
	  },
	  .pktParams = {
	    .preamble_len_in_symb 	= 12,    // Preamble length (bits)
	    .header_type         	= 0x00,  // Explicit header mode
	    .pld_len_in_bytes 		= 11,    // Payload length (bytes)
	    .crc_is_on           	= 0,     // CRC disabled
	    .invert_iq_is_on        = 0,     // Normal IQ (not inverted)
	  },
	  .paParams = {
	    .pa_duty_cycle  = 0x04, // PA duty cycle setting
	    .hp_max			= 0x01, // High-power maximum setting
	    .hp_max   		= 0x00, // PA selector (PA_BOOST)
	    .pa_lut      	= 0x01, // PA lookup table index
	  },
	  .paPower   = 3,            // TX output power in dBm
	  .frequency = 915000000U,   // Carrier frequency in Hz
	  .callSign  = "VA7GLW",     // Null-terminated callsign (max 7 chars)
	};

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_SPI1_Init();
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, gpsBuff, sizeof(gpsBuff));


  sx126x_init(&transmitter);



// prime the USB‑CDC receive pipeline

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  CDC_Printf("Ready for Commands...\r\n")
  while (1)
  {
    /* USER CODE END WHILE */
	if (line_ready) {
		handle_command(&transmitter, rx_buf);
		line_ready = false;
	}
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Chip_Select_GPIO_Port, Chip_Select_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Reset_Pin_GPIO_Port, Reset_Pin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Chip_Select_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(Chip_Select_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : Busy_Pin_Pin */
  GPIO_InitStruct.Pin = Busy_Pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Busy_Pin_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : Reset_Pin_Pin */
  GPIO_InitStruct.Pin = Reset_Pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(Reset_Pin_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : TX_Done_Pin */
  GPIO_InitStruct.Pin = TX_Done_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(TX_Done_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/**
 * @brief Initializes the SX126x-based E22 transmitter for LoRa transmission.
 *
 * This function follows the SX126x datasheet's recommended startup sequence
 * to prepare the radio for basic transmission using LoRa modulation.
 * It resets and wakes up the transceiver, configures TCXO control,
 * performs calibration, sets power and modulation parameters,
 * and configures interrupt behavior for TX completion.
 *
 * @param transmitter Pointer to an e22trans structure containing
 *                    hardware configuration and LoRa settings.
 */

void sx126x_init(e22trans *transmitter){
// Follows sequence of operations laid out it SX126X data sheet
// for basic TX operation

	// Get pointer to hardware-specific context
	sx126x_context* stm32Context = &transmitter->hardwareConfig;

	// Reset Transmitter (Reset is active Low)
	sx126x_hal_reset(stm32Context);

	// Wake up the transceiver (required after reset or sleep)
	sx126x_hal_wakeup(stm32Context);

	// Enter standby mode using internal RC oscillator (fast startup)
	sx126x_set_standby(stm32Context,SX126X_STANDBY_CFG_RC);

	//Configures DIO3 to supply power to an external TCXO (Temperature Compensated Crystal Oscillator)
	//Output 1.8V as stated in E22 datasheet, could be 3.3V as shown in their screen capture.
	sx126x_set_dio3_as_tcxo_ctrl(stm32Context,SX126X_TCXO_CTRL_1_8V ,320);

	//Calibrate all blocks (mask 0xFF enables full calibration: ADC, PLL, etc.)
	sx126x_cal(stm32Context,0xFF);

	sx126x_set_standby(stm32Context,SX126X_STANDBY_CFG_XOSC);

	//Set regulator mode to use DC-DC for power saving
	sx126x_set_reg_mode(stm32Context,SX126X_REG_MODE_DCDC);

	//Set packet type to LoRa
	sx126x_set_pkt_type(stm32Context,SX126X_PKT_TYPE_LORA );

	//Configure LoRa modulation parameters (e.g., spreading factor, bandwidth, coding rate)
	sx126x_set_lora_mod_params(stm32Context,&transmitter->loraParams);

	//Configure LoRa packet parameters (e.g., preamble length, payload length, CRC, header type)
	sx126x_set_lora_pkt_params(stm32Context,&transmitter->pktParams);

	//Set LoRa sync word (0x12 is a public LoRa network sync word)
	sx126x_set_lora_sync_word(stm32Context, 0x12);

	//Set RF frequency
	sx126x_set_rf_freq(stm32Context,transmitter->frequency);

	//Configure PA (Power Amplifier) parameters (e.g., PA duty cycle, HP/LP selection)
	sx126x_set_pa_cfg(stm32Context, &transmitter->paParams);

	//Set TX output power and ramp time
	sx126x_set_tx_params(stm32Context,transmitter->paPower,SX126X_RAMP_200_US);

	//Set base addresses for TX and RX buffers (TX: 0x00, RX: 0xFF, unused here)
	sx126x_set_buffer_base_address(stm32Context,0x00,0x00);


	//Configure DIO1 to raise an interrupt on TX done
	uint8_t irqMask  = 0x01;	// IRQ for TX done
	uint8_t dio1Mask = 0x01;	// Map TX done to DIO1
	uint8_t dio2Mask = 0x00;
	uint8_t dio3Mask = 0x00;

	//Set DIO 1 for tx_done interrupt
	sx126x_set_dio_irq_params(stm32Context, irqMask , dio1Mask, dio2Mask, dio3Mask);


	// Optional: preload call sign or header into buffer
	sx126x_write_buffer(stm32Context,0x00,transmitter->callSign,6);

}

// dispatch inside your main “while (line_ready)” loop
// Dispatch inside your main "while(line_ready)" loop
// 'transmitter' is a pointer to your e22trans instance
typedef enum {
    CMD_TX,
    CMD_UNKNOWN
} cmd_t;

static uint16_t parseHexString(const char* hex, uint8_t* out, uint16_t maxLen)
{
    uint16_t cnt = 0;
    while (*hex && hex[1] && cnt < maxLen) {
        char h = *hex++;
        char l = *hex++;
        uint8_t vh = (h >= 'A' ? (h & ~0x20) - 'A' + 10 : h - '0');
        uint8_t vl = (l >= 'A' ? (l & ~0x20) - 'A' + 10 : l - '0');
        out[cnt++] = (uint8_t)((vh << 4) | (vl & 0x0F));
    }
    return cnt;
}

void handle_command(e22trans *transmitter, char *line)
{
    char *cmd_str = strtok(line, " ");
    if (!cmd_str){
    	return;
    }

    cmd_t cmd = (strcmp(cmd_str, "TX") == 0) ? CMD_TX : CMD_UNKNOWN;

    switch (cmd) {
    case CMD_TX:
        // Enter transmit mode (stub)
    	sx126x_set_tx(&transmitter,200);
        CDC_Printf("OK");
        break;

    case CMD_UNKNOWN:
    default:
        CDC_Printf("ERR Unknown cmd");
        break;
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    if (GPIO_Pin == GPIO_PIN_8){
       txDone = true; //set transmission flag
    }

}



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {

  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
