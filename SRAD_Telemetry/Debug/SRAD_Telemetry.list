
SRAD_Telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eb0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800a050  0800a050  0000b050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a12c  0800a12c  0000c14c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a12c  0800a12c  0000b12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a134  0800a134  0000c14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a134  0800a134  0000b134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a138  0800a138  0000b138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800a13c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e44  2000014c  0800a288  0000c14c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f90  0800a288  0000cf90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c14c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b9a  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d4  00000000  00000000  00023d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  000276f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e78  00000000  00000000  00028a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195f8  00000000  00000000  00029880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171ba  00000000  00000000  00042e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fbbf  00000000  00000000  0005a032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9bf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005484  00000000  00000000  000e9c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ef0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a038 	.word	0x0800a038

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	0800a038 	.word	0x0800a038

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b090      	sub	sp, #64	@ 0x40
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
//e22 stm32 context and param struct
	e22trans transmitter = {
 8000576:	463b      	mov	r3, r7
 8000578:	2240      	movs	r2, #64	@ 0x40
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f009 f8db 	bl	8009738 <memset>
 8000582:	4b2b      	ldr	r3, [pc, #172]	@ (8000630 <main+0xc0>)
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800058a:	80bb      	strh	r3, [r7, #4]
 800058c:	4b29      	ldr	r3, [pc, #164]	@ (8000634 <main+0xc4>)
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	2340      	movs	r3, #64	@ 0x40
 8000592:	81bb      	strh	r3, [r7, #12]
 8000594:	4b27      	ldr	r3, [pc, #156]	@ (8000634 <main+0xc4>)
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	2380      	movs	r3, #128	@ 0x80
 800059a:	82bb      	strh	r3, [r7, #20]
 800059c:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <main+0xc4>)
 800059e:	61bb      	str	r3, [r7, #24]
 80005a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005a4:	83bb      	strh	r3, [r7, #28]
 80005a6:	4b24      	ldr	r3, [pc, #144]	@ (8000638 <main+0xc8>)
 80005a8:	623b      	str	r3, [r7, #32]
 80005aa:	230c      	movs	r3, #12
 80005ac:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80005b0:	2305      	movs	r3, #5
 80005b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80005b6:	2304      	movs	r3, #4
 80005b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80005bc:	230c      	movs	r3, #12
 80005be:	853b      	strh	r3, [r7, #40]	@ 0x28
 80005c0:	230b      	movs	r3, #11
 80005c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80005c6:	2304      	movs	r3, #4
 80005c8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80005cc:	2301      	movs	r3, #1
 80005ce:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80005d2:	2303      	movs	r3, #3
 80005d4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <main+0xcc>)
 80005da:	637b      	str	r3, [r7, #52]	@ 0x34
 80005dc:	4a18      	ldr	r2, [pc, #96]	@ (8000640 <main+0xd0>)
 80005de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80005e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e6:	6018      	str	r0, [r3, #0]
 80005e8:	3304      	adds	r3, #4
 80005ea:	8019      	strh	r1, [r3, #0]
 80005ec:	3302      	adds	r3, #2
 80005ee:	0c0a      	lsrs	r2, r1, #16
 80005f0:	701a      	strb	r2, [r3, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 ffda 	bl	80015b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f828 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f8f2 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000604:	f000 f8c6 	bl	8000794 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000608:	f000 f88e 	bl	8000728 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800060c:	f008 faec 	bl	8008be8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, gpsBuff, sizeof(gpsBuff));
 8000610:	2252      	movs	r2, #82	@ 0x52
 8000612:	490c      	ldr	r1, [pc, #48]	@ (8000644 <main+0xd4>)
 8000614:	480c      	ldr	r0, [pc, #48]	@ (8000648 <main+0xd8>)
 8000616:	f004 f89f 	bl	8004758 <HAL_UART_Receive_IT>


  sx126x_init(&transmitter);
 800061a:	463b      	mov	r3, r7
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f97b 	bl	8000918 <sx126x_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  CDC_Transmit_FS((uint8_t *)"Ready for command...",20);
 8000622:	2114      	movs	r1, #20
 8000624:	4809      	ldr	r0, [pc, #36]	@ (800064c <main+0xdc>)
 8000626:	f008 fb9d 	bl	8008d64 <CDC_Transmit_FS>

  while (1)
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <main+0xba>
 800062e:	bf00      	nop
 8000630:	40020000 	.word	0x40020000
 8000634:	40020400 	.word	0x40020400
 8000638:	20000168 	.word	0x20000168
 800063c:	3689cac0 	.word	0x3689cac0
 8000640:	0800a068 	.word	0x0800a068
 8000644:	20000208 	.word	0x20000208
 8000648:	200001c0 	.word	0x200001c0
 800064c:	0800a050 	.word	0x0800a050

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f009 f86a 	bl	8009738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a28      	ldr	r2, [pc, #160]	@ (8000720 <SystemClock_Config+0xd0>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a22      	ldr	r2, [pc, #136]	@ (8000724 <SystemClock_Config+0xd4>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b20      	ldr	r3, [pc, #128]	@ (8000724 <SystemClock_Config+0xd4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006ac:	2303      	movs	r3, #3
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b6:	2301      	movs	r3, #1
 80006b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2310      	movs	r3, #16
 80006bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006c8:	2319      	movs	r3, #25
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006cc:	23c0      	movs	r3, #192	@ 0xc0
 80006ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fdc1 	bl	8003264 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006e8:	f000 f99c 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f003 f824 	bl	8003754 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000712:	f000 f987 	bl	8000a24 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	@ 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_SPI1_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	@ (8000790 <MX_SPI1_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_SPI1_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_SPI1_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_SPI1_Init+0x64>)
 800075c:	2208      	movs	r2, #8
 800075e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_SPI1_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_SPI1_Init+0x64>)
 800077a:	f003 f9cb 	bl	8003b14 <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f94e 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000168 	.word	0x20000168
 8000790:	40013000 	.word	0x40013000

08000794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	@ (80007e4 <MX_USART2_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800079e:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007cc:	f003 ff74 	bl	80046b8 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f000 f925 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200001c0 	.word	0x200001c0
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b42      	ldr	r3, [pc, #264]	@ (800090c <MX_GPIO_Init+0x124>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a41      	ldr	r2, [pc, #260]	@ (800090c <MX_GPIO_Init+0x124>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b3f      	ldr	r3, [pc, #252]	@ (800090c <MX_GPIO_Init+0x124>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b3b      	ldr	r3, [pc, #236]	@ (800090c <MX_GPIO_Init+0x124>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a3a      	ldr	r2, [pc, #232]	@ (800090c <MX_GPIO_Init+0x124>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b38      	ldr	r3, [pc, #224]	@ (800090c <MX_GPIO_Init+0x124>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b34      	ldr	r3, [pc, #208]	@ (800090c <MX_GPIO_Init+0x124>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a33      	ldr	r2, [pc, #204]	@ (800090c <MX_GPIO_Init+0x124>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b31      	ldr	r3, [pc, #196]	@ (800090c <MX_GPIO_Init+0x124>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b2d      	ldr	r3, [pc, #180]	@ (800090c <MX_GPIO_Init+0x124>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a2c      	ldr	r2, [pc, #176]	@ (800090c <MX_GPIO_Init+0x124>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b2a      	ldr	r3, [pc, #168]	@ (800090c <MX_GPIO_Init+0x124>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Chip_Select_GPIO_Port, Chip_Select_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000874:	4826      	ldr	r0, [pc, #152]	@ (8000910 <MX_GPIO_Init+0x128>)
 8000876:	f001 fa71 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Reset_Pin_GPIO_Port, Reset_Pin_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2180      	movs	r1, #128	@ 0x80
 800087e:	4825      	ldr	r0, [pc, #148]	@ (8000914 <MX_GPIO_Init+0x12c>)
 8000880:	f001 fa6c 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Chip_Select_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin;
 8000884:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Chip_Select_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	481c      	ldr	r0, [pc, #112]	@ (8000910 <MX_GPIO_Init+0x128>)
 800089e:	f001 f8c1 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Busy_Pin_Pin */
  GPIO_InitStruct.Pin = Busy_Pin_Pin;
 80008a2:	2340      	movs	r3, #64	@ 0x40
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Busy_Pin_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4817      	ldr	r0, [pc, #92]	@ (8000914 <MX_GPIO_Init+0x12c>)
 80008b6:	f001 f8b5 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reset_Pin_Pin */
  GPIO_InitStruct.Pin = Reset_Pin_Pin;
 80008ba:	2380      	movs	r3, #128	@ 0x80
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c6:	2303      	movs	r3, #3
 80008c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Reset_Pin_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4810      	ldr	r0, [pc, #64]	@ (8000914 <MX_GPIO_Init+0x12c>)
 80008d2:	f001 f8a7 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_Done_Pin */
  GPIO_InitStruct.Pin = TX_Done_Pin;
 80008d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TX_Done_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4809      	ldr	r0, [pc, #36]	@ (8000914 <MX_GPIO_Init+0x12c>)
 80008ee:	f001 f899 	bl	8001a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2017      	movs	r0, #23
 80008f8:	f000 ffcb 	bl	8001892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008fc:	2017      	movs	r0, #23
 80008fe:	f000 ffe4 	bl	80018ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	@ 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000
 8000914:	40020400 	.word	0x40020400

08000918 <sx126x_init>:
 *
 * @param transmitter Pointer to an e22trans structure containing
 *                    hardware configuration and LoRa settings.
 */

void sx126x_init(e22trans *transmitter){
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af02      	add	r7, sp, #8
 800091e:	6078      	str	r0, [r7, #4]
// Follows sequence of operations laid out it SX126X data sheet
// for basic TX operation

	// Get pointer to hardware-specific context
	sx126x_context* stm32Context = &transmitter->hardwareConfig;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	60fb      	str	r3, [r7, #12]

	// Reset Transmitter (Reset is active Low)
	sx126x_hal_reset(stm32Context);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	f000 fd54 	bl	80013d2 <sx126x_hal_reset>

	// Wake up the transceiver (required after reset or sleep)
	sx126x_hal_wakeup(stm32Context);
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f000 fd6f 	bl	800140e <sx126x_hal_wakeup>

	// Enter standby mode using internal RC oscillator (fast startup)
	sx126x_set_standby(stm32Context,SX126X_STANDBY_CFG_RC);
 8000930:	2100      	movs	r1, #0
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f000 f9d0 	bl	8000cd8 <sx126x_set_standby>

	//Configures DIO3 to supply power to an external TCXO (Temperature Compensated Crystal Oscillator)
	//Output 1.8V as stated in E22 datasheet, could be 3.3V as shown in their screen capture.
	sx126x_set_dio3_as_tcxo_ctrl(stm32Context,SX126X_TCXO_CTRL_1_8V ,320);
 8000938:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800093c:	2102      	movs	r1, #2
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f000 fad5 	bl	8000eee <sx126x_set_dio3_as_tcxo_ctrl>

	//Calibrate all blocks (mask 0xFF enables full calibration: ADC, PLL, etc.)
	sx126x_cal(stm32Context,0xFF);
 8000944:	21ff      	movs	r1, #255	@ 0xff
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f000 f9f6 	bl	8000d38 <sx126x_cal>

	sx126x_set_standby(stm32Context,SX126X_STANDBY_CFG_XOSC);
 800094c:	2101      	movs	r1, #1
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f000 f9c2 	bl	8000cd8 <sx126x_set_standby>

	//Set regulator mode to use DC-DC for power saving
	sx126x_set_reg_mode(stm32Context,SX126X_REG_MODE_DCDC);
 8000954:	2101      	movs	r1, #1
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f000 f9d6 	bl	8000d08 <sx126x_set_reg_mode>

	//Set packet type to LoRa
	sx126x_set_pkt_type(stm32Context,SX126X_PKT_TYPE_LORA );
 800095c:	2101      	movs	r1, #1
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f000 fb1f 	bl	8000fa2 <sx126x_set_pkt_type>

	//Configure LoRa modulation parameters (e.g., spreading factor, bandwidth, coding rate)
	sx126x_set_lora_mod_params(stm32Context,&transmitter->loraParams);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3324      	adds	r3, #36	@ 0x24
 8000968:	4619      	mov	r1, r3
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f000 fb4d 	bl	800100a <sx126x_set_lora_mod_params>

	//Configure LoRa packet parameters (e.g., preamble length, payload length, CRC, header type)
	sx126x_set_lora_pkt_params(stm32Context,&transmitter->pktParams);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3328      	adds	r3, #40	@ 0x28
 8000974:	4619      	mov	r1, r3
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f000 fb79 	bl	800106e <sx126x_set_lora_pkt_params>

	//Set LoRa sync word (0x12 is a public LoRa network sync word)
	sx126x_set_lora_sync_word(stm32Context, 0x12);
 800097c:	2112      	movs	r1, #18
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f000 fc1a 	bl	80011b8 <sx126x_set_lora_sync_word>

	//Set RF frequency
	sx126x_set_rf_freq(stm32Context,transmitter->frequency);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000988:	4619      	mov	r1, r3
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f000 fad3 	bl	8000f36 <sx126x_set_rf_freq>

	//Configure PA (Power Amplifier) parameters (e.g., PA duty cycle, HP/LP selection)
	sx126x_set_pa_cfg(stm32Context, &transmitter->paParams);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	332e      	adds	r3, #46	@ 0x2e
 8000994:	4619      	mov	r1, r3
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f000 f9e6 	bl	8000d68 <sx126x_set_pa_cfg>

	//Set TX output power and ramp time
	sx126x_set_tx_params(stm32Context,transmitter->paPower,SX126X_RAMP_200_US);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	2204      	movs	r2, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f000 fb12 	bl	8000fd2 <sx126x_set_tx_params>

	//Set base addresses for TX and RX buffers (TX: 0x00, RX: 0xFF, unused here)
	sx126x_set_buffer_base_address(stm32Context,0x00,0x00);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f000 fbbd 	bl	8001132 <sx126x_set_buffer_base_address>


	//Configure DIO1 to raise an interrupt on TX done
	uint8_t irqMask  = 0x01;	// IRQ for TX done
 80009b8:	2301      	movs	r3, #1
 80009ba:	72fb      	strb	r3, [r7, #11]
	uint8_t dio1Mask = 0x01;	// Map TX done to DIO1
 80009bc:	2301      	movs	r3, #1
 80009be:	72bb      	strb	r3, [r7, #10]
	uint8_t dio2Mask = 0x00;
 80009c0:	2300      	movs	r3, #0
 80009c2:	727b      	strb	r3, [r7, #9]
	uint8_t dio3Mask = 0x00;
 80009c4:	2300      	movs	r3, #0
 80009c6:	723b      	strb	r3, [r7, #8]

	//Set DIO 1 for tx_done interrupt
	sx126x_set_dio_irq_params(stm32Context, irqMask , dio1Mask, dio2Mask, dio3Mask);
 80009c8:	7afb      	ldrb	r3, [r7, #11]
 80009ca:	b299      	uxth	r1, r3
 80009cc:	7abb      	ldrb	r3, [r7, #10]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	7a7b      	ldrb	r3, [r7, #9]
 80009d2:	b298      	uxth	r0, r3
 80009d4:	7a3b      	ldrb	r3, [r7, #8]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	4603      	mov	r3, r0
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f000 fa49 	bl	8000e74 <sx126x_set_dio_irq_params>


	// Optional: preload call sign or header into buffer
	sx126x_write_buffer(stm32Context,0x00,transmitter->callSign,6);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80009e8:	2306      	movs	r3, #6
 80009ea:	2100      	movs	r1, #0
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f000 fa24 	bl	8000e3a <sx126x_write_buffer>

}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <HAL_GPIO_EXTI_Callback>:
}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_8){
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a0c:	d102      	bne.n	8000a14 <HAL_GPIO_EXTI_Callback+0x18>
       txDone = true; //set transmission flag
 8000a0e:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <HAL_GPIO_EXTI_Callback+0x24>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
    }

}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	2000025a 	.word	0x2000025a

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <Error_Handler+0x8>

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a7c <HAL_MspInit+0x4c>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a46:	4b0d      	ldr	r3, [pc, #52]	@ (8000a7c <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	4a08      	ldr	r2, [pc, #32]	@ (8000a7c <HAL_MspInit+0x4c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a19      	ldr	r2, [pc, #100]	@ (8000b04 <HAL_SPI_MspInit+0x84>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d12b      	bne.n	8000afa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <HAL_SPI_MspInit+0x88>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	4a17      	ldr	r2, [pc, #92]	@ (8000b08 <HAL_SPI_MspInit+0x88>)
 8000aac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <HAL_SPI_MspInit+0x88>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <HAL_SPI_MspInit+0x88>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a10      	ldr	r2, [pc, #64]	@ (8000b08 <HAL_SPI_MspInit+0x88>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <HAL_SPI_MspInit+0x88>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ada:	2338      	movs	r3, #56	@ 0x38
 8000adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aea:	2305      	movs	r3, #5
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <HAL_SPI_MspInit+0x8c>)
 8000af6:	f000 ff95 	bl	8001a24 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	@ 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40013000 	.word	0x40013000
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020400 	.word	0x40020400

08000b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	@ 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba4 <HAL_UART_MspInit+0x94>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d133      	bne.n	8000b9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <HAL_UART_MspInit+0x98>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba8 <HAL_UART_MspInit+0x98>)
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b42:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <HAL_UART_MspInit+0x98>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <HAL_UART_MspInit+0x98>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <HAL_UART_MspInit+0x98>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <HAL_UART_MspInit+0x98>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4809      	ldr	r0, [pc, #36]	@ (8000bac <HAL_UART_MspInit+0x9c>)
 8000b86:	f000 ff4d 	bl	8001a24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2026      	movs	r0, #38	@ 0x26
 8000b90:	f000 fe7f 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b94:	2026      	movs	r0, #38	@ 0x26
 8000b96:	f000 fe98 	bl	80018ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	@ 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40004400 	.word	0x40004400
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c06:	f000 fd25 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TX_Done_Pin);
 8000c12:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000c16:	f001 f8bb 	bl	8001d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <USART2_IRQHandler+0x10>)
 8000c26:	f003 fdbd 	bl	80047a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001c0 	.word	0x200001c0

08000c34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <OTG_FS_IRQHandler+0x10>)
 8000c3a:	f001 fa05 	bl	8002048 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20001744 	.word	0x20001744

08000c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c50:	4a14      	ldr	r2, [pc, #80]	@ (8000ca4 <_sbrk+0x5c>)
 8000c52:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <_sbrk+0x60>)
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c64:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <_sbrk+0x64>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	@ (8000cb0 <_sbrk+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d207      	bcs.n	8000c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c78:	f008 fd66 	bl	8009748 <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	220c      	movs	r2, #12
 8000c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c86:	e009      	b.n	8000c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <_sbrk+0x64>)
 8000c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20020000 	.word	0x20020000
 8000ca8:	00000400 	.word	0x00000400
 8000cac:	2000025c 	.word	0x2000025c
 8000cb0:	20001f90 	.word	0x20001f90

08000cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	@ (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_STANDBY] = {
 8000ce4:	2380      	movs	r3, #128	@ 0x80
 8000ce6:	733b      	strb	r3, [r7, #12]
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	737b      	strb	r3, [r7, #13]
        SX126X_SET_STANDBY,
        ( uint8_t ) cfg,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 8000cec:	f107 010c 	add.w	r1, r7, #12
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 fad7 	bl	80012ac <sx126x_hal_write>
 8000cfe:	4603      	mov	r3, r0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = {
 8000d14:	2396      	movs	r3, #150	@ 0x96
 8000d16:	733b      	strb	r3, [r7, #12]
 8000d18:	78fb      	ldrb	r3, [r7, #3]
 8000d1a:	737b      	strb	r3, [r7, #13]
        SX126X_SET_REGULATOR_MODE,
        ( uint8_t ) mode,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 8000d1c:	f107 010c 	add.w	r1, r7, #12
 8000d20:	2300      	movs	r3, #0
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2300      	movs	r3, #0
 8000d26:	2202      	movs	r2, #2
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 fabf 	bl	80012ac <sx126x_hal_write>
 8000d2e:	4603      	mov	r3, r0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_CALIBRATE] = {
 8000d44:	2389      	movs	r3, #137	@ 0x89
 8000d46:	733b      	strb	r3, [r7, #12]
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	737b      	strb	r3, [r7, #13]
        SX126X_CALIBRATE,
        ( uint8_t ) param,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 8000d4c:	f107 010c 	add.w	r1, r7, #12
 8000d50:	2300      	movs	r3, #0
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2300      	movs	r3, #0
 8000d56:	2202      	movs	r2, #2
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 faa7 	bl	80012ac <sx126x_hal_write>
 8000d5e:	4603      	mov	r3, r0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <sx126x_set_pa_cfg>:

    return sx126x_cal_img( context, freq1, freq2 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af02      	add	r7, sp, #8
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000d72:	2395      	movs	r3, #149	@ 0x95
 8000d74:	723b      	strb	r3, [r7, #8]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000d7a:	727b      	strb	r3, [r7, #9]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000d80:	72bb      	strb	r3, [r7, #10]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000d86:	72fb      	strb	r3, [r7, #11]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000d8c:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 8000d8e:	f107 0108 	add.w	r1, r7, #8
 8000d92:	2300      	movs	r3, #0
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2300      	movs	r3, #0
 8000d98:	2205      	movs	r2, #5
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 fa86 	bl	80012ac <sx126x_hal_write>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b088      	sub	sp, #32
 8000dae:	af02      	add	r7, sp, #8
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	461a      	mov	r2, r3
 8000db6:	460b      	mov	r3, r1
 8000db8:	817b      	strh	r3, [r7, #10]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 8000dbe:	230d      	movs	r3, #13
 8000dc0:	753b      	strb	r3, [r7, #20]
        SX126X_WRITE_REGISTER,
        ( uint8_t )( address >> 8 ),
 8000dc2:	897b      	ldrh	r3, [r7, #10]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 8000dca:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 8000dcc:	897b      	ldrh	r3, [r7, #10]
 8000dce:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 8000dd0:	75bb      	strb	r3, [r7, #22]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 8000dd2:	7a7b      	ldrb	r3, [r7, #9]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	f107 0114 	add.w	r1, r7, #20
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2203      	movs	r2, #3
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f000 fa63 	bl	80012ac <sx126x_hal_write>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	817b      	strh	r3, [r7, #10]
 8000e00:	4613      	mov	r3, r2
 8000e02:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 8000e04:	231d      	movs	r3, #29
 8000e06:	753b      	strb	r3, [r7, #20]
        SX126X_READ_REGISTER,
        ( uint8_t )( address >> 8 ),
 8000e08:	897b      	ldrh	r3, [r7, #10]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 8000e10:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 8000e12:	897b      	ldrh	r3, [r7, #10]
 8000e14:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 8000e16:	75bb      	strb	r3, [r7, #22]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	75fb      	strb	r3, [r7, #23]
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 8000e1c:	7a7b      	ldrb	r3, [r7, #9]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	f107 0114 	add.w	r1, r7, #20
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2204      	movs	r2, #4
 8000e2a:	68f8      	ldr	r0, [r7, #12]
 8000e2c:	f000 fa96 	bl	800135c <sx126x_hal_read>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b088      	sub	sp, #32
 8000e3e:	af02      	add	r7, sp, #8
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	461a      	mov	r2, r3
 8000e46:	460b      	mov	r3, r1
 8000e48:	72fb      	strb	r3, [r7, #11]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	72bb      	strb	r3, [r7, #10]
    const uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = {
 8000e4e:	230e      	movs	r3, #14
 8000e50:	753b      	strb	r3, [r7, #20]
 8000e52:	7afb      	ldrb	r3, [r7, #11]
 8000e54:	757b      	strb	r3, [r7, #21]
        SX126X_WRITE_BUFFER,
        offset,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 8000e56:	7abb      	ldrb	r3, [r7, #10]
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	f107 0114 	add.w	r1, r7, #20
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2202      	movs	r2, #2
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f000 fa21 	bl	80012ac <sx126x_hal_write>
 8000e6a:	4603      	mov	r3, r0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	4611      	mov	r1, r2
 8000e80:	461a      	mov	r2, r3
 8000e82:	4603      	mov	r3, r0
 8000e84:	817b      	strh	r3, [r7, #10]
 8000e86:	460b      	mov	r3, r1
 8000e88:	813b      	strh	r3, [r7, #8]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	80fb      	strh	r3, [r7, #6]
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000e8e:	2308      	movs	r3, #8
 8000e90:	753b      	strb	r3, [r7, #20]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 8000e92:	897b      	ldrh	r3, [r7, #10]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000e9a:	757b      	strb	r3, [r7, #21]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 8000e9c:	897b      	ldrh	r3, [r7, #10]
 8000e9e:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000ea0:	75bb      	strb	r3, [r7, #22]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 8000ea2:	893b      	ldrh	r3, [r7, #8]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000eaa:	75fb      	strb	r3, [r7, #23]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 8000eac:	893b      	ldrh	r3, [r7, #8]
 8000eae:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000eb0:	763b      	strb	r3, [r7, #24]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000eba:	767b      	strb	r3, [r7, #25]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000ec0:	76bb      	strb	r3, [r7, #26]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 8000ec2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000eca:	76fb      	strb	r3, [r7, #27]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 8000ecc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000ece:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000ed0:	773b      	strb	r3, [r7, #28]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 8000ed2:	f107 0114 	add.w	r1, r7, #20
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2300      	movs	r3, #0
 8000edc:	2209      	movs	r2, #9
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f000 f9e4 	bl	80012ac <sx126x_hal_write>
 8000ee4:	4603      	mov	r3, r0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3720      	adds	r7, #32
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <sx126x_set_dio3_as_tcxo_ctrl>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
}

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b088      	sub	sp, #32
 8000ef2:	af02      	add	r7, sp, #8
 8000ef4:	60f8      	str	r0, [r7, #12]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	72fb      	strb	r3, [r7, #11]
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8000efc:	2397      	movs	r3, #151	@ 0x97
 8000efe:	743b      	strb	r3, [r7, #16]
 8000f00:	7afb      	ldrb	r3, [r7, #11]
 8000f02:	747b      	strb	r3, [r7, #17]
        SX126X_SET_DIO3_AS_TCXO_CTRL, ( uint8_t ) tcxo_voltage,    ( uint8_t )( timeout >> 16 ),
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	0c1b      	lsrs	r3, r3, #16
 8000f08:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8000f0a:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8000f12:	74fb      	strb	r3, [r7, #19]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8000f18:	753b      	strb	r3, [r7, #20]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 8000f1a:	f107 0110 	add.w	r1, r7, #16
 8000f1e:	2300      	movs	r3, #0
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2300      	movs	r3, #0
 8000f24:	2205      	movs	r2, #5
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f000 f9c0 	bl	80012ac <sx126x_hal_write>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 8000f40:	6838      	ldr	r0, [r7, #0]
 8000f42:	f000 f913 	bl	800116c <sx126x_convert_freq_in_hz_to_pll_step>
 8000f46:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 8000f48:	68f9      	ldr	r1, [r7, #12]
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f805 	bl	8000f5a <sx126x_set_rf_freq_in_pll_steps>
 8000f50:	4603      	mov	r3, r0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af02      	add	r7, sp, #8
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000f64:	2386      	movs	r3, #134	@ 0x86
 8000f66:	723b      	strb	r3, [r7, #8]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	0e1b      	lsrs	r3, r3, #24
 8000f6c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000f6e:	727b      	strb	r3, [r7, #9]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000f76:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000f7e:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000f84:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 8000f86:	f107 0108 	add.w	r1, r7, #8
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2205      	movs	r2, #5
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f98a 	bl	80012ac <sx126x_hal_write>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af02      	add	r7, sp, #8
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	460b      	mov	r3, r1
 8000fac:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = {
 8000fae:	238a      	movs	r3, #138	@ 0x8a
 8000fb0:	733b      	strb	r3, [r7, #12]
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	737b      	strb	r3, [r7, #13]
        SX126X_SET_PKT_TYPE,
        ( uint8_t ) pkt_type,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 8000fb6:	f107 010c 	add.w	r1, r7, #12
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f972 	bl	80012ac <sx126x_hal_write>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <sx126x_set_tx_params>:

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_PKT_TYPE, ( uint8_t* ) pkt_type, 1 );
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af02      	add	r7, sp, #8
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70fb      	strb	r3, [r7, #3]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	70bb      	strb	r3, [r7, #2]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 8000fe2:	238e      	movs	r3, #142	@ 0x8e
 8000fe4:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX_PARAMS,
        ( uint8_t ) pwr_in_dbm,
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 8000fe8:	737b      	strb	r3, [r7, #13]
 8000fea:	78bb      	ldrb	r3, [r7, #2]
 8000fec:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ramp_time,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 8000fee:	f107 010c 	add.w	r1, r7, #12
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f956 	bl	80012ac <sx126x_hal_write>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <sx126x_set_lora_mod_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_BPSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af02      	add	r7, sp, #8
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 8001014:	238b      	movs	r3, #139	@ 0x8b
 8001016:	723b      	strb	r3, [r7, #8]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800101c:	727b      	strb	r3, [r7, #9]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 8001022:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 8001028:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	78db      	ldrb	r3, [r3, #3]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 8001034:	733b      	strb	r3, [r7, #12]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 8001036:	f107 0108 	add.w	r1, r7, #8
 800103a:	2300      	movs	r3, #0
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2300      	movs	r3, #0
 8001040:	2205      	movs	r2, #5
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f932 	bl	80012ac <sx126x_hal_write>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d108      	bne.n	8001064 <sx126x_set_lora_mod_params+0x5a>
    {
        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see datasheet DS_SX1261-2_V1.2 §15.1
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	785b      	ldrb	r3, [r3, #1]
 8001056:	461a      	mov	r2, r3
 8001058:	2101      	movs	r1, #1
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f8e8 	bl	8001230 <sx126x_tx_modulation_workaround>
 8001060:	4603      	mov	r3, r0
 8001062:	73fb      	strb	r3, [r7, #15]
        // WORKAROUND END
    }

    return status;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <sx126x_set_lora_pkt_params>:

    return sx126x_write_register( context, 0x00F0, buf2, sizeof( buf2 ) );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b088      	sub	sp, #32
 8001072:	af02      	add	r7, sp, #8
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 8001078:	238c      	movs	r3, #140	@ 0x8c
 800107a:	743b      	strb	r3, [r7, #16]
        SX126X_SET_PKT_PARAMS,
        ( uint8_t )( params->preamble_len_in_symb >> 8 ),
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	b29b      	uxth	r3, r3
 8001084:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 8001086:	747b      	strb	r3, [r7, #17]
        ( uint8_t )( params->preamble_len_in_symb >> 0 ),
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800108e:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( params->header_type ),
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 8001094:	74fb      	strb	r3, [r7, #19]
        params->pld_len_in_bytes,
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800109a:	753b      	strb	r3, [r7, #20]
        ( uint8_t )( params->crc_is_on ? 1 : 0 ),
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	791b      	ldrb	r3, [r3, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <sx126x_set_lora_pkt_params+0x3a>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <sx126x_set_lora_pkt_params+0x3c>
 80010a8:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 80010aa:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( params->invert_iq_is_on ? 1 : 0 ),
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	795b      	ldrb	r3, [r3, #5]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <sx126x_set_lora_pkt_params+0x4a>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <sx126x_set_lora_pkt_params+0x4c>
 80010b8:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 80010ba:	75bb      	strb	r3, [r7, #22]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 80010bc:	f107 0110 	add.w	r1, r7, #16
 80010c0:	2300      	movs	r3, #0
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2300      	movs	r3, #0
 80010c6:	2207      	movs	r2, #7
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f8ef 	bl	80012ac <sx126x_hal_write>
 80010ce:	4603      	mov	r3, r0
 80010d0:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d127      	bne.n	8001128 <sx126x_set_lora_pkt_params+0xba>
    {
        uint8_t reg_value = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 80010dc:	f107 020f 	add.w	r2, r7, #15
 80010e0:	2301      	movs	r3, #1
 80010e2:	f240 7136 	movw	r1, #1846	@ 0x736
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fe82 	bl	8000df0 <sx126x_read_register>
 80010ec:	4603      	mov	r3, r0
 80010ee:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d118      	bne.n	8001128 <sx126x_set_lora_pkt_params+0xba>
        {
            if( params->invert_iq_is_on == true )
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	795b      	ldrb	r3, [r3, #5]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <sx126x_set_lora_pkt_params+0x9c>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	f023 0304 	bic.w	r3, r3, #4
 8001104:	b2db      	uxtb	r3, r3
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e004      	b.n	8001114 <sx126x_set_lora_pkt_params+0xa6>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	b2db      	uxtb	r3, r3
 8001112:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 8001114:	f107 020f 	add.w	r2, r7, #15
 8001118:	2301      	movs	r3, #1
 800111a:	f240 7136 	movw	r1, #1846	@ 0x736
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fe43 	bl	8000daa <sx126x_write_register>
 8001124:	4603      	mov	r3, r0
 8001126:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 8001128:	7dfb      	ldrb	r3, [r7, #23]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af02      	add	r7, sp, #8
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	460b      	mov	r3, r1
 800113c:	70fb      	strb	r3, [r7, #3]
 800113e:	4613      	mov	r3, r2
 8001140:	70bb      	strb	r3, [r7, #2]
    const uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = {
 8001142:	238f      	movs	r3, #143	@ 0x8f
 8001144:	733b      	strb	r3, [r7, #12]
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	737b      	strb	r3, [r7, #13]
 800114a:	78bb      	ldrb	r3, [r7, #2]
 800114c:	73bb      	strb	r3, [r7, #14]
        SX126X_SET_BUFFER_BASE_ADDRESS,
        tx_base_address,
        rx_base_address,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800114e:	f107 010c 	add.w	r1, r7, #12
 8001152:	2300      	movs	r3, #0
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2300      	movs	r3, #0
 8001158:	2203      	movs	r2, #3
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f8a6 	bl	80012ac <sx126x_hal_write>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a0f      	ldr	r2, [pc, #60]	@ (80011b4 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	0b1b      	lsrs	r3, r3, #12
 800117e:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f643 5209 	movw	r2, #15625	@ 0x3d09
 8001186:	fb02 f303 	mul.w	r3, r2, r3
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	039b      	lsls	r3, r3, #14
 8001198:	f503 53f4 	add.w	r3, r3, #7808	@ 0x1e80
 800119c:	3304      	adds	r3, #4
 800119e:	4905      	ldr	r1, [pc, #20]	@ (80011b4 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 80011a0:	fba1 1303 	umull	r1, r3, r1, r3
 80011a4:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 80011a6:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	431bde83 	.word	0x431bde83

080011b8 <sx126x_set_lora_sync_word>:

    return status;
}

sx126x_status_t sx126x_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
    uint8_t buffer[2] = { 0x00 };
 80011c4:	2300      	movs	r3, #0
 80011c6:	81bb      	strh	r3, [r7, #12]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 80011c8:	f107 020c 	add.w	r2, r7, #12
 80011cc:	2302      	movs	r3, #2
 80011ce:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fe0c 	bl	8000df0 <sx126x_read_register>
 80011d8:	4603      	mov	r3, r0
 80011da:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d121      	bne.n	8001226 <sx126x_set_lora_sync_word+0x6e>
    {
        buffer[0] = ( buffer[0] & ~0xF0 ) + ( sync_word & 0xF0 );
 80011e2:	7b3b      	ldrb	r3, [r7, #12]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	b25a      	sxtb	r2, r3
 80011ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011f0:	f023 030f 	bic.w	r3, r3, #15
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	733b      	strb	r3, [r7, #12]
        buffer[1] = ( buffer[1] & ~0xF0 ) + ( ( sync_word & 0x0F ) << 4 );
 80011fe:	7b7b      	ldrb	r3, [r7, #13]
 8001200:	f003 030f 	and.w	r3, r3, #15
 8001204:	b2da      	uxtb	r2, r3
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	b2db      	uxtb	r3, r3
 800120c:	4413      	add	r3, r2
 800120e:	b2db      	uxtb	r3, r3
 8001210:	737b      	strb	r3, [r7, #13]

        status = sx126x_write_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 8001212:	f107 020c 	add.w	r2, r7, #12
 8001216:	2302      	movs	r3, #2
 8001218:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff fdc4 	bl	8000daa <sx126x_write_register>
 8001222:	4603      	mov	r3, r0
 8001224:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <sx126x_tx_modulation_workaround>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static sx126x_status_t sx126x_tx_modulation_workaround( const void* context, sx126x_pkt_type_t pkt_type,
                                                        sx126x_lora_bw_t bw )
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
 800123c:	4613      	mov	r3, r2
 800123e:	70bb      	strb	r3, [r7, #2]
    uint8_t reg_value = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	73bb      	strb	r3, [r7, #14]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 8001244:	f107 020e 	add.w	r2, r7, #14
 8001248:	2301      	movs	r3, #1
 800124a:	f640 0189 	movw	r1, #2185	@ 0x889
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fdce 	bl	8000df0 <sx126x_read_register>
 8001254:	4603      	mov	r3, r0
 8001256:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d120      	bne.n	80012a0 <sx126x_tx_modulation_workaround+0x70>
    {
        if( pkt_type == SX126X_PKT_TYPE_LORA )
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d10e      	bne.n	8001282 <sx126x_tx_modulation_workaround+0x52>
        {
            if( bw == SX126X_LORA_BW_500 )
 8001264:	78bb      	ldrb	r3, [r7, #2]
 8001266:	2b06      	cmp	r3, #6
 8001268:	d105      	bne.n	8001276 <sx126x_tx_modulation_workaround+0x46>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 if the LoRa BW = 500 kHz
 800126a:	7bbb      	ldrb	r3, [r7, #14]
 800126c:	f023 0304 	bic.w	r3, r3, #4
 8001270:	b2db      	uxtb	r3, r3
 8001272:	73bb      	strb	r3, [r7, #14]
 8001274:	e00a      	b.n	800128c <sx126x_tx_modulation_workaround+0x5c>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any other LoRa BW
 8001276:	7bbb      	ldrb	r3, [r7, #14]
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	b2db      	uxtb	r3, r3
 800127e:	73bb      	strb	r3, [r7, #14]
 8001280:	e004      	b.n	800128c <sx126x_tx_modulation_workaround+0x5c>
            }
        }
        else
        {
            reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any (G)FSK configuration
 8001282:	7bbb      	ldrb	r3, [r7, #14]
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	b2db      	uxtb	r3, r3
 800128a:	73bb      	strb	r3, [r7, #14]
        }

        status = sx126x_write_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800128c:	f107 020e 	add.w	r2, r7, #14
 8001290:	2301      	movs	r3, #1
 8001292:	f640 0189 	movw	r1, #2185	@ 0x889
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fd87 	bl	8000daa <sx126x_write_register>
 800129c:	4603      	mov	r3, r0
 800129e:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <sx126x_hal_write>:
Send the command opcode over SPI.
Send the data buffer over SPI.
Drive the NSS line high.
*/
sx126x_hal_status_t sx126x_hal_write( const void* context, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	4613      	mov	r3, r2
 80012ba:	80fb      	strh	r3, [r7, #6]

    // Cast context
    sx126x_context* ctx = (sx126x_context*)context;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	617b      	str	r3, [r7, #20]

    //Poll the tranmsitters busy pin (active high)
	while (HAL_GPIO_ReadPin(ctx->busy_pin_port, ctx->busy_pin) == GPIO_PIN_SET){}
 80012c0:	bf00      	nop
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	899b      	ldrh	r3, [r3, #12]
 80012ca:	4619      	mov	r1, r3
 80012cc:	4610      	mov	r0, r2
 80012ce:	f000 fd2d 	bl	8001d2c <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d0f4      	beq.n	80012c2 <sx126x_hal_write+0x16>

	// Activate chip select (active low)
	HAL_GPIO_WritePin(ctx->chip_select_port, ctx->chip_select_pin, GPIO_PIN_RESET);
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	889b      	ldrh	r3, [r3, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	f000 fd3a 	bl	8001d5c <HAL_GPIO_WritePin>

	// Transmit command
	HAL_SPI_Transmit(ctx->hspi, (uint8_t*)command, command_length, HAL_MAX_DELAY);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	6a18      	ldr	r0, [r3, #32]
 80012ec:	88fa      	ldrh	r2, [r7, #6]
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	f002 fc97 	bl	8003c26 <HAL_SPI_Transmit>

	// send command to serial port
	CDC_Printf("Sending...\r\n");
 80012f8:	4816      	ldr	r0, [pc, #88]	@ (8001354 <sx126x_hal_write+0xa8>)
 80012fa:	f007 fd6a 	bl	8008dd2 <CDC_Printf>
	CDC_TransmitHex(command, command_length);
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	4619      	mov	r1, r3
 8001302:	68b8      	ldr	r0, [r7, #8]
 8001304:	f000 f8ae 	bl	8001464 <CDC_TransmitHex>


	//grab the transmitters response
	CDC_Printf("Recieving...\r\n");
 8001308:	4813      	ldr	r0, [pc, #76]	@ (8001358 <sx126x_hal_write+0xac>)
 800130a:	f007 fd62 	bl	8008dd2 <CDC_Printf>
	HAL_SPI_Receive(ctx->hspi, (uint8_t*)command, command_length, HAL_MAX_DELAY);
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	6a18      	ldr	r0, [r3, #32]
 8001312:	88fa      	ldrh	r2, [r7, #6]
 8001314:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	f002 fdc8 	bl	8003eae <HAL_SPI_Receive>

	// send command to serial port
	CDC_TransmitHex(command, command_length);
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	4619      	mov	r1, r3
 8001322:	68b8      	ldr	r0, [r7, #8]
 8001324:	f000 f89e 	bl	8001464 <CDC_TransmitHex>
	// Transmit data
	HAL_SPI_Transmit(ctx->hspi, (uint8_t*)data, data_length, HAL_MAX_DELAY);
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	6a18      	ldr	r0, [r3, #32]
 800132c:	8c3a      	ldrh	r2, [r7, #32]
 800132e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001332:	6839      	ldr	r1, [r7, #0]
 8001334:	f002 fc77 	bl	8003c26 <HAL_SPI_Transmit>

	// Deactivate chip select
	HAL_GPIO_WritePin(ctx->chip_select_port, ctx->chip_select_pin, GPIO_PIN_SET);
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	889b      	ldrh	r3, [r3, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	4619      	mov	r1, r3
 8001344:	f000 fd0a 	bl	8001d5c <HAL_GPIO_WritePin>


	return SX126X_HAL_STATUS_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	0800a070 	.word	0x0800a070
 8001358:	0800a080 	.word	0x0800a080

0800135c <sx126x_hal_read>:
Send the command opcode over SPI.
Receive the requested data via SPI into the buffer.
Drive the cs line high.
*/
sx126x_hal_status_t sx126x_hal_read( const void* context, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint16_t data_length ){
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	4613      	mov	r3, r2
 800136a:	80fb      	strh	r3, [r7, #6]

	// Cast context to the struct type
	sx126x_context* ctx = (sx126x_context*)context;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	617b      	str	r3, [r7, #20]

	// Activate chip select (active low)
	while (HAL_GPIO_ReadPin(ctx->busy_pin_port, ctx->busy_pin) == GPIO_PIN_SET){}
 8001370:	bf00      	nop
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	899b      	ldrh	r3, [r3, #12]
 800137a:	4619      	mov	r1, r3
 800137c:	4610      	mov	r0, r2
 800137e:	f000 fcd5 	bl	8001d2c <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	2b01      	cmp	r3, #1
 8001386:	d0f4      	beq.n	8001372 <sx126x_hal_read+0x16>

    HAL_GPIO_WritePin(ctx->chip_select_port, ctx->chip_select_pin, GPIO_PIN_RESET);
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	889b      	ldrh	r3, [r3, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fce2 	bl	8001d5c <HAL_GPIO_WritePin>

	// Transmit command
	HAL_SPI_Transmit(ctx->hspi, (uint8_t*)command, command_length, 1000);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	6a18      	ldr	r0, [r3, #32]
 800139c:	88fa      	ldrh	r2, [r7, #6]
 800139e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	f002 fc3f 	bl	8003c26 <HAL_SPI_Transmit>

    // Receive data from SX126x
    HAL_SPI_Receive(ctx->hspi, data, data_length, 1000);
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	6a18      	ldr	r0, [r3, #32]
 80013ac:	8c3a      	ldrh	r2, [r7, #32]
 80013ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b2:	6839      	ldr	r1, [r7, #0]
 80013b4:	f002 fd7b 	bl	8003eae <HAL_SPI_Receive>

    // Deactivate chip select (active high)
    HAL_GPIO_WritePin(ctx->chip_select_port, ctx->chip_select_pin, GPIO_PIN_SET);
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	889b      	ldrh	r3, [r3, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	4619      	mov	r1, r3
 80013c4:	f000 fcca 	bl	8001d5c <HAL_GPIO_WritePin>

    return SX126X_HAL_STATUS_OK;
 80013c8:	2300      	movs	r3, #0

}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <sx126x_hal_reset>:
Operation:
Set the reset pin low.
Wait at least 100 microseconds (according to the SX126X datasheet).
Set the reset pin high.
 */
sx126x_hal_status_t sx126x_hal_reset( const void* context ){
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
	// Cast context to the actual type
	sx126x_context* ctx = (sx126x_context*)context;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(ctx->reset_pin_port, ctx->reset_pin, GPIO_PIN_RESET);  // Reset pin (optional) active low
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6918      	ldr	r0, [r3, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	8a9b      	ldrh	r3, [r3, #20]
 80013e6:	2200      	movs	r2, #0
 80013e8:	4619      	mov	r1, r3
 80013ea:	f000 fcb7 	bl	8001d5c <HAL_GPIO_WritePin>
	HAL_Delay(200);  // Wait for reset to complete
 80013ee:	20c8      	movs	r0, #200	@ 0xc8
 80013f0:	f000 f950 	bl	8001694 <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_pin_port, ctx->reset_pin, GPIO_PIN_SET);  // Release reset pin
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6918      	ldr	r0, [r3, #16]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	8a9b      	ldrh	r3, [r3, #20]
 80013fc:	2201      	movs	r2, #1
 80013fe:	4619      	mov	r1, r3
 8001400:	f000 fcac 	bl	8001d5c <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <sx126x_hal_wakeup>:
Perform a no-op SPI transaction to generate a clock signal.
Drive the NSS line high.
Wait for the busy pin to indicate readiness.
 */

sx126x_hal_status_t sx126x_hal_wakeup( const void* context ){
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
	sx126x_context* ctx = (sx126x_context*)context;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]
    // Step 1: Pull Chip Select (CS) Low
    HAL_GPIO_WritePin(ctx->chip_select_port, ctx->chip_select_pin, GPIO_PIN_RESET);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	889b      	ldrh	r3, [r3, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	f000 fc99 	bl	8001d5c <HAL_GPIO_WritePin>

    // Step 2: Send a NOP command (0x00) over SPI
    uint8_t nop_cmd = 0x00;
 800142a:	2300      	movs	r3, #0
 800142c:	72fb      	strb	r3, [r7, #11]

    HAL_SPI_Transmit(ctx->hspi, &nop_cmd, 1, HAL_MAX_DELAY);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a18      	ldr	r0, [r3, #32]
 8001432:	f107 010b 	add.w	r1, r7, #11
 8001436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800143a:	2201      	movs	r2, #1
 800143c:	f002 fbf3 	bl	8003c26 <HAL_SPI_Transmit>

    HAL_Delay(3500);
 8001440:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001444:	f000 f926 	bl	8001694 <HAL_Delay>

    // Step 4: Pull Chip Select (CS) High
    HAL_GPIO_WritePin(ctx->chip_select_port, ctx->chip_select_pin, GPIO_PIN_SET);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	889b      	ldrh	r3, [r3, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	4619      	mov	r1, r3
 8001454:	f000 fc82 	bl	8001d5c <HAL_GPIO_WritePin>



	return SX126X_HAL_STATUS_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <CDC_TransmitHex>:

static void CDC_TransmitHex(const uint8_t* buf, uint16_t length)
{
 8001464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	807b      	strh	r3, [r7, #2]
 8001472:	466b      	mov	r3, sp
 8001474:	469a      	mov	sl, r3
    // each byte → “XX ” (3 chars) plus “\r\n” at the end
    char hexbuf[3 * length + 2];
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	1c9e      	adds	r6, r3, #2
 8001480:	1e73      	subs	r3, r6, #1
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	4632      	mov	r2, r6
 8001486:	2300      	movs	r3, #0
 8001488:	4690      	mov	r8, r2
 800148a:	4699      	mov	r9, r3
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001498:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800149c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014a0:	4632      	mov	r2, r6
 80014a2:	2300      	movs	r3, #0
 80014a4:	4614      	mov	r4, r2
 80014a6:	461d      	mov	r5, r3
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	00eb      	lsls	r3, r5, #3
 80014b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014b6:	00e2      	lsls	r2, r4, #3
 80014b8:	4633      	mov	r3, r6
 80014ba:	3307      	adds	r3, #7
 80014bc:	08db      	lsrs	r3, r3, #3
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	ebad 0d03 	sub.w	sp, sp, r3
 80014c4:	466b      	mov	r3, sp
 80014c6:	3300      	adds	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
    uint16_t idx = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	82fb      	strh	r3, [r7, #22]

    for (uint16_t i = 0; i < length; i++) {
 80014ce:	2300      	movs	r3, #0
 80014d0:	82bb      	strh	r3, [r7, #20]
 80014d2:	e014      	b.n	80014fe <CDC_TransmitHex+0x9a>
        // append “%02X ”
        idx += snprintf(hexbuf + idx,
 80014d4:	8afb      	ldrh	r3, [r7, #22]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	18d0      	adds	r0, r2, r3
                        sizeof(hexbuf) - idx,
 80014da:	4632      	mov	r2, r6
        idx += snprintf(hexbuf + idx,
 80014dc:	8afb      	ldrh	r3, [r7, #22]
                        sizeof(hexbuf) - idx,
 80014de:	1ad1      	subs	r1, r2, r3
                        "%02X ",
                        buf[i]);
 80014e0:	8abb      	ldrh	r3, [r7, #20]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	781b      	ldrb	r3, [r3, #0]
        idx += snprintf(hexbuf + idx,
 80014e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001558 <CDC_TransmitHex+0xf4>)
 80014ea:	f008 f8b7 	bl	800965c <sniprintf>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	8afb      	ldrh	r3, [r7, #22]
 80014f4:	4413      	add	r3, r2
 80014f6:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < length; i++) {
 80014f8:	8abb      	ldrh	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	82bb      	strh	r3, [r7, #20]
 80014fe:	8aba      	ldrh	r2, [r7, #20]
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	429a      	cmp	r2, r3
 8001504:	d3e6      	bcc.n	80014d4 <CDC_TransmitHex+0x70>
    }

    // overwrite trailing space with CRLF
    if (idx >= 1) {
 8001506:	8afb      	ldrh	r3, [r7, #22]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00c      	beq.n	8001526 <CDC_TransmitHex+0xc2>
        hexbuf[idx - 1] = '\r';  // replace last space
 800150c:	8afb      	ldrh	r3, [r7, #22]
 800150e:	3b01      	subs	r3, #1
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	210d      	movs	r1, #13
 8001514:	54d1      	strb	r1, [r2, r3]
        hexbuf[idx++]   = '\n';
 8001516:	8afb      	ldrh	r3, [r7, #22]
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	82fa      	strh	r2, [r7, #22]
 800151c:	461a      	mov	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	210a      	movs	r1, #10
 8001522:	5499      	strb	r1, [r3, r2]
 8001524:	e00d      	b.n	8001542 <CDC_TransmitHex+0xde>
    } else {
        // no data? just send CRLF
        hexbuf[idx++] = '\r';
 8001526:	8afb      	ldrh	r3, [r7, #22]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	82fa      	strh	r2, [r7, #22]
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	210d      	movs	r1, #13
 8001532:	5499      	strb	r1, [r3, r2]
        hexbuf[idx++] = '\n';
 8001534:	8afb      	ldrh	r3, [r7, #22]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	82fa      	strh	r2, [r7, #22]
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	210a      	movs	r1, #10
 8001540:	5499      	strb	r1, [r3, r2]
    }

    // fire it off
    CDC_Transmit_FS((uint8_t*)hexbuf, idx);
 8001542:	8afb      	ldrh	r3, [r7, #22]
 8001544:	4619      	mov	r1, r3
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f007 fc0c 	bl	8008d64 <CDC_Transmit_FS>
 800154c:	46d5      	mov	sp, sl
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001558:	0800a090 	.word	0x0800a090

0800155c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001594 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001560:	f7ff fba8 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  

  ldr r0, =_sdata
 8001564:	480c      	ldr	r0, [pc, #48]	@ (8001598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001566:	490d      	ldr	r1, [pc, #52]	@ (800159c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001568:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:


CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800157c:	4c0a      	ldr	r4, [pc, #40]	@ (80015a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158a:	f008 f8e3 	bl	8009754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158e:	f7fe ffef 	bl	8000570 <main>
  bx  lr    
 8001592:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80015a0:	0800a13c 	.word	0x0800a13c
  ldr r2, =_sbss
 80015a4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80015a8:	20001f90 	.word	0x20001f90

080015ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC_IRQHandler>
	...

080015b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b4:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0d      	ldr	r2, [pc, #52]	@ (80015f0 <HAL_Init+0x40>)
 80015ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <HAL_Init+0x40>)
 80015c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a07      	ldr	r2, [pc, #28]	@ (80015f0 <HAL_Init+0x40>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 f94f 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015de:	200f      	movs	r0, #15
 80015e0:	f000 f808 	bl	80015f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e4:	f7ff fa24 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <HAL_InitTick+0x54>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_InitTick+0x58>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f967 	bl	80018e6 <HAL_SYSTICK_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00e      	b.n	8001640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d80a      	bhi.n	800163e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001630:	f000 f92f 	bl	8001892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001634:	4a06      	ldr	r2, [pc, #24]	@ (8001650 <HAL_InitTick+0x5c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e000      	b.n	8001640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000000 	.word	0x20000000
 800164c:	20000008 	.word	0x20000008
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008
 8001678:	20000260 	.word	0x20000260

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000260 	.word	0x20000260

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	@ (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	@ (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	@ (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	@ (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	@ 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	@ 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800185c:	f7ff ff8e 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff29 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff3e 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff8e 	bl	80017d0 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5d 	bl	800177c <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff31 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa2 	bl	8001838 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800190c:	f7ff feb6 	bl	800167c <HAL_GetTick>
 8001910:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d008      	beq.n	8001930 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2280      	movs	r2, #128	@ 0x80
 8001922:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e052      	b.n	80019d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0216 	bic.w	r2, r2, #22
 800193e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800194e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	2b00      	cmp	r3, #0
 8001956:	d103      	bne.n	8001960 <HAL_DMA_Abort+0x62>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0208 	bic.w	r2, r2, #8
 800196e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001980:	e013      	b.n	80019aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001982:	f7ff fe7b 	bl	800167c <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b05      	cmp	r3, #5
 800198e:	d90c      	bls.n	80019aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2220      	movs	r2, #32
 8001994:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2203      	movs	r2, #3
 800199a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e015      	b.n	80019d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e4      	bne.n	8001982 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019bc:	223f      	movs	r2, #63	@ 0x3f
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d004      	beq.n	80019fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2280      	movs	r2, #128	@ 0x80
 80019f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e00c      	b.n	8001a16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2205      	movs	r2, #5
 8001a00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	@ 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e159      	b.n	8001cf4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	f040 8148 	bne.w	8001cee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d005      	beq.n	8001a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d130      	bne.n	8001ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 0201 	and.w	r2, r3, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d017      	beq.n	8001b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d123      	bne.n	8001b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	69b9      	ldr	r1, [r7, #24]
 8001b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80a2 	beq.w	8001cee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b57      	ldr	r3, [pc, #348]	@ (8001d0c <HAL_GPIO_Init+0x2e8>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	4a56      	ldr	r2, [pc, #344]	@ (8001d0c <HAL_GPIO_Init+0x2e8>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bba:	4b54      	ldr	r3, [pc, #336]	@ (8001d0c <HAL_GPIO_Init+0x2e8>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc6:	4a52      	ldr	r2, [pc, #328]	@ (8001d10 <HAL_GPIO_Init+0x2ec>)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a49      	ldr	r2, [pc, #292]	@ (8001d14 <HAL_GPIO_Init+0x2f0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d019      	beq.n	8001c26 <HAL_GPIO_Init+0x202>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a48      	ldr	r2, [pc, #288]	@ (8001d18 <HAL_GPIO_Init+0x2f4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d013      	beq.n	8001c22 <HAL_GPIO_Init+0x1fe>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a47      	ldr	r2, [pc, #284]	@ (8001d1c <HAL_GPIO_Init+0x2f8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00d      	beq.n	8001c1e <HAL_GPIO_Init+0x1fa>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a46      	ldr	r2, [pc, #280]	@ (8001d20 <HAL_GPIO_Init+0x2fc>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d007      	beq.n	8001c1a <HAL_GPIO_Init+0x1f6>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a45      	ldr	r2, [pc, #276]	@ (8001d24 <HAL_GPIO_Init+0x300>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_GPIO_Init+0x1f2>
 8001c12:	2304      	movs	r3, #4
 8001c14:	e008      	b.n	8001c28 <HAL_GPIO_Init+0x204>
 8001c16:	2307      	movs	r3, #7
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x204>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e004      	b.n	8001c28 <HAL_GPIO_Init+0x204>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_Init+0x204>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_Init+0x204>
 8001c26:	2300      	movs	r3, #0
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	f002 0203 	and.w	r2, r2, #3
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	4093      	lsls	r3, r2
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c38:	4935      	ldr	r1, [pc, #212]	@ (8001d10 <HAL_GPIO_Init+0x2ec>)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c46:	4b38      	ldr	r3, [pc, #224]	@ (8001d28 <HAL_GPIO_Init+0x304>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001d28 <HAL_GPIO_Init+0x304>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c70:	4b2d      	ldr	r3, [pc, #180]	@ (8001d28 <HAL_GPIO_Init+0x304>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c94:	4a24      	ldr	r2, [pc, #144]	@ (8001d28 <HAL_GPIO_Init+0x304>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9a:	4b23      	ldr	r3, [pc, #140]	@ (8001d28 <HAL_GPIO_Init+0x304>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8001d28 <HAL_GPIO_Init+0x304>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc4:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <HAL_GPIO_Init+0x304>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce8:	4a0f      	ldr	r2, [pc, #60]	@ (8001d28 <HAL_GPIO_Init+0x304>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b0f      	cmp	r3, #15
 8001cf8:	f67f aea2 	bls.w	8001a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3724      	adds	r7, #36	@ 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40013800 	.word	0x40013800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40013c00 	.word	0x40013c00

08001d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	e001      	b.n	8001d4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d6c:	787b      	ldrb	r3, [r7, #1]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d78:	e003      	b.n	8001d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d7a:	887b      	ldrh	r3, [r7, #2]
 8001d7c:	041a      	lsls	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	619a      	str	r2, [r3, #24]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d9a:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001da6:	4a05      	ldr	r2, [pc, #20]	@ (8001dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fe24 	bl	80009fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40013c00 	.word	0x40013c00

08001dc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e101      	b.n	8001fd6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d106      	bne.n	8001df2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f007 f92b 	bl	8009048 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2203      	movs	r2, #3
 8001df6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e00:	d102      	bne.n	8001e08 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 fce8 	bl	80057e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7c1a      	ldrb	r2, [r3, #16]
 8001e1a:	f88d 2000 	strb.w	r2, [sp]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e22:	f003 fbc7 	bl	80055b4 <USB_CoreInit>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0ce      	b.n	8001fd6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fce0 	bl	8005804 <USB_SetCurrentMode>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0bf      	b.n	8001fd6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	e04a      	b.n	8001ef2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3315      	adds	r3, #21
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3314      	adds	r3, #20
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	b298      	uxth	r0, r3
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	332e      	adds	r3, #46	@ 0x2e
 8001e98:	4602      	mov	r2, r0
 8001e9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3318      	adds	r3, #24
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	331c      	adds	r3, #28
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3320      	adds	r3, #32
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3324      	adds	r3, #36	@ 0x24
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	791b      	ldrb	r3, [r3, #4]
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d3af      	bcc.n	8001e5c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e044      	b.n	8001f8c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	791b      	ldrb	r3, [r3, #4]
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d3b5      	bcc.n	8001f02 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7c1a      	ldrb	r2, [r3, #16]
 8001f9e:	f88d 2000 	strb.w	r2, [sp]
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa6:	f003 fc79 	bl	800589c <USB_DevInit>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e00c      	b.n	8001fd6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f004 fcc3 	bl	800695a <USB_DevDisconnect>

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_PCD_Start+0x1c>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e022      	b.n	8002040 <HAL_PCD_Start+0x62>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d009      	beq.n	8002022 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002012:	2b01      	cmp	r3, #1
 8002014:	d105      	bne.n	8002022 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800201a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f003 fbca 	bl	80057c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fc71 	bl	8006918 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b08d      	sub	sp, #52	@ 0x34
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f004 fd2f 	bl	8006ac2 <USB_GetMode>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 848c 	bne.w	8002984 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f004 fc93 	bl	800699c <USB_ReadInterrupts>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 8482 	beq.w	8002982 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f004 fc80 	bl	800699c <USB_ReadInterrupts>
 800209c:	4603      	mov	r3, r0
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d107      	bne.n	80020b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695a      	ldr	r2, [r3, #20]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f002 0202 	and.w	r2, r2, #2
 80020b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f004 fc6e 	bl	800699c <USB_ReadInterrupts>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b10      	cmp	r3, #16
 80020c8:	d161      	bne.n	800218e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699a      	ldr	r2, [r3, #24]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0210 	bic.w	r2, r2, #16
 80020d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f003 020f 	and.w	r2, r3, #15
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	3304      	adds	r3, #4
 80020f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	0c5b      	lsrs	r3, r3, #17
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	2b02      	cmp	r3, #2
 8002104:	d124      	bne.n	8002150 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d035      	beq.n	800217e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800211c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002120:	b29b      	uxth	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	6a38      	ldr	r0, [r7, #32]
 8002126:	f004 faa5 	bl	8006674 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002136:	441a      	add	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002148:	441a      	add	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	615a      	str	r2, [r3, #20]
 800214e:	e016      	b.n	800217e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	0c5b      	lsrs	r3, r3, #17
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	2b06      	cmp	r3, #6
 800215a:	d110      	bne.n	800217e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002162:	2208      	movs	r2, #8
 8002164:	4619      	mov	r1, r3
 8002166:	6a38      	ldr	r0, [r7, #32]
 8002168:	f004 fa84 	bl	8006674 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002178:	441a      	add	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699a      	ldr	r2, [r3, #24]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0210 	orr.w	r2, r2, #16
 800218c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f004 fc02 	bl	800699c <USB_ReadInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800219e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80021a2:	f040 80a7 	bne.w	80022f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f004 fc07 	bl	80069c2 <USB_ReadDevAllOutEpInterrupt>
 80021b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80021b6:	e099      	b.n	80022ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 808e 	beq.w	80022e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 fc2b 	bl	8006a2a <USB_ReadDevOutEPInterrupt>
 80021d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00c      	beq.n	80021fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021ec:	461a      	mov	r2, r3
 80021ee:	2301      	movs	r3, #1
 80021f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80021f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fea3 	bl	8002f40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00c      	beq.n	800221e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	4413      	add	r3, r2
 800220c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002210:	461a      	mov	r2, r3
 8002212:	2308      	movs	r3, #8
 8002214:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002216:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 ff79 	bl	8003110 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	4413      	add	r3, r2
 8002230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002234:	461a      	mov	r2, r3
 8002236:	2310      	movs	r3, #16
 8002238:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d030      	beq.n	80022a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224c:	2b80      	cmp	r3, #128	@ 0x80
 800224e:	d109      	bne.n	8002264 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800225e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002262:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	3304      	adds	r3, #4
 8002278:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	78db      	ldrb	r3, [r3, #3]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d108      	bne.n	8002294 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2200      	movs	r2, #0
 8002286:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	b2db      	uxtb	r3, r3
 800228c:	4619      	mov	r1, r3
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f006 ffd6 	bl	8009240 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	4413      	add	r3, r2
 800229c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022a0:	461a      	mov	r2, r3
 80022a2:	2302      	movs	r3, #2
 80022a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022bc:	461a      	mov	r2, r3
 80022be:	2320      	movs	r3, #32
 80022c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d009      	beq.n	80022e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022d8:	461a      	mov	r2, r3
 80022da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	3301      	adds	r3, #1
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80022e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80022ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f47f af62 	bne.w	80021b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 fb4f 	bl	800699c <USB_ReadInterrupts>
 80022fe:	4603      	mov	r3, r0
 8002300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002304:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002308:	f040 80db 	bne.w	80024c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f004 fb70 	bl	80069f6 <USB_ReadDevAllInEpInterrupt>
 8002316:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800231c:	e0cd      	b.n	80024ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800231e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80c2 	beq.w	80024ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f004 fb96 	bl	8006a66 <USB_ReadDevInEPInterrupt>
 800233a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d057      	beq.n	80023f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	2201      	movs	r2, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800235a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	43db      	mvns	r3, r3
 8002360:	69f9      	ldr	r1, [r7, #28]
 8002362:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002366:	4013      	ands	r3, r2
 8002368:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002376:	461a      	mov	r2, r3
 8002378:	2301      	movs	r3, #1
 800237a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	799b      	ldrb	r3, [r3, #6]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d132      	bne.n	80023ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	3320      	adds	r3, #32
 8002394:	6819      	ldr	r1, [r3, #0]
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4403      	add	r3, r0
 80023a4:	331c      	adds	r3, #28
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4419      	add	r1, r3
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4403      	add	r3, r0
 80023b8:	3320      	adds	r3, #32
 80023ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d113      	bne.n	80023ea <HAL_PCD_IRQHandler+0x3a2>
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	3324      	adds	r3, #36	@ 0x24
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d108      	bne.n	80023ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023e2:	461a      	mov	r2, r3
 80023e4:	2101      	movs	r1, #1
 80023e6:	f004 fb9d 	bl	8006b24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4619      	mov	r1, r3
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f006 feaa 	bl	800914a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	4413      	add	r3, r2
 8002408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800240c:	461a      	mov	r2, r3
 800240e:	2308      	movs	r3, #8
 8002410:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	4413      	add	r3, r2
 8002424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002428:	461a      	mov	r2, r3
 800242a:	2310      	movs	r3, #16
 800242c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002444:	461a      	mov	r2, r3
 8002446:	2340      	movs	r3, #64	@ 0x40
 8002448:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d023      	beq.n	800249c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002454:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002456:	6a38      	ldr	r0, [r7, #32]
 8002458:	f003 fb84 	bl	8005b64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800245c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	3310      	adds	r3, #16
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	3304      	adds	r3, #4
 800246e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	78db      	ldrb	r3, [r3, #3]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d108      	bne.n	800248a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2200      	movs	r2, #0
 800247c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	b2db      	uxtb	r3, r3
 8002482:	4619      	mov	r1, r3
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f006 feed 	bl	8009264 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	4413      	add	r3, r2
 8002492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002496:	461a      	mov	r2, r3
 8002498:	2302      	movs	r3, #2
 800249a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fcbd 	bl	8002e28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	3301      	adds	r3, #1
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80024b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b6:	085b      	lsrs	r3, r3, #1
 80024b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80024ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f47f af2e 	bne.w	800231e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 fa68 	bl	800699c <USB_ReadInterrupts>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80024d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024d6:	d122      	bne.n	800251e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d108      	bne.n	8002508 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024fe:	2100      	movs	r1, #0
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fea3 	bl	800324c <HAL_PCDEx_LPM_Callback>
 8002506:	e002      	b.n	800250e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f006 fe8b 	bl	8009224 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800251c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f004 fa3a 	bl	800699c <USB_ReadInterrupts>
 8002528:	4603      	mov	r3, r0
 800252a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800252e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002532:	d112      	bne.n	800255a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d102      	bne.n	800254a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f006 fe47 	bl	80091d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002558:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f004 fa1c 	bl	800699c <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800256a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800256e:	f040 80b7 	bne.w	80026e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	69fa      	ldr	r2, [r7, #28]
 800257c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002580:	f023 0301 	bic.w	r3, r3, #1
 8002584:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2110      	movs	r1, #16
 800258c:	4618      	mov	r0, r3
 800258e:	f003 fae9 	bl	8005b64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002592:	2300      	movs	r3, #0
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002596:	e046      	b.n	8002626 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025a4:	461a      	mov	r2, r3
 80025a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80025aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80025ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025bc:	0151      	lsls	r1, r2, #5
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	440a      	add	r2, r1
 80025c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80025c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80025ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025d8:	461a      	mov	r2, r3
 80025da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80025de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025f0:	0151      	lsls	r1, r2, #5
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	440a      	add	r2, r1
 80025f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80025fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80025fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	4413      	add	r3, r2
 8002608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002610:	0151      	lsls	r1, r2, #5
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	440a      	add	r2, r1
 8002616:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800261a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800261e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002622:	3301      	adds	r3, #1
 8002624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	791b      	ldrb	r3, [r3, #4]
 800262a:	461a      	mov	r2, r3
 800262c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800262e:	4293      	cmp	r3, r2
 8002630:	d3b2      	bcc.n	8002598 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002640:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002644:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	7bdb      	ldrb	r3, [r3, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d016      	beq.n	800267c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800265e:	f043 030b 	orr.w	r3, r3, #11
 8002662:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800266c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002674:	f043 030b 	orr.w	r3, r3, #11
 8002678:	6453      	str	r3, [r2, #68]	@ 0x44
 800267a:	e015      	b.n	80026a8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800268a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800268e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002692:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026a2:	f043 030b 	orr.w	r3, r3, #11
 80026a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80026ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026ca:	461a      	mov	r2, r3
 80026cc:	f004 fa2a 	bl	8006b24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80026de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 f959 	bl	800699c <USB_ReadInterrupts>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026f4:	d123      	bne.n	800273e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 f9ef 	bl	8006ade <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f003 faa6 	bl	8005c56 <USB_GetDevSpeed>
 800270a:	4603      	mov	r3, r0
 800270c:	461a      	mov	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681c      	ldr	r4, [r3, #0]
 8002716:	f001 f9c9 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 800271a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002720:	461a      	mov	r2, r3
 8002722:	4620      	mov	r0, r4
 8002724:	f002 ffaa 	bl	800567c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f006 fd36 	bl	800919a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800273c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f004 f92a 	bl	800699c <USB_ReadInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b08      	cmp	r3, #8
 8002750:	d10a      	bne.n	8002768 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f006 fd13 	bl	800917e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f002 0208 	and.w	r2, r2, #8
 8002766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f004 f915 	bl	800699c <USB_ReadInterrupts>
 8002772:	4603      	mov	r3, r0
 8002774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002778:	2b80      	cmp	r3, #128	@ 0x80
 800277a:	d123      	bne.n	80027c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002788:	2301      	movs	r3, #1
 800278a:	627b      	str	r3, [r7, #36]	@ 0x24
 800278c:	e014      	b.n	80027b8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	4619      	mov	r1, r3
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fb0a 	bl	8002dc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	3301      	adds	r3, #1
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	791b      	ldrb	r3, [r3, #4]
 80027bc:	461a      	mov	r2, r3
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d3e4      	bcc.n	800278e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f004 f8e7 	bl	800699c <USB_ReadInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027d8:	d13c      	bne.n	8002854 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027da:	2301      	movs	r3, #1
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80027de:	e02b      	b.n	8002838 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	3318      	adds	r3, #24
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d115      	bne.n	8002832 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002806:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002808:	2b00      	cmp	r3, #0
 800280a:	da12      	bge.n	8002832 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3317      	adds	r3, #23
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002828:	b2db      	uxtb	r3, r3
 800282a:	4619      	mov	r1, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 faca 	bl	8002dc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	3301      	adds	r3, #1
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	791b      	ldrb	r3, [r3, #4]
 800283c:	461a      	mov	r2, r3
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	4293      	cmp	r3, r2
 8002842:	d3cd      	bcc.n	80027e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f004 f89f 	bl	800699c <USB_ReadInterrupts>
 800285e:	4603      	mov	r3, r0
 8002860:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002864:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002868:	d156      	bne.n	8002918 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800286a:	2301      	movs	r3, #1
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
 800286e:	e045      	b.n	80028fc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	4413      	add	r3, r2
 8002878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d12e      	bne.n	80028f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002898:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800289a:	2b00      	cmp	r3, #0
 800289c:	da2b      	bge.n	80028f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80028aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d121      	bne.n	80028f6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028f2:	6053      	str	r3, [r2, #4]
            break;
 80028f4:	e008      	b.n	8002908 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	3301      	adds	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	791b      	ldrb	r3, [r3, #4]
 8002900:	461a      	mov	r2, r3
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	4293      	cmp	r3, r2
 8002906:	d3b3      	bcc.n	8002870 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f004 f83d 	bl	800699c <USB_ReadInterrupts>
 8002922:	4603      	mov	r3, r0
 8002924:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800292c:	d10a      	bne.n	8002944 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f006 fcaa 	bl	8009288 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f004 f827 	bl	800699c <USB_ReadInterrupts>
 800294e:	4603      	mov	r3, r0
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b04      	cmp	r3, #4
 8002956:	d115      	bne.n	8002984 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f006 fc9a 	bl	80092a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6859      	ldr	r1, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	e000      	b.n	8002984 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002982:	bf00      	nop
    }
  }
}
 8002984:	3734      	adds	r7, #52	@ 0x34
 8002986:	46bd      	mov	sp, r7
 8002988:	bd90      	pop	{r4, r7, pc}

0800298a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	460b      	mov	r3, r1
 8002994:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_PCD_SetAddress+0x1a>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e012      	b.n	80029ca <HAL_PCD_SetAddress+0x40>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 ff86 	bl	80068cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	4608      	mov	r0, r1
 80029dc:	4611      	mov	r1, r2
 80029de:	461a      	mov	r2, r3
 80029e0:	4603      	mov	r3, r0
 80029e2:	70fb      	strb	r3, [r7, #3]
 80029e4:	460b      	mov	r3, r1
 80029e6:	803b      	strh	r3, [r7, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	da0f      	bge.n	8002a18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	f003 020f 	and.w	r2, r3, #15
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	3310      	adds	r3, #16
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2201      	movs	r2, #1
 8002a14:	705a      	strb	r2, [r3, #1]
 8002a16:	e00f      	b.n	8002a38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3304      	adds	r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002a44:	883b      	ldrh	r3, [r7, #0]
 8002a46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	78ba      	ldrb	r2, [r7, #2]
 8002a52:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	785b      	ldrb	r3, [r3, #1]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d004      	beq.n	8002a66 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a66:	78bb      	ldrb	r3, [r7, #2]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d102      	bne.n	8002a72 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_PCD_EP_Open+0xae>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e00e      	b.n	8002a9e <HAL_PCD_EP_Open+0xcc>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68f9      	ldr	r1, [r7, #12]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 f906 	bl	8005ca0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002a9c:	7afb      	ldrb	r3, [r7, #11]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	da0f      	bge.n	8002ada <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	f003 020f 	and.w	r2, r3, #15
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	3310      	adds	r3, #16
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	3304      	adds	r3, #4
 8002ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	705a      	strb	r2, [r3, #1]
 8002ad8:	e00f      	b.n	8002afa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	f003 020f 	and.w	r2, r3, #15
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4413      	add	r3, r2
 8002af0:	3304      	adds	r3, #4
 8002af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_PCD_EP_Close+0x6e>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e00e      	b.n	8002b32 <HAL_PCD_EP_Close+0x8c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68f9      	ldr	r1, [r7, #12]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f003 f944 	bl	8005db0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
 8002b46:	460b      	mov	r3, r1
 8002b48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b4a:	7afb      	ldrb	r3, [r7, #11]
 8002b4c:	f003 020f 	and.w	r2, r3, #15
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	3304      	adds	r3, #4
 8002b62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2200      	movs	r2, #0
 8002b74:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	799b      	ldrb	r3, [r3, #6]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d102      	bne.n	8002b96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	799b      	ldrb	r3, [r3, #6]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6979      	ldr	r1, [r7, #20]
 8002ba2:	f003 f9e1 	bl	8005f68 <USB_EPStartXfer>

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f003 020f 	and.w	r2, r3, #15
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	460b      	mov	r3, r1
 8002bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf0:	7afb      	ldrb	r3, [r7, #11]
 8002bf2:	f003 020f 	and.w	r2, r3, #15
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	3310      	adds	r3, #16
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	3304      	adds	r3, #4
 8002c06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2200      	movs	r2, #0
 8002c18:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c20:	7afb      	ldrb	r3, [r7, #11]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	799b      	ldrb	r3, [r3, #6]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d102      	bne.n	8002c3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	799b      	ldrb	r3, [r3, #6]
 8002c42:	461a      	mov	r2, r3
 8002c44:	6979      	ldr	r1, [r7, #20]
 8002c46:	f003 f98f 	bl	8005f68 <USB_EPStartXfer>

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	7912      	ldrb	r2, [r2, #4]
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e04f      	b.n	8002d12 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	da0f      	bge.n	8002c9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	f003 020f 	and.w	r2, r3, #15
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	3310      	adds	r3, #16
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3304      	adds	r3, #4
 8002c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	705a      	strb	r2, [r3, #1]
 8002c98:	e00d      	b.n	8002cb6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	4413      	add	r3, r2
 8002cac:	3304      	adds	r3, #4
 8002cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_PCD_EP_SetStall+0x82>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e01d      	b.n	8002d12 <HAL_PCD_EP_SetStall+0xbe>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68f9      	ldr	r1, [r7, #12]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f003 fd1d 	bl	8006724 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7999      	ldrb	r1, [r3, #6]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d02:	461a      	mov	r2, r3
 8002d04:	f003 ff0e 	bl	8006b24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	7912      	ldrb	r2, [r2, #4]
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d901      	bls.n	8002d38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e042      	b.n	8002dbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	da0f      	bge.n	8002d60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	f003 020f 	and.w	r2, r3, #15
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	3310      	adds	r3, #16
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	3304      	adds	r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	705a      	strb	r2, [r3, #1]
 8002d5e:	e00f      	b.n	8002d80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	f003 020f 	and.w	r2, r3, #15
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	3304      	adds	r3, #4
 8002d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_PCD_EP_ClrStall+0x86>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e00e      	b.n	8002dbe <HAL_PCD_EP_ClrStall+0xa4>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 fd26 	bl	8006800 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	da0c      	bge.n	8002df4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	3310      	adds	r3, #16
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	3304      	adds	r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e00c      	b.n	8002e0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	f003 020f 	and.w	r2, r3, #15
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 fb45 	bl	80064a4 <USB_EPStopXfer>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	@ 0x28
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	3310      	adds	r3, #16
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d901      	bls.n	8002e60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e06b      	b.n	8002f38 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d902      	bls.n	8002e7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	3303      	adds	r3, #3
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e84:	e02a      	b.n	8002edc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d902      	bls.n	8002ea2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3303      	adds	r3, #3
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	68d9      	ldr	r1, [r3, #12]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	6978      	ldr	r0, [r7, #20]
 8002ec0:	f003 fb9a 	bl	80065f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	441a      	add	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	441a      	add	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d809      	bhi.n	8002f06 <PCD_WriteEmptyTxFifo+0xde>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d203      	bcs.n	8002f06 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1bf      	bne.n	8002e86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d811      	bhi.n	8002f36 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	2201      	movs	r2, #1
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	6939      	ldr	r1, [r7, #16]
 8002f2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f32:	4013      	ands	r3, r2
 8002f34:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	333c      	adds	r3, #60	@ 0x3c
 8002f58:	3304      	adds	r3, #4
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	799b      	ldrb	r3, [r3, #6]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d17b      	bne.n	800306e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d015      	beq.n	8002fac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	4a61      	ldr	r2, [pc, #388]	@ (8003108 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	f240 80b9 	bls.w	80030fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80b3 	beq.w	80030fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fa8:	6093      	str	r3, [r2, #8]
 8002faa:	e0a7      	b.n	80030fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	6093      	str	r3, [r2, #8]
 8002fc8:	e098      	b.n	80030fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f040 8093 	bne.w	80030fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8003108 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d90f      	bls.n	8002ffe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00a      	beq.n	8002ffe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ffa:	6093      	str	r3, [r2, #8]
 8002ffc:	e07e      	b.n	80030fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	3304      	adds	r3, #4
 8003012:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a1a      	ldr	r2, [r3, #32]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	0159      	lsls	r1, r3, #5
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	440b      	add	r3, r1
 8003020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302a:	1ad2      	subs	r2, r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d114      	bne.n	8003060 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003048:	461a      	mov	r2, r3
 800304a:	2101      	movs	r1, #1
 800304c:	f003 fd6a 	bl	8006b24 <USB_EP0_OutStart>
 8003050:	e006      	b.n	8003060 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	441a      	add	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	4619      	mov	r1, r3
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f006 f854 	bl	8009114 <HAL_PCD_DataOutStageCallback>
 800306c:	e046      	b.n	80030fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	4a26      	ldr	r2, [pc, #152]	@ (800310c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d124      	bne.n	80030c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800308c:	461a      	mov	r2, r3
 800308e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003092:	6093      	str	r3, [r2, #8]
 8003094:	e032      	b.n	80030fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ac:	461a      	mov	r2, r3
 80030ae:	2320      	movs	r3, #32
 80030b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	4619      	mov	r1, r3
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f006 f82b 	bl	8009114 <HAL_PCD_DataOutStageCallback>
 80030be:	e01d      	b.n	80030fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d114      	bne.n	80030f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d108      	bne.n	80030f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030e8:	461a      	mov	r2, r3
 80030ea:	2100      	movs	r1, #0
 80030ec:	f003 fd1a 	bl	8006b24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f006 f80c 	bl	8009114 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3720      	adds	r7, #32
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	4f54300a 	.word	0x4f54300a
 800310c:	4f54310a 	.word	0x4f54310a

08003110 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	333c      	adds	r3, #60	@ 0x3c
 8003128:	3304      	adds	r3, #4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4413      	add	r3, r2
 8003136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4a15      	ldr	r2, [pc, #84]	@ (8003198 <PCD_EP_OutSetupPacket_int+0x88>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d90e      	bls.n	8003164 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800314c:	2b00      	cmp	r3, #0
 800314e:	d009      	beq.n	8003164 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800315c:	461a      	mov	r2, r3
 800315e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003162:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f005 ffc3 	bl	80090f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a0a      	ldr	r2, [pc, #40]	@ (8003198 <PCD_EP_OutSetupPacket_int+0x88>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d90c      	bls.n	800318c <PCD_EP_OutSetupPacket_int+0x7c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	799b      	ldrb	r3, [r3, #6]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d108      	bne.n	800318c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003184:	461a      	mov	r2, r3
 8003186:	2101      	movs	r1, #1
 8003188:	f003 fccc 	bl	8006b24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	4f54300a 	.word	0x4f54300a

0800319c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]
 80031a8:	4613      	mov	r3, r2
 80031aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d107      	bne.n	80031ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031ba:	883b      	ldrh	r3, [r7, #0]
 80031bc:	0419      	lsls	r1, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80031c8:	e028      	b.n	800321c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	4413      	add	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e00d      	b.n	80031fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	3340      	adds	r3, #64	@ 0x40
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	0c1b      	lsrs	r3, r3, #16
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	4413      	add	r3, r2
 80031f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	3301      	adds	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	3b01      	subs	r3, #1
 8003200:	429a      	cmp	r2, r3
 8003202:	d3ec      	bcc.n	80031de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003204:	883b      	ldrh	r3, [r7, #0]
 8003206:	0418      	lsls	r0, r3, #16
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6819      	ldr	r1, [r3, #0]
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	3b01      	subs	r3, #1
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	4302      	orrs	r2, r0
 8003214:	3340      	adds	r3, #64	@ 0x40
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e267      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d075      	beq.n	800336e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003282:	4b88      	ldr	r3, [pc, #544]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b04      	cmp	r3, #4
 800328c:	d00c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328e:	4b85      	ldr	r3, [pc, #532]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003296:	2b08      	cmp	r3, #8
 8003298:	d112      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800329a:	4b82      	ldr	r3, [pc, #520]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032a6:	d10b      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	4b7e      	ldr	r3, [pc, #504]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d05b      	beq.n	800336c <HAL_RCC_OscConfig+0x108>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d157      	bne.n	800336c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e242      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c8:	d106      	bne.n	80032d8 <HAL_RCC_OscConfig+0x74>
 80032ca:	4b76      	ldr	r3, [pc, #472]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a75      	ldr	r2, [pc, #468]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e01d      	b.n	8003314 <HAL_RCC_OscConfig+0xb0>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x98>
 80032e2:	4b70      	ldr	r3, [pc, #448]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6f      	ldr	r2, [pc, #444]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b6d      	ldr	r3, [pc, #436]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a6c      	ldr	r2, [pc, #432]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0xb0>
 80032fc:	4b69      	ldr	r3, [pc, #420]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a68      	ldr	r2, [pc, #416]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b66      	ldr	r3, [pc, #408]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a65      	ldr	r2, [pc, #404]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 800330e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fe f9ae 	bl	800167c <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7fe f9aa 	bl	800167c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	@ 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e207      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	4b5b      	ldr	r3, [pc, #364]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0xc0>
 8003342:	e014      	b.n	800336e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe f99a 	bl	800167c <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800334c:	f7fe f996 	bl	800167c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	@ 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e1f3      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335e:	4b51      	ldr	r3, [pc, #324]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0xe8>
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d063      	beq.n	8003442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800337a:	4b4a      	ldr	r3, [pc, #296]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003386:	4b47      	ldr	r3, [pc, #284]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800338e:	2b08      	cmp	r3, #8
 8003390:	d11c      	bne.n	80033cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003392:	4b44      	ldr	r3, [pc, #272]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d116      	bne.n	80033cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339e:	4b41      	ldr	r3, [pc, #260]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_RCC_OscConfig+0x152>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e1c7      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b6:	4b3b      	ldr	r3, [pc, #236]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4937      	ldr	r1, [pc, #220]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ca:	e03a      	b.n	8003442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d020      	beq.n	8003416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d4:	4b34      	ldr	r3, [pc, #208]	@ (80034a8 <HAL_RCC_OscConfig+0x244>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fe f94f 	bl	800167c <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e2:	f7fe f94b 	bl	800167c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e1a8      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f4:	4b2b      	ldr	r3, [pc, #172]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003400:	4b28      	ldr	r3, [pc, #160]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4925      	ldr	r1, [pc, #148]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
 8003414:	e015      	b.n	8003442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003416:	4b24      	ldr	r3, [pc, #144]	@ (80034a8 <HAL_RCC_OscConfig+0x244>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe f92e 	bl	800167c <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003424:	f7fe f92a 	bl	800167c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e187      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003436:	4b1b      	ldr	r3, [pc, #108]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d036      	beq.n	80034bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d016      	beq.n	8003484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003456:	4b15      	ldr	r3, [pc, #84]	@ (80034ac <HAL_RCC_OscConfig+0x248>)
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345c:	f7fe f90e 	bl	800167c <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003464:	f7fe f90a 	bl	800167c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e167      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003476:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x200>
 8003482:	e01b      	b.n	80034bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003484:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <HAL_RCC_OscConfig+0x248>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348a:	f7fe f8f7 	bl	800167c <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003490:	e00e      	b.n	80034b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003492:	f7fe f8f3 	bl	800167c <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d907      	bls.n	80034b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e150      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
 80034a4:	40023800 	.word	0x40023800
 80034a8:	42470000 	.word	0x42470000
 80034ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b0:	4b88      	ldr	r3, [pc, #544]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80034b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1ea      	bne.n	8003492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8097 	beq.w	80035f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ca:	2300      	movs	r3, #0
 80034cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ce:	4b81      	ldr	r3, [pc, #516]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10f      	bne.n	80034fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	4b7d      	ldr	r3, [pc, #500]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	4a7c      	ldr	r2, [pc, #496]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80034e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ea:	4b7a      	ldr	r3, [pc, #488]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f6:	2301      	movs	r3, #1
 80034f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fa:	4b77      	ldr	r3, [pc, #476]	@ (80036d8 <HAL_RCC_OscConfig+0x474>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d118      	bne.n	8003538 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003506:	4b74      	ldr	r3, [pc, #464]	@ (80036d8 <HAL_RCC_OscConfig+0x474>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a73      	ldr	r2, [pc, #460]	@ (80036d8 <HAL_RCC_OscConfig+0x474>)
 800350c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003512:	f7fe f8b3 	bl	800167c <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351a:	f7fe f8af 	bl	800167c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e10c      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352c:	4b6a      	ldr	r3, [pc, #424]	@ (80036d8 <HAL_RCC_OscConfig+0x474>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d106      	bne.n	800354e <HAL_RCC_OscConfig+0x2ea>
 8003540:	4b64      	ldr	r3, [pc, #400]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003544:	4a63      	ldr	r2, [pc, #396]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6713      	str	r3, [r2, #112]	@ 0x70
 800354c:	e01c      	b.n	8003588 <HAL_RCC_OscConfig+0x324>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b05      	cmp	r3, #5
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0x30c>
 8003556:	4b5f      	ldr	r3, [pc, #380]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355a:	4a5e      	ldr	r2, [pc, #376]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	6713      	str	r3, [r2, #112]	@ 0x70
 8003562:	4b5c      	ldr	r3, [pc, #368]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003566:	4a5b      	ldr	r2, [pc, #364]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	6713      	str	r3, [r2, #112]	@ 0x70
 800356e:	e00b      	b.n	8003588 <HAL_RCC_OscConfig+0x324>
 8003570:	4b58      	ldr	r3, [pc, #352]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003574:	4a57      	ldr	r2, [pc, #348]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	6713      	str	r3, [r2, #112]	@ 0x70
 800357c:	4b55      	ldr	r3, [pc, #340]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003580:	4a54      	ldr	r2, [pc, #336]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003582:	f023 0304 	bic.w	r3, r3, #4
 8003586:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d015      	beq.n	80035bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7fe f874 	bl	800167c <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003596:	e00a      	b.n	80035ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003598:	f7fe f870 	bl	800167c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e0cb      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ae:	4b49      	ldr	r3, [pc, #292]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0ee      	beq.n	8003598 <HAL_RCC_OscConfig+0x334>
 80035ba:	e014      	b.n	80035e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035bc:	f7fe f85e 	bl	800167c <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c2:	e00a      	b.n	80035da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c4:	f7fe f85a 	bl	800167c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e0b5      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035da:	4b3e      	ldr	r3, [pc, #248]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1ee      	bne.n	80035c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d105      	bne.n	80035f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ec:	4b39      	ldr	r3, [pc, #228]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	4a38      	ldr	r2, [pc, #224]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80035f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80a1 	beq.w	8003744 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003602:	4b34      	ldr	r3, [pc, #208]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b08      	cmp	r3, #8
 800360c:	d05c      	beq.n	80036c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d141      	bne.n	800369a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	4b31      	ldr	r3, [pc, #196]	@ (80036dc <HAL_RCC_OscConfig+0x478>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7fe f82e 	bl	800167c <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe f82a 	bl	800167c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e087      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003636:	4b27      	ldr	r3, [pc, #156]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69da      	ldr	r2, [r3, #28]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	019b      	lsls	r3, r3, #6
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	085b      	lsrs	r3, r3, #1
 800365a:	3b01      	subs	r3, #1
 800365c:	041b      	lsls	r3, r3, #16
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003664:	061b      	lsls	r3, r3, #24
 8003666:	491b      	ldr	r1, [pc, #108]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366c:	4b1b      	ldr	r3, [pc, #108]	@ (80036dc <HAL_RCC_OscConfig+0x478>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7fe f803 	bl	800167c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7fd ffff 	bl	800167c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e05c      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368c:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x416>
 8003698:	e054      	b.n	8003744 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b10      	ldr	r3, [pc, #64]	@ (80036dc <HAL_RCC_OscConfig+0x478>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fd ffec 	bl	800167c <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fd ffe8 	bl	800167c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e045      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	4b06      	ldr	r3, [pc, #24]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x444>
 80036c6:	e03d      	b.n	8003744 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e038      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40007000 	.word	0x40007000
 80036dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003750 <HAL_RCC_OscConfig+0x4ec>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d028      	beq.n	8003740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d121      	bne.n	8003740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d11a      	bne.n	8003740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003710:	4013      	ands	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003716:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003718:	4293      	cmp	r3, r2
 800371a:	d111      	bne.n	8003740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003726:	085b      	lsrs	r3, r3, #1
 8003728:	3b01      	subs	r3, #1
 800372a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800372c:	429a      	cmp	r2, r3
 800372e:	d107      	bne.n	8003740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800

08003754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0cc      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003768:	4b68      	ldr	r3, [pc, #416]	@ (800390c <HAL_RCC_ClockConfig+0x1b8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d90c      	bls.n	8003790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b65      	ldr	r3, [pc, #404]	@ (800390c <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	4b63      	ldr	r3, [pc, #396]	@ (800390c <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0b8      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d020      	beq.n	80037de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037a8:	4b59      	ldr	r3, [pc, #356]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4a58      	ldr	r2, [pc, #352]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c0:	4b53      	ldr	r3, [pc, #332]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4a52      	ldr	r2, [pc, #328]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037cc:	4b50      	ldr	r3, [pc, #320]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	494d      	ldr	r1, [pc, #308]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d044      	beq.n	8003874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	4b47      	ldr	r3, [pc, #284]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d119      	bne.n	8003832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e07f      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d003      	beq.n	8003812 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800380e:	2b03      	cmp	r3, #3
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003812:	4b3f      	ldr	r3, [pc, #252]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e06f      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003822:	4b3b      	ldr	r3, [pc, #236]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e067      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003832:	4b37      	ldr	r3, [pc, #220]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 0203 	bic.w	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4934      	ldr	r1, [pc, #208]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003840:	4313      	orrs	r3, r2
 8003842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003844:	f7fd ff1a 	bl	800167c <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384a:	e00a      	b.n	8003862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384c:	f7fd ff16 	bl	800167c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e04f      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003862:	4b2b      	ldr	r3, [pc, #172]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 020c 	and.w	r2, r3, #12
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	429a      	cmp	r2, r3
 8003872:	d1eb      	bne.n	800384c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003874:	4b25      	ldr	r3, [pc, #148]	@ (800390c <HAL_RCC_ClockConfig+0x1b8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d20c      	bcs.n	800389c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b22      	ldr	r3, [pc, #136]	@ (800390c <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b20      	ldr	r3, [pc, #128]	@ (800390c <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e032      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a8:	4b19      	ldr	r3, [pc, #100]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4916      	ldr	r1, [pc, #88]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038c6:	4b12      	ldr	r3, [pc, #72]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	490e      	ldr	r1, [pc, #56]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038da:	f000 f821 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 80038de:	4602      	mov	r2, r0
 80038e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	490a      	ldr	r1, [pc, #40]	@ (8003914 <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	5ccb      	ldrb	r3, [r1, r3]
 80038ee:	fa22 f303 	lsr.w	r3, r2, r3
 80038f2:	4a09      	ldr	r2, [pc, #36]	@ (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038f6:	4b09      	ldr	r3, [pc, #36]	@ (800391c <HAL_RCC_ClockConfig+0x1c8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd fe7a 	bl	80015f4 <HAL_InitTick>

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40023c00 	.word	0x40023c00
 8003910:	40023800 	.word	0x40023800
 8003914:	0800a0e0 	.word	0x0800a0e0
 8003918:	20000000 	.word	0x20000000
 800391c:	20000004 	.word	0x20000004

08003920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003924:	b090      	sub	sp, #64	@ 0x40
 8003926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003938:	4b59      	ldr	r3, [pc, #356]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 030c 	and.w	r3, r3, #12
 8003940:	2b08      	cmp	r3, #8
 8003942:	d00d      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0x40>
 8003944:	2b08      	cmp	r3, #8
 8003946:	f200 80a1 	bhi.w	8003a8c <HAL_RCC_GetSysClockFreq+0x16c>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x34>
 800394e:	2b04      	cmp	r3, #4
 8003950:	d003      	beq.n	800395a <HAL_RCC_GetSysClockFreq+0x3a>
 8003952:	e09b      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003954:	4b53      	ldr	r3, [pc, #332]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003956:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003958:	e09b      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800395a:	4b53      	ldr	r3, [pc, #332]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800395c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800395e:	e098      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003960:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003968:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800396a:	4b4d      	ldr	r3, [pc, #308]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d028      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003976:	4b4a      	ldr	r3, [pc, #296]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	099b      	lsrs	r3, r3, #6
 800397c:	2200      	movs	r2, #0
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	627a      	str	r2, [r7, #36]	@ 0x24
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003988:	2100      	movs	r1, #0
 800398a:	4b47      	ldr	r3, [pc, #284]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800398c:	fb03 f201 	mul.w	r2, r3, r1
 8003990:	2300      	movs	r3, #0
 8003992:	fb00 f303 	mul.w	r3, r0, r3
 8003996:	4413      	add	r3, r2
 8003998:	4a43      	ldr	r2, [pc, #268]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800399a:	fba0 1202 	umull	r1, r2, r0, r2
 800399e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039a0:	460a      	mov	r2, r1
 80039a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80039a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039a6:	4413      	add	r3, r2
 80039a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ac:	2200      	movs	r2, #0
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	61fa      	str	r2, [r7, #28]
 80039b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80039ba:	f7fc fc61 	bl	8000280 <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4613      	mov	r3, r2
 80039c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039c6:	e053      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c8:	4b35      	ldr	r3, [pc, #212]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	099b      	lsrs	r3, r3, #6
 80039ce:	2200      	movs	r2, #0
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	617a      	str	r2, [r7, #20]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039da:	f04f 0b00 	mov.w	fp, #0
 80039de:	4652      	mov	r2, sl
 80039e0:	465b      	mov	r3, fp
 80039e2:	f04f 0000 	mov.w	r0, #0
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	0159      	lsls	r1, r3, #5
 80039ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039f0:	0150      	lsls	r0, r2, #5
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	ebb2 080a 	subs.w	r8, r2, sl
 80039fa:	eb63 090b 	sbc.w	r9, r3, fp
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a12:	ebb2 0408 	subs.w	r4, r2, r8
 8003a16:	eb63 0509 	sbc.w	r5, r3, r9
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	00eb      	lsls	r3, r5, #3
 8003a24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a28:	00e2      	lsls	r2, r4, #3
 8003a2a:	4614      	mov	r4, r2
 8003a2c:	461d      	mov	r5, r3
 8003a2e:	eb14 030a 	adds.w	r3, r4, sl
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	eb45 030b 	adc.w	r3, r5, fp
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a46:	4629      	mov	r1, r5
 8003a48:	028b      	lsls	r3, r1, #10
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a50:	4621      	mov	r1, r4
 8003a52:	028a      	lsls	r2, r1, #10
 8003a54:	4610      	mov	r0, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	60fa      	str	r2, [r7, #12]
 8003a60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a64:	f7fc fc0c 	bl	8000280 <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a70:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	0c1b      	lsrs	r3, r3, #16
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003a80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a8a:	e002      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a8c:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3740      	adds	r7, #64	@ 0x40
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	00f42400 	.word	0x00f42400
 8003aa8:	017d7840 	.word	0x017d7840

08003aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	@ (8003ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000000 	.word	0x20000000

08003ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ac8:	f7ff fff0 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	0a9b      	lsrs	r3, r3, #10
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	4903      	ldr	r1, [pc, #12]	@ (8003ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	0800a0f0 	.word	0x0800a0f0

08003aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003af0:	f7ff ffdc 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003af4:	4602      	mov	r2, r0
 8003af6:	4b05      	ldr	r3, [pc, #20]	@ (8003b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	0b5b      	lsrs	r3, r3, #13
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	4903      	ldr	r1, [pc, #12]	@ (8003b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b02:	5ccb      	ldrb	r3, [r1, r3]
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	0800a0f0 	.word	0x0800a0f0

08003b14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e07b      	b.n	8003c1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d108      	bne.n	8003b40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b36:	d009      	beq.n	8003b4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	61da      	str	r2, [r3, #28]
 8003b3e:	e005      	b.n	8003b4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fc ff8a 	bl	8000a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd0:	ea42 0103 	orr.w	r1, r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	f003 0104 	and.w	r1, r3, #4
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	f003 0210 	and.w	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b088      	sub	sp, #32
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	603b      	str	r3, [r7, #0]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c36:	f7fd fd21 	bl	800167c <HAL_GetTick>
 8003c3a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d001      	beq.n	8003c50 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e12a      	b.n	8003ea6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_SPI_Transmit+0x36>
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e122      	b.n	8003ea6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_SPI_Transmit+0x48>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e11b      	b.n	8003ea6 <HAL_SPI_Transmit+0x280>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2203      	movs	r2, #3
 8003c7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	88fa      	ldrh	r2, [r7, #6]
 8003c8e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cbc:	d10f      	bne.n	8003cde <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ccc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce8:	2b40      	cmp	r3, #64	@ 0x40
 8003cea:	d007      	beq.n	8003cfc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d04:	d152      	bne.n	8003dac <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_SPI_Transmit+0xee>
 8003d0e:	8b7b      	ldrh	r3, [r7, #26]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d145      	bne.n	8003da0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d18:	881a      	ldrh	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d24:	1c9a      	adds	r2, r3, #2
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d38:	e032      	b.n	8003da0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d112      	bne.n	8003d6e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4c:	881a      	ldrh	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d58:	1c9a      	adds	r2, r3, #2
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d6c:	e018      	b.n	8003da0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d6e:	f7fd fc85 	bl	800167c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d803      	bhi.n	8003d86 <HAL_SPI_Transmit+0x160>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d84:	d102      	bne.n	8003d8c <HAL_SPI_Transmit+0x166>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e082      	b.n	8003ea6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1c7      	bne.n	8003d3a <HAL_SPI_Transmit+0x114>
 8003daa:	e053      	b.n	8003e54 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_SPI_Transmit+0x194>
 8003db4:	8b7b      	ldrh	r3, [r7, #26]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d147      	bne.n	8003e4a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	330c      	adds	r3, #12
 8003dc4:	7812      	ldrb	r2, [r2, #0]
 8003dc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003de0:	e033      	b.n	8003e4a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d113      	bne.n	8003e18 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	7812      	ldrb	r2, [r2, #0]
 8003dfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e16:	e018      	b.n	8003e4a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e18:	f7fd fc30 	bl	800167c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d803      	bhi.n	8003e30 <HAL_SPI_Transmit+0x20a>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e2e:	d102      	bne.n	8003e36 <HAL_SPI_Transmit+0x210>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e02d      	b.n	8003ea6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1c6      	bne.n	8003de2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	6839      	ldr	r1, [r7, #0]
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fbd9 	bl	8004610 <SPI_EndRxTxTransaction>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3720      	adds	r7, #32
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b088      	sub	sp, #32
 8003eb2:	af02      	add	r7, sp, #8
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d001      	beq.n	8003ece <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e104      	b.n	80040d8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ed6:	d112      	bne.n	8003efe <HAL_SPI_Receive+0x50>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10e      	bne.n	8003efe <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ee8:	88fa      	ldrh	r2, [r7, #6]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f8f3 	bl	80040e0 <HAL_SPI_TransmitReceive>
 8003efa:	4603      	mov	r3, r0
 8003efc:	e0ec      	b.n	80040d8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003efe:	f7fd fbbd 	bl	800167c <HAL_GetTick>
 8003f02:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_SPI_Receive+0x62>
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0e1      	b.n	80040d8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_SPI_Receive+0x74>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e0da      	b.n	80040d8 <HAL_SPI_Receive+0x22a>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	88fa      	ldrh	r2, [r7, #6]
 8003f42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	88fa      	ldrh	r2, [r7, #6]
 8003f48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f70:	d10f      	bne.n	8003f92 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f90:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9c:	2b40      	cmp	r3, #64	@ 0x40
 8003f9e:	d007      	beq.n	8003fb0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d170      	bne.n	800409a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003fb8:	e035      	b.n	8004026 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d115      	bne.n	8003ff4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f103 020c 	add.w	r2, r3, #12
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd4:	7812      	ldrb	r2, [r2, #0]
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ff2:	e018      	b.n	8004026 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ff4:	f7fd fb42 	bl	800167c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d803      	bhi.n	800400c <HAL_SPI_Receive+0x15e>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800400a:	d102      	bne.n	8004012 <HAL_SPI_Receive+0x164>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e058      	b.n	80040d8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1c4      	bne.n	8003fba <HAL_SPI_Receive+0x10c>
 8004030:	e038      	b.n	80040a4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d113      	bne.n	8004068 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404a:	b292      	uxth	r2, r2
 800404c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004052:	1c9a      	adds	r2, r3, #2
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004066:	e018      	b.n	800409a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004068:	f7fd fb08 	bl	800167c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d803      	bhi.n	8004080 <HAL_SPI_Receive+0x1d2>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800407e:	d102      	bne.n	8004086 <HAL_SPI_Receive+0x1d8>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e01e      	b.n	80040d8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1c6      	bne.n	8004032 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fa4b 	bl	8004544 <SPI_EndRxTransaction>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80040d6:	2300      	movs	r3, #0
  }
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	@ 0x28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040ee:	2301      	movs	r3, #1
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040f2:	f7fd fac3 	bl	800167c <HAL_GetTick>
 80040f6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040fe:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004106:	887b      	ldrh	r3, [r7, #2]
 8004108:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800410a:	7ffb      	ldrb	r3, [r7, #31]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d00c      	beq.n	800412a <HAL_SPI_TransmitReceive+0x4a>
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004116:	d106      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d102      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x46>
 8004120:	7ffb      	ldrb	r3, [r7, #31]
 8004122:	2b04      	cmp	r3, #4
 8004124:	d001      	beq.n	800412a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004126:	2302      	movs	r3, #2
 8004128:	e17f      	b.n	800442a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_SPI_TransmitReceive+0x5c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_SPI_TransmitReceive+0x5c>
 8004136:	887b      	ldrh	r3, [r7, #2]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e174      	b.n	800442a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_SPI_TransmitReceive+0x6e>
 800414a:	2302      	movs	r3, #2
 800414c:	e16d      	b.n	800442a <HAL_SPI_TransmitReceive+0x34a>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b04      	cmp	r3, #4
 8004160:	d003      	beq.n	800416a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2205      	movs	r2, #5
 8004166:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	887a      	ldrh	r2, [r7, #2]
 800417a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	887a      	ldrh	r2, [r7, #2]
 8004180:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	887a      	ldrh	r2, [r7, #2]
 800418c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	887a      	ldrh	r2, [r7, #2]
 8004192:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041aa:	2b40      	cmp	r3, #64	@ 0x40
 80041ac:	d007      	beq.n	80041be <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041c6:	d17e      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_SPI_TransmitReceive+0xf6>
 80041d0:	8afb      	ldrh	r3, [r7, #22]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d16c      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041da:	881a      	ldrh	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e6:	1c9a      	adds	r2, r3, #2
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041fa:	e059      	b.n	80042b0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b02      	cmp	r3, #2
 8004208:	d11b      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x162>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d016      	beq.n	8004242 <HAL_SPI_TransmitReceive+0x162>
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	2b01      	cmp	r3, #1
 8004218:	d113      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	881a      	ldrh	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	1c9a      	adds	r2, r3, #2
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	d119      	bne.n	8004284 <HAL_SPI_TransmitReceive+0x1a4>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d014      	beq.n	8004284 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004264:	b292      	uxth	r2, r2
 8004266:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426c:	1c9a      	adds	r2, r3, #2
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004280:	2301      	movs	r3, #1
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004284:	f7fd f9fa 	bl	800167c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004290:	429a      	cmp	r2, r3
 8004292:	d80d      	bhi.n	80042b0 <HAL_SPI_TransmitReceive+0x1d0>
 8004294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800429a:	d009      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e0bc      	b.n	800442a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1a0      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x11c>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d19b      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x11c>
 80042c4:	e082      	b.n	80043cc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_SPI_TransmitReceive+0x1f4>
 80042ce:	8afb      	ldrh	r3, [r7, #22]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d171      	bne.n	80043b8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	7812      	ldrb	r2, [r2, #0]
 80042e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042fa:	e05d      	b.n	80043b8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b02      	cmp	r3, #2
 8004308:	d11c      	bne.n	8004344 <HAL_SPI_TransmitReceive+0x264>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d017      	beq.n	8004344 <HAL_SPI_TransmitReceive+0x264>
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	2b01      	cmp	r3, #1
 8004318:	d114      	bne.n	8004344 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	330c      	adds	r3, #12
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b01      	cmp	r3, #1
 8004350:	d119      	bne.n	8004386 <HAL_SPI_TransmitReceive+0x2a6>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d014      	beq.n	8004386 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004382:	2301      	movs	r3, #1
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004386:	f7fd f979 	bl	800167c <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004392:	429a      	cmp	r2, r3
 8004394:	d803      	bhi.n	800439e <HAL_SPI_TransmitReceive+0x2be>
 8004396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800439c:	d102      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x2c4>
 800439e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e038      	b.n	800442a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d19c      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x21c>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d197      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043cc:	6a3a      	ldr	r2, [r7, #32]
 80043ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f91d 	bl	8004610 <SPI_EndRxTxTransaction>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e01d      	b.n	800442a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043f6:	2300      	movs	r3, #0
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004428:	2300      	movs	r3, #0
  }
}
 800442a:	4618      	mov	r0, r3
 800442c:	3728      	adds	r7, #40	@ 0x28
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	4613      	mov	r3, r2
 8004442:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004444:	f7fd f91a 	bl	800167c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	4413      	add	r3, r2
 8004452:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004454:	f7fd f912 	bl	800167c <HAL_GetTick>
 8004458:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800445a:	4b39      	ldr	r3, [pc, #228]	@ (8004540 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	015b      	lsls	r3, r3, #5
 8004460:	0d1b      	lsrs	r3, r3, #20
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	fb02 f303 	mul.w	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800446a:	e054      	b.n	8004516 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004472:	d050      	beq.n	8004516 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004474:	f7fd f902 	bl	800167c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	429a      	cmp	r2, r3
 8004482:	d902      	bls.n	800448a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d13d      	bne.n	8004506 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004498:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044a2:	d111      	bne.n	80044c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044ac:	d004      	beq.n	80044b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b6:	d107      	bne.n	80044c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044d0:	d10f      	bne.n	80044f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e017      	b.n	8004536 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	3b01      	subs	r3, #1
 8004514:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4013      	ands	r3, r2
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	429a      	cmp	r2, r3
 8004524:	bf0c      	ite	eq
 8004526:	2301      	moveq	r3, #1
 8004528:	2300      	movne	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	429a      	cmp	r2, r3
 8004532:	d19b      	bne.n	800446c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000000 	.word	0x20000000

08004544 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004558:	d111      	bne.n	800457e <SPI_EndRxTransaction+0x3a>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004562:	d004      	beq.n	800456e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800456c:	d107      	bne.n	800457e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800457c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004586:	d12a      	bne.n	80045de <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004590:	d012      	beq.n	80045b8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2200      	movs	r2, #0
 800459a:	2180      	movs	r1, #128	@ 0x80
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f7ff ff49 	bl	8004434 <SPI_WaitFlagStateUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d02d      	beq.n	8004604 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e026      	b.n	8004606 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2200      	movs	r2, #0
 80045c0:	2101      	movs	r1, #1
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7ff ff36 	bl	8004434 <SPI_WaitFlagStateUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d01a      	beq.n	8004604 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d2:	f043 0220 	orr.w	r2, r3, #32
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e013      	b.n	8004606 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2200      	movs	r2, #0
 80045e6:	2101      	movs	r1, #1
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff ff23 	bl	8004434 <SPI_WaitFlagStateUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f8:	f043 0220 	orr.w	r2, r3, #32
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e000      	b.n	8004606 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af02      	add	r7, sp, #8
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2201      	movs	r2, #1
 8004624:	2102      	movs	r1, #2
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff ff04 	bl	8004434 <SPI_WaitFlagStateUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004636:	f043 0220 	orr.w	r2, r3, #32
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e032      	b.n	80046a8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004642:	4b1b      	ldr	r3, [pc, #108]	@ (80046b0 <SPI_EndRxTxTransaction+0xa0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1b      	ldr	r2, [pc, #108]	@ (80046b4 <SPI_EndRxTxTransaction+0xa4>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	0d5b      	lsrs	r3, r3, #21
 800464e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004652:	fb02 f303 	mul.w	r3, r2, r3
 8004656:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004660:	d112      	bne.n	8004688 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2200      	movs	r2, #0
 800466a:	2180      	movs	r1, #128	@ 0x80
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7ff fee1 	bl	8004434 <SPI_WaitFlagStateUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d016      	beq.n	80046a6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e00f      	b.n	80046a8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	3b01      	subs	r3, #1
 8004692:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469e:	2b80      	cmp	r3, #128	@ 0x80
 80046a0:	d0f2      	beq.n	8004688 <SPI_EndRxTxTransaction+0x78>
 80046a2:	e000      	b.n	80046a6 <SPI_EndRxTxTransaction+0x96>
        break;
 80046a4:	bf00      	nop
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000000 	.word	0x20000000
 80046b4:	165e9f81 	.word	0x165e9f81

080046b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e042      	b.n	8004750 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fc fa16 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2224      	movs	r2, #36	@ 0x24
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fce5 	bl	80050cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004710:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695a      	ldr	r2, [r3, #20]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004720:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004730:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b20      	cmp	r3, #32
 8004770:	d112      	bne.n	8004798 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_UART_Receive_IT+0x26>
 8004778:	88fb      	ldrh	r3, [r7, #6]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e00b      	b.n	800479a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004788:	88fb      	ldrh	r3, [r7, #6]
 800478a:	461a      	mov	r2, r3
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fac4 	bl	8004d1c <UART_Start_Receive_IT>
 8004794:	4603      	mov	r3, r0
 8004796:	e000      	b.n	800479a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b0ba      	sub	sp, #232	@ 0xe8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80047e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10f      	bne.n	800480a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <HAL_UART_IRQHandler+0x66>
 80047f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fba3 	bl	8004f4e <UART_Receive_IT>
      return;
 8004808:	e25b      	b.n	8004cc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800480a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80de 	beq.w	80049d0 <HAL_UART_IRQHandler+0x22c>
 8004814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004824:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80d1 	beq.w	80049d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800482e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_UART_IRQHandler+0xae>
 800483a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800483e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484a:	f043 0201 	orr.w	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00b      	beq.n	8004876 <HAL_UART_IRQHandler+0xd2>
 800485e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d005      	beq.n	8004876 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	f043 0202 	orr.w	r2, r3, #2
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_UART_IRQHandler+0xf6>
 8004882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004892:	f043 0204 	orr.w	r2, r3, #4
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d011      	beq.n	80048ca <HAL_UART_IRQHandler+0x126>
 80048a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d105      	bne.n	80048be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c2:	f043 0208 	orr.w	r2, r3, #8
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 81f2 	beq.w	8004cb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_UART_IRQHandler+0x14e>
 80048e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fb2e 	bl	8004f4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fc:	2b40      	cmp	r3, #64	@ 0x40
 80048fe:	bf0c      	ite	eq
 8004900:	2301      	moveq	r3, #1
 8004902:	2300      	movne	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <HAL_UART_IRQHandler+0x17a>
 8004916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d04f      	beq.n	80049be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa36 	bl	8004d90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492e:	2b40      	cmp	r3, #64	@ 0x40
 8004930:	d141      	bne.n	80049b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3314      	adds	r3, #20
 8004938:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004948:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800494c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004950:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3314      	adds	r3, #20
 800495a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800495e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800496a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1d9      	bne.n	8004932 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d013      	beq.n	80049ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b84 <HAL_UART_IRQHandler+0x3e0>)
 800498c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004992:	4618      	mov	r0, r3
 8004994:	f7fd f823 	bl	80019de <HAL_DMA_Abort_IT>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d016      	beq.n	80049cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049a8:	4610      	mov	r0, r2
 80049aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ac:	e00e      	b.n	80049cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f99e 	bl	8004cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	e00a      	b.n	80049cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f99a 	bl	8004cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049bc:	e006      	b.n	80049cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f996 	bl	8004cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80049ca:	e175      	b.n	8004cb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049cc:	bf00      	nop
    return;
 80049ce:	e173      	b.n	8004cb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	f040 814f 	bne.w	8004c78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049de:	f003 0310 	and.w	r3, r3, #16
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8148 	beq.w	8004c78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8141 	beq.w	8004c78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049f6:	2300      	movs	r3, #0
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a16:	2b40      	cmp	r3, #64	@ 0x40
 8004a18:	f040 80b6 	bne.w	8004b88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8145 	beq.w	8004cbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	f080 813e 	bcs.w	8004cbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a46:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a52:	f000 8088 	beq.w	8004b66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	330c      	adds	r3, #12
 8004a5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004a82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1d9      	bne.n	8004a56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3314      	adds	r3, #20
 8004aa8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3314      	adds	r3, #20
 8004ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ac6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004aca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ace:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e1      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3314      	adds	r3, #20
 8004ae4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004af4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e3      	bne.n	8004ade <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	330c      	adds	r3, #12
 8004b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b36:	f023 0310 	bic.w	r3, r3, #16
 8004b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b48:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b4a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e3      	bne.n	8004b24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fc fecc 	bl	80018fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f8c1 	bl	8004d04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b82:	e09b      	b.n	8004cbc <HAL_UART_IRQHandler+0x518>
 8004b84:	08004e57 	.word	0x08004e57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 808e 	beq.w	8004cc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8089 	beq.w	8004cc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	330c      	adds	r3, #12
 8004bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	330c      	adds	r3, #12
 8004bce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004bd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004bd4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e3      	bne.n	8004bae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3314      	adds	r3, #20
 8004bec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	f023 0301 	bic.w	r3, r3, #1
 8004bfc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3314      	adds	r3, #20
 8004c06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e3      	bne.n	8004be6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	330c      	adds	r3, #12
 8004c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0310 	bic.w	r3, r3, #16
 8004c42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004c50:	61fa      	str	r2, [r7, #28]
 8004c52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	69b9      	ldr	r1, [r7, #24]
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e3      	bne.n	8004c2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f847 	bl	8004d04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c76:	e023      	b.n	8004cc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d009      	beq.n	8004c98 <HAL_UART_IRQHandler+0x4f4>
 8004c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f8f4 	bl	8004e7e <UART_Transmit_IT>
    return;
 8004c96:	e014      	b.n	8004cc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x51e>
 8004ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f934 	bl	8004f1e <UART_EndTransmit_IT>
    return;
 8004cb6:	e004      	b.n	8004cc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004cb8:	bf00      	nop
 8004cba:	e002      	b.n	8004cc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004cbc:	bf00      	nop
 8004cbe:	e000      	b.n	8004cc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004cc0:	bf00      	nop
  }
}
 8004cc2:	37e8      	adds	r7, #232	@ 0xe8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	4613      	mov	r3, r2
 8004d28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	88fa      	ldrh	r2, [r7, #6]
 8004d34:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	88fa      	ldrh	r2, [r7, #6]
 8004d3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2222      	movs	r2, #34	@ 0x22
 8004d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d60:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695a      	ldr	r2, [r3, #20]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0220 	orr.w	r2, r2, #32
 8004d80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b095      	sub	sp, #84	@ 0x54
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	330c      	adds	r3, #12
 8004db6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004db8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e5      	bne.n	8004d98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3314      	adds	r3, #20
 8004dea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e5      	bne.n	8004dcc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d119      	bne.n	8004e3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f023 0310 	bic.w	r3, r3, #16
 8004e1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e28:	61ba      	str	r2, [r7, #24]
 8004e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	6979      	ldr	r1, [r7, #20]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	e841 2300 	strex	r3, r2, [r1]
 8004e34:	613b      	str	r3, [r7, #16]
   return(result);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e5      	bne.n	8004e08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e4a:	bf00      	nop
 8004e4c:	3754      	adds	r7, #84	@ 0x54
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f7ff ff3d 	bl	8004cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b085      	sub	sp, #20
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b21      	cmp	r3, #33	@ 0x21
 8004e90:	d13e      	bne.n	8004f10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e9a:	d114      	bne.n	8004ec6 <UART_Transmit_IT+0x48>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d110      	bne.n	8004ec6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	1c9a      	adds	r2, r3, #2
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	621a      	str	r2, [r3, #32]
 8004ec4:	e008      	b.n	8004ed8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	1c59      	adds	r1, r3, #1
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6211      	str	r1, [r2, #32]
 8004ed0:	781a      	ldrb	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10f      	bne.n	8004f0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004efa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e000      	b.n	8004f12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f10:	2302      	movs	r3, #2
  }
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b082      	sub	sp, #8
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff fec2 	bl	8004cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b08c      	sub	sp, #48	@ 0x30
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b22      	cmp	r3, #34	@ 0x22
 8004f60:	f040 80ae 	bne.w	80050c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f6c:	d117      	bne.n	8004f9e <UART_Receive_IT+0x50>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d113      	bne.n	8004f9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f96:	1c9a      	adds	r2, r3, #2
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f9c:	e026      	b.n	8004fec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fb0:	d007      	beq.n	8004fc2 <UART_Receive_IT+0x74>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <UART_Receive_IT+0x82>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	e008      	b.n	8004fe2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d15d      	bne.n	80050bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0220 	bic.w	r2, r2, #32
 800500e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800501e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695a      	ldr	r2, [r3, #20]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0201 	bic.w	r2, r2, #1
 800502e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005042:	2b01      	cmp	r3, #1
 8005044:	d135      	bne.n	80050b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	330c      	adds	r3, #12
 8005052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	613b      	str	r3, [r7, #16]
   return(result);
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f023 0310 	bic.w	r3, r3, #16
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	330c      	adds	r3, #12
 800506a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506c:	623a      	str	r2, [r7, #32]
 800506e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005070:	69f9      	ldr	r1, [r7, #28]
 8005072:	6a3a      	ldr	r2, [r7, #32]
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	61bb      	str	r3, [r7, #24]
   return(result);
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e5      	bne.n	800504c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b10      	cmp	r3, #16
 800508c:	d10a      	bne.n	80050a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050a8:	4619      	mov	r1, r3
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff fe2a 	bl	8004d04 <HAL_UARTEx_RxEventCallback>
 80050b0:	e002      	b.n	80050b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff fe12 	bl	8004cdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e002      	b.n	80050c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	e000      	b.n	80050c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3730      	adds	r7, #48	@ 0x30
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d0:	b0c0      	sub	sp, #256	@ 0x100
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e8:	68d9      	ldr	r1, [r3, #12]
 80050ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	ea40 0301 	orr.w	r3, r0, r1
 80050f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	431a      	orrs	r2, r3
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	431a      	orrs	r2, r3
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005124:	f021 010c 	bic.w	r1, r1, #12
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005132:	430b      	orrs	r3, r1
 8005134:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005146:	6999      	ldr	r1, [r3, #24]
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	ea40 0301 	orr.w	r3, r0, r1
 8005152:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4b8f      	ldr	r3, [pc, #572]	@ (8005398 <UART_SetConfig+0x2cc>)
 800515c:	429a      	cmp	r2, r3
 800515e:	d005      	beq.n	800516c <UART_SetConfig+0xa0>
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b8d      	ldr	r3, [pc, #564]	@ (800539c <UART_SetConfig+0x2d0>)
 8005168:	429a      	cmp	r2, r3
 800516a:	d104      	bne.n	8005176 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800516c:	f7fe fcbe 	bl	8003aec <HAL_RCC_GetPCLK2Freq>
 8005170:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005174:	e003      	b.n	800517e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005176:	f7fe fca5 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 800517a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800517e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005188:	f040 810c 	bne.w	80053a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800518c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005190:	2200      	movs	r2, #0
 8005192:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005196:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800519a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800519e:	4622      	mov	r2, r4
 80051a0:	462b      	mov	r3, r5
 80051a2:	1891      	adds	r1, r2, r2
 80051a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80051a6:	415b      	adcs	r3, r3
 80051a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051ae:	4621      	mov	r1, r4
 80051b0:	eb12 0801 	adds.w	r8, r2, r1
 80051b4:	4629      	mov	r1, r5
 80051b6:	eb43 0901 	adc.w	r9, r3, r1
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051ce:	4690      	mov	r8, r2
 80051d0:	4699      	mov	r9, r3
 80051d2:	4623      	mov	r3, r4
 80051d4:	eb18 0303 	adds.w	r3, r8, r3
 80051d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051dc:	462b      	mov	r3, r5
 80051de:	eb49 0303 	adc.w	r3, r9, r3
 80051e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80051f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051fa:	460b      	mov	r3, r1
 80051fc:	18db      	adds	r3, r3, r3
 80051fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005200:	4613      	mov	r3, r2
 8005202:	eb42 0303 	adc.w	r3, r2, r3
 8005206:	657b      	str	r3, [r7, #84]	@ 0x54
 8005208:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800520c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005210:	f7fb f836 	bl	8000280 <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4b61      	ldr	r3, [pc, #388]	@ (80053a0 <UART_SetConfig+0x2d4>)
 800521a:	fba3 2302 	umull	r2, r3, r3, r2
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	011c      	lsls	r4, r3, #4
 8005222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005226:	2200      	movs	r2, #0
 8005228:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800522c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005230:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005234:	4642      	mov	r2, r8
 8005236:	464b      	mov	r3, r9
 8005238:	1891      	adds	r1, r2, r2
 800523a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800523c:	415b      	adcs	r3, r3
 800523e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005240:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005244:	4641      	mov	r1, r8
 8005246:	eb12 0a01 	adds.w	sl, r2, r1
 800524a:	4649      	mov	r1, r9
 800524c:	eb43 0b01 	adc.w	fp, r3, r1
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800525c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005260:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005264:	4692      	mov	sl, r2
 8005266:	469b      	mov	fp, r3
 8005268:	4643      	mov	r3, r8
 800526a:	eb1a 0303 	adds.w	r3, sl, r3
 800526e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005272:	464b      	mov	r3, r9
 8005274:	eb4b 0303 	adc.w	r3, fp, r3
 8005278:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005288:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800528c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005290:	460b      	mov	r3, r1
 8005292:	18db      	adds	r3, r3, r3
 8005294:	643b      	str	r3, [r7, #64]	@ 0x40
 8005296:	4613      	mov	r3, r2
 8005298:	eb42 0303 	adc.w	r3, r2, r3
 800529c:	647b      	str	r3, [r7, #68]	@ 0x44
 800529e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80052a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80052a6:	f7fa ffeb 	bl	8000280 <__aeabi_uldivmod>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4611      	mov	r1, r2
 80052b0:	4b3b      	ldr	r3, [pc, #236]	@ (80053a0 <UART_SetConfig+0x2d4>)
 80052b2:	fba3 2301 	umull	r2, r3, r3, r1
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	2264      	movs	r2, #100	@ 0x64
 80052ba:	fb02 f303 	mul.w	r3, r2, r3
 80052be:	1acb      	subs	r3, r1, r3
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80052c6:	4b36      	ldr	r3, [pc, #216]	@ (80053a0 <UART_SetConfig+0x2d4>)
 80052c8:	fba3 2302 	umull	r2, r3, r3, r2
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052d4:	441c      	add	r4, r3
 80052d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80052e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80052e8:	4642      	mov	r2, r8
 80052ea:	464b      	mov	r3, r9
 80052ec:	1891      	adds	r1, r2, r2
 80052ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052f0:	415b      	adcs	r3, r3
 80052f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80052f8:	4641      	mov	r1, r8
 80052fa:	1851      	adds	r1, r2, r1
 80052fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80052fe:	4649      	mov	r1, r9
 8005300:	414b      	adcs	r3, r1
 8005302:	637b      	str	r3, [r7, #52]	@ 0x34
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005310:	4659      	mov	r1, fp
 8005312:	00cb      	lsls	r3, r1, #3
 8005314:	4651      	mov	r1, sl
 8005316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800531a:	4651      	mov	r1, sl
 800531c:	00ca      	lsls	r2, r1, #3
 800531e:	4610      	mov	r0, r2
 8005320:	4619      	mov	r1, r3
 8005322:	4603      	mov	r3, r0
 8005324:	4642      	mov	r2, r8
 8005326:	189b      	adds	r3, r3, r2
 8005328:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800532c:	464b      	mov	r3, r9
 800532e:	460a      	mov	r2, r1
 8005330:	eb42 0303 	adc.w	r3, r2, r3
 8005334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005344:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005348:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800534c:	460b      	mov	r3, r1
 800534e:	18db      	adds	r3, r3, r3
 8005350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005352:	4613      	mov	r3, r2
 8005354:	eb42 0303 	adc.w	r3, r2, r3
 8005358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800535a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800535e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005362:	f7fa ff8d 	bl	8000280 <__aeabi_uldivmod>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4b0d      	ldr	r3, [pc, #52]	@ (80053a0 <UART_SetConfig+0x2d4>)
 800536c:	fba3 1302 	umull	r1, r3, r3, r2
 8005370:	095b      	lsrs	r3, r3, #5
 8005372:	2164      	movs	r1, #100	@ 0x64
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	3332      	adds	r3, #50	@ 0x32
 800537e:	4a08      	ldr	r2, [pc, #32]	@ (80053a0 <UART_SetConfig+0x2d4>)
 8005380:	fba2 2303 	umull	r2, r3, r2, r3
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	f003 0207 	and.w	r2, r3, #7
 800538a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4422      	add	r2, r4
 8005392:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005394:	e106      	b.n	80055a4 <UART_SetConfig+0x4d8>
 8005396:	bf00      	nop
 8005398:	40011000 	.word	0x40011000
 800539c:	40011400 	.word	0x40011400
 80053a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80053b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80053b6:	4642      	mov	r2, r8
 80053b8:	464b      	mov	r3, r9
 80053ba:	1891      	adds	r1, r2, r2
 80053bc:	6239      	str	r1, [r7, #32]
 80053be:	415b      	adcs	r3, r3
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053c6:	4641      	mov	r1, r8
 80053c8:	1854      	adds	r4, r2, r1
 80053ca:	4649      	mov	r1, r9
 80053cc:	eb43 0501 	adc.w	r5, r3, r1
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	00eb      	lsls	r3, r5, #3
 80053da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053de:	00e2      	lsls	r2, r4, #3
 80053e0:	4614      	mov	r4, r2
 80053e2:	461d      	mov	r5, r3
 80053e4:	4643      	mov	r3, r8
 80053e6:	18e3      	adds	r3, r4, r3
 80053e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053ec:	464b      	mov	r3, r9
 80053ee:	eb45 0303 	adc.w	r3, r5, r3
 80053f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005402:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005412:	4629      	mov	r1, r5
 8005414:	008b      	lsls	r3, r1, #2
 8005416:	4621      	mov	r1, r4
 8005418:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800541c:	4621      	mov	r1, r4
 800541e:	008a      	lsls	r2, r1, #2
 8005420:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005424:	f7fa ff2c 	bl	8000280 <__aeabi_uldivmod>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4b60      	ldr	r3, [pc, #384]	@ (80055b0 <UART_SetConfig+0x4e4>)
 800542e:	fba3 2302 	umull	r2, r3, r3, r2
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	011c      	lsls	r4, r3, #4
 8005436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800543a:	2200      	movs	r2, #0
 800543c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005440:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005444:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005448:	4642      	mov	r2, r8
 800544a:	464b      	mov	r3, r9
 800544c:	1891      	adds	r1, r2, r2
 800544e:	61b9      	str	r1, [r7, #24]
 8005450:	415b      	adcs	r3, r3
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005458:	4641      	mov	r1, r8
 800545a:	1851      	adds	r1, r2, r1
 800545c:	6139      	str	r1, [r7, #16]
 800545e:	4649      	mov	r1, r9
 8005460:	414b      	adcs	r3, r1
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005470:	4659      	mov	r1, fp
 8005472:	00cb      	lsls	r3, r1, #3
 8005474:	4651      	mov	r1, sl
 8005476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800547a:	4651      	mov	r1, sl
 800547c:	00ca      	lsls	r2, r1, #3
 800547e:	4610      	mov	r0, r2
 8005480:	4619      	mov	r1, r3
 8005482:	4603      	mov	r3, r0
 8005484:	4642      	mov	r2, r8
 8005486:	189b      	adds	r3, r3, r2
 8005488:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800548c:	464b      	mov	r3, r9
 800548e:	460a      	mov	r2, r1
 8005490:	eb42 0303 	adc.w	r3, r2, r3
 8005494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80054b0:	4649      	mov	r1, r9
 80054b2:	008b      	lsls	r3, r1, #2
 80054b4:	4641      	mov	r1, r8
 80054b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054ba:	4641      	mov	r1, r8
 80054bc:	008a      	lsls	r2, r1, #2
 80054be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80054c2:	f7fa fedd 	bl	8000280 <__aeabi_uldivmod>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4611      	mov	r1, r2
 80054cc:	4b38      	ldr	r3, [pc, #224]	@ (80055b0 <UART_SetConfig+0x4e4>)
 80054ce:	fba3 2301 	umull	r2, r3, r3, r1
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	2264      	movs	r2, #100	@ 0x64
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	1acb      	subs	r3, r1, r3
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	3332      	adds	r3, #50	@ 0x32
 80054e0:	4a33      	ldr	r2, [pc, #204]	@ (80055b0 <UART_SetConfig+0x4e4>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054ec:	441c      	add	r4, r3
 80054ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054f2:	2200      	movs	r2, #0
 80054f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80054f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80054f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80054fc:	4642      	mov	r2, r8
 80054fe:	464b      	mov	r3, r9
 8005500:	1891      	adds	r1, r2, r2
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	415b      	adcs	r3, r3
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800550c:	4641      	mov	r1, r8
 800550e:	1851      	adds	r1, r2, r1
 8005510:	6039      	str	r1, [r7, #0]
 8005512:	4649      	mov	r1, r9
 8005514:	414b      	adcs	r3, r1
 8005516:	607b      	str	r3, [r7, #4]
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005524:	4659      	mov	r1, fp
 8005526:	00cb      	lsls	r3, r1, #3
 8005528:	4651      	mov	r1, sl
 800552a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800552e:	4651      	mov	r1, sl
 8005530:	00ca      	lsls	r2, r1, #3
 8005532:	4610      	mov	r0, r2
 8005534:	4619      	mov	r1, r3
 8005536:	4603      	mov	r3, r0
 8005538:	4642      	mov	r2, r8
 800553a:	189b      	adds	r3, r3, r2
 800553c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800553e:	464b      	mov	r3, r9
 8005540:	460a      	mov	r2, r1
 8005542:	eb42 0303 	adc.w	r3, r2, r3
 8005546:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	663b      	str	r3, [r7, #96]	@ 0x60
 8005552:	667a      	str	r2, [r7, #100]	@ 0x64
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005560:	4649      	mov	r1, r9
 8005562:	008b      	lsls	r3, r1, #2
 8005564:	4641      	mov	r1, r8
 8005566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800556a:	4641      	mov	r1, r8
 800556c:	008a      	lsls	r2, r1, #2
 800556e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005572:	f7fa fe85 	bl	8000280 <__aeabi_uldivmod>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4b0d      	ldr	r3, [pc, #52]	@ (80055b0 <UART_SetConfig+0x4e4>)
 800557c:	fba3 1302 	umull	r1, r3, r3, r2
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	2164      	movs	r1, #100	@ 0x64
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	3332      	adds	r3, #50	@ 0x32
 800558e:	4a08      	ldr	r2, [pc, #32]	@ (80055b0 <UART_SetConfig+0x4e4>)
 8005590:	fba2 2303 	umull	r2, r3, r2, r3
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	f003 020f 	and.w	r2, r3, #15
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4422      	add	r2, r4
 80055a2:	609a      	str	r2, [r3, #8]
}
 80055a4:	bf00      	nop
 80055a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80055aa:	46bd      	mov	sp, r7
 80055ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055b0:	51eb851f 	.word	0x51eb851f

080055b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055b4:	b084      	sub	sp, #16
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	f107 001c 	add.w	r0, r7, #28
 80055c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d123      	bne.n	8005616 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80055e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d105      	bne.n	800560a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f001 fae8 	bl	8006be0 <USB_CoreReset>
 8005610:	4603      	mov	r3, r0
 8005612:	73fb      	strb	r3, [r7, #15]
 8005614:	e01b      	b.n	800564e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f001 fadc 	bl	8006be0 <USB_CoreReset>
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800562c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005630:	2b00      	cmp	r3, #0
 8005632:	d106      	bne.n	8005642 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005638:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005640:	e005      	b.n	800564e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005646:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800564e:	7fbb      	ldrb	r3, [r7, #30]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d10b      	bne.n	800566c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f043 0206 	orr.w	r2, r3, #6
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f043 0220 	orr.w	r2, r3, #32
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005678:	b004      	add	sp, #16
 800567a:	4770      	bx	lr

0800567c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	4613      	mov	r3, r2
 8005688:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	2b02      	cmp	r3, #2
 800568e:	d165      	bne.n	800575c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4a41      	ldr	r2, [pc, #260]	@ (8005798 <USB_SetTurnaroundTime+0x11c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d906      	bls.n	80056a6 <USB_SetTurnaroundTime+0x2a>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4a40      	ldr	r2, [pc, #256]	@ (800579c <USB_SetTurnaroundTime+0x120>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d202      	bcs.n	80056a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056a0:	230f      	movs	r3, #15
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	e062      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4a3c      	ldr	r2, [pc, #240]	@ (800579c <USB_SetTurnaroundTime+0x120>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d306      	bcc.n	80056bc <USB_SetTurnaroundTime+0x40>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	4a3b      	ldr	r2, [pc, #236]	@ (80057a0 <USB_SetTurnaroundTime+0x124>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d202      	bcs.n	80056bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056b6:	230e      	movs	r3, #14
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	e057      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4a38      	ldr	r2, [pc, #224]	@ (80057a0 <USB_SetTurnaroundTime+0x124>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d306      	bcc.n	80056d2 <USB_SetTurnaroundTime+0x56>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4a37      	ldr	r2, [pc, #220]	@ (80057a4 <USB_SetTurnaroundTime+0x128>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d202      	bcs.n	80056d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056cc:	230d      	movs	r3, #13
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	e04c      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4a33      	ldr	r2, [pc, #204]	@ (80057a4 <USB_SetTurnaroundTime+0x128>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d306      	bcc.n	80056e8 <USB_SetTurnaroundTime+0x6c>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4a32      	ldr	r2, [pc, #200]	@ (80057a8 <USB_SetTurnaroundTime+0x12c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d802      	bhi.n	80056e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056e2:	230c      	movs	r3, #12
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e041      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4a2f      	ldr	r2, [pc, #188]	@ (80057a8 <USB_SetTurnaroundTime+0x12c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d906      	bls.n	80056fe <USB_SetTurnaroundTime+0x82>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4a2e      	ldr	r2, [pc, #184]	@ (80057ac <USB_SetTurnaroundTime+0x130>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d802      	bhi.n	80056fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80056f8:	230b      	movs	r3, #11
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	e036      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4a2a      	ldr	r2, [pc, #168]	@ (80057ac <USB_SetTurnaroundTime+0x130>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d906      	bls.n	8005714 <USB_SetTurnaroundTime+0x98>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4a29      	ldr	r2, [pc, #164]	@ (80057b0 <USB_SetTurnaroundTime+0x134>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d802      	bhi.n	8005714 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800570e:	230a      	movs	r3, #10
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	e02b      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4a26      	ldr	r2, [pc, #152]	@ (80057b0 <USB_SetTurnaroundTime+0x134>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d906      	bls.n	800572a <USB_SetTurnaroundTime+0xae>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4a25      	ldr	r2, [pc, #148]	@ (80057b4 <USB_SetTurnaroundTime+0x138>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d202      	bcs.n	800572a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005724:	2309      	movs	r3, #9
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e020      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4a21      	ldr	r2, [pc, #132]	@ (80057b4 <USB_SetTurnaroundTime+0x138>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d306      	bcc.n	8005740 <USB_SetTurnaroundTime+0xc4>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4a20      	ldr	r2, [pc, #128]	@ (80057b8 <USB_SetTurnaroundTime+0x13c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d802      	bhi.n	8005740 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800573a:	2308      	movs	r3, #8
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	e015      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4a1d      	ldr	r2, [pc, #116]	@ (80057b8 <USB_SetTurnaroundTime+0x13c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d906      	bls.n	8005756 <USB_SetTurnaroundTime+0xda>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4a1c      	ldr	r2, [pc, #112]	@ (80057bc <USB_SetTurnaroundTime+0x140>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d202      	bcs.n	8005756 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005750:	2307      	movs	r3, #7
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	e00a      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005756:	2306      	movs	r3, #6
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e007      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005762:	2309      	movs	r3, #9
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	e001      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005768:	2309      	movs	r3, #9
 800576a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	029b      	lsls	r3, r3, #10
 8005780:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005784:	431a      	orrs	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	00d8acbf 	.word	0x00d8acbf
 800579c:	00e4e1c0 	.word	0x00e4e1c0
 80057a0:	00f42400 	.word	0x00f42400
 80057a4:	01067380 	.word	0x01067380
 80057a8:	011a499f 	.word	0x011a499f
 80057ac:	01312cff 	.word	0x01312cff
 80057b0:	014ca43f 	.word	0x014ca43f
 80057b4:	016e3600 	.word	0x016e3600
 80057b8:	01a6ab1f 	.word	0x01a6ab1f
 80057bc:	01e84800 	.word	0x01e84800

080057c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f043 0201 	orr.w	r2, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f023 0201 	bic.w	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d115      	bne.n	8005852 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005832:	200a      	movs	r0, #10
 8005834:	f7fb ff2e 	bl	8001694 <HAL_Delay>
      ms += 10U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	330a      	adds	r3, #10
 800583c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 f93f 	bl	8006ac2 <USB_GetMode>
 8005844:	4603      	mov	r3, r0
 8005846:	2b01      	cmp	r3, #1
 8005848:	d01e      	beq.n	8005888 <USB_SetCurrentMode+0x84>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2bc7      	cmp	r3, #199	@ 0xc7
 800584e:	d9f0      	bls.n	8005832 <USB_SetCurrentMode+0x2e>
 8005850:	e01a      	b.n	8005888 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d115      	bne.n	8005884 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005864:	200a      	movs	r0, #10
 8005866:	f7fb ff15 	bl	8001694 <HAL_Delay>
      ms += 10U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	330a      	adds	r3, #10
 800586e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 f926 	bl	8006ac2 <USB_GetMode>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <USB_SetCurrentMode+0x84>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005880:	d9f0      	bls.n	8005864 <USB_SetCurrentMode+0x60>
 8005882:	e001      	b.n	8005888 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e005      	b.n	8005894 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2bc8      	cmp	r3, #200	@ 0xc8
 800588c:	d101      	bne.n	8005892 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800589c:	b084      	sub	sp, #16
 800589e:	b580      	push	{r7, lr}
 80058a0:	b086      	sub	sp, #24
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80058aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	e009      	b.n	80058d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	3340      	adds	r3, #64	@ 0x40
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	2200      	movs	r2, #0
 80058c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	3301      	adds	r3, #1
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b0e      	cmp	r3, #14
 80058d4:	d9f2      	bls.n	80058bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d11c      	bne.n	8005918 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058ec:	f043 0302 	orr.w	r3, r3, #2
 80058f0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005902:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	639a      	str	r2, [r3, #56]	@ 0x38
 8005916:	e00b      	b.n	8005930 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005928:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005936:	461a      	mov	r2, r3
 8005938:	2300      	movs	r3, #0
 800593a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800593c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005940:	2b01      	cmp	r3, #1
 8005942:	d10d      	bne.n	8005960 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005948:	2b00      	cmp	r3, #0
 800594a:	d104      	bne.n	8005956 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800594c:	2100      	movs	r1, #0
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f968 	bl	8005c24 <USB_SetDevSpeed>
 8005954:	e008      	b.n	8005968 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005956:	2101      	movs	r1, #1
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f963 	bl	8005c24 <USB_SetDevSpeed>
 800595e:	e003      	b.n	8005968 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005960:	2103      	movs	r1, #3
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f95e 	bl	8005c24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005968:	2110      	movs	r1, #16
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8fa 	bl	8005b64 <USB_FlushTxFifo>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f924 	bl	8005bc8 <USB_FlushRxFifo>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005990:	461a      	mov	r2, r3
 8005992:	2300      	movs	r3, #0
 8005994:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599c:	461a      	mov	r2, r3
 800599e:	2300      	movs	r3, #0
 80059a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a8:	461a      	mov	r2, r3
 80059aa:	2300      	movs	r3, #0
 80059ac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059ae:	2300      	movs	r3, #0
 80059b0:	613b      	str	r3, [r7, #16]
 80059b2:	e043      	b.n	8005a3c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059ca:	d118      	bne.n	80059fe <USB_DevInit+0x162>
    {
      if (i == 0U)
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059de:	461a      	mov	r2, r3
 80059e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	e013      	b.n	8005a10 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f4:	461a      	mov	r2, r3
 80059f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	e008      	b.n	8005a10 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	2300      	movs	r3, #0
 8005a20:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a40:	461a      	mov	r2, r3
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d3b5      	bcc.n	80059b4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	e043      	b.n	8005ad6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a64:	d118      	bne.n	8005a98 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	e013      	b.n	8005aaa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	e008      	b.n	8005aaa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	2300      	movs	r3, #0
 8005aba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ace:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	613b      	str	r3, [r7, #16]
 8005ad6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ada:	461a      	mov	r2, r3
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d3b5      	bcc.n	8005a4e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005af4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005b02:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d105      	bne.n	8005b18 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	f043 0210 	orr.w	r2, r3, #16
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	4b10      	ldr	r3, [pc, #64]	@ (8005b60 <USB_DevInit+0x2c4>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	f043 0208 	orr.w	r2, r3, #8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d107      	bne.n	8005b50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b48:	f043 0304 	orr.w	r3, r3, #4
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b5c:	b004      	add	sp, #16
 8005b5e:	4770      	bx	lr
 8005b60:	803c3800 	.word	0x803c3800

08005b64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b7e:	d901      	bls.n	8005b84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e01b      	b.n	8005bbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	daf2      	bge.n	8005b72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	019b      	lsls	r3, r3, #6
 8005b94:	f043 0220 	orr.w	r2, r3, #32
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ba8:	d901      	bls.n	8005bae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e006      	b.n	8005bbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	d0f0      	beq.n	8005b9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005be0:	d901      	bls.n	8005be6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e018      	b.n	8005c18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	daf2      	bge.n	8005bd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2210      	movs	r2, #16
 8005bf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c04:	d901      	bls.n	8005c0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e006      	b.n	8005c18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f003 0310 	and.w	r3, r3, #16
 8005c12:	2b10      	cmp	r3, #16
 8005c14:	d0f0      	beq.n	8005bf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	68f9      	ldr	r1, [r7, #12]
 8005c40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c44:	4313      	orrs	r3, r2
 8005c46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b087      	sub	sp, #28
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 0306 	and.w	r3, r3, #6
 8005c6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d102      	bne.n	8005c7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c76:	2300      	movs	r3, #0
 8005c78:	75fb      	strb	r3, [r7, #23]
 8005c7a:	e00a      	b.n	8005c92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d002      	beq.n	8005c88 <USB_GetDevSpeed+0x32>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b06      	cmp	r3, #6
 8005c86:	d102      	bne.n	8005c8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	75fb      	strb	r3, [r7, #23]
 8005c8c:	e001      	b.n	8005c92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c8e:	230f      	movs	r3, #15
 8005c90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d13a      	bne.n	8005d32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f003 030f 	and.w	r3, r3, #15
 8005ccc:	2101      	movs	r1, #1
 8005cce:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	68f9      	ldr	r1, [r7, #12]
 8005cd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d155      	bne.n	8005da0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	791b      	ldrb	r3, [r3, #4]
 8005d0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	059b      	lsls	r3, r3, #22
 8005d16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	e036      	b.n	8005da0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d38:	69da      	ldr	r2, [r3, #28]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	2101      	movs	r1, #1
 8005d44:	fa01 f303 	lsl.w	r3, r1, r3
 8005d48:	041b      	lsls	r3, r3, #16
 8005d4a:	68f9      	ldr	r1, [r7, #12]
 8005d4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d11a      	bne.n	8005da0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	791b      	ldrb	r3, [r3, #4]
 8005d84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d86:	430b      	orrs	r3, r1
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
	...

08005db0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d161      	bne.n	8005e90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005de2:	d11f      	bne.n	8005e24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	0151      	lsls	r1, r2, #5
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	440a      	add	r2, r1
 8005dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dfe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	2101      	movs	r1, #1
 8005e36:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	68f9      	ldr	r1, [r7, #12]
 8005e40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e44:	4013      	ands	r3, r2
 8005e46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	2101      	movs	r1, #1
 8005e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	43db      	mvns	r3, r3
 8005e62:	68f9      	ldr	r1, [r7, #12]
 8005e64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e68:	4013      	ands	r3, r2
 8005e6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	0159      	lsls	r1, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	440b      	add	r3, r1
 8005e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e86:	4619      	mov	r1, r3
 8005e88:	4b35      	ldr	r3, [pc, #212]	@ (8005f60 <USB_DeactivateEndpoint+0x1b0>)
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	600b      	str	r3, [r1, #0]
 8005e8e:	e060      	b.n	8005f52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ea6:	d11f      	bne.n	8005ee8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	0151      	lsls	r1, r2, #5
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ec2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ec6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ee2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ee6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	f003 030f 	and.w	r3, r3, #15
 8005ef8:	2101      	movs	r1, #1
 8005efa:	fa01 f303 	lsl.w	r3, r1, r3
 8005efe:	041b      	lsls	r3, r3, #16
 8005f00:	43db      	mvns	r3, r3
 8005f02:	68f9      	ldr	r1, [r7, #12]
 8005f04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f08:	4013      	ands	r3, r2
 8005f0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f22:	041b      	lsls	r3, r3, #16
 8005f24:	43db      	mvns	r3, r3
 8005f26:	68f9      	ldr	r1, [r7, #12]
 8005f28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	0159      	lsls	r1, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	440b      	add	r3, r1
 8005f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4b05      	ldr	r3, [pc, #20]	@ (8005f64 <USB_DeactivateEndpoint+0x1b4>)
 8005f4e:	4013      	ands	r3, r2
 8005f50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	ec337800 	.word	0xec337800
 8005f64:	eff37800 	.word	0xeff37800

08005f68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	@ 0x28
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	4613      	mov	r3, r2
 8005f74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	f040 817f 	bne.w	8006288 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d132      	bne.n	8005ff8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005fb0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005fb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	0151      	lsls	r1, r2, #5
 8005fc8:	69fa      	ldr	r2, [r7, #28]
 8005fca:	440a      	add	r2, r1
 8005fcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ff0:	0cdb      	lsrs	r3, r3, #19
 8005ff2:	04db      	lsls	r3, r3, #19
 8005ff4:	6113      	str	r3, [r2, #16]
 8005ff6:	e097      	b.n	8006128 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	69fa      	ldr	r2, [r7, #28]
 800600c:	440a      	add	r2, r1
 800600e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006012:	0cdb      	lsrs	r3, r3, #19
 8006014:	04db      	lsls	r3, r3, #19
 8006016:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006032:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006036:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800603a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d11a      	bne.n	8006078 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	429a      	cmp	r2, r3
 800604c:	d903      	bls.n	8006056 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006070:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006074:	6113      	str	r3, [r2, #16]
 8006076:	e044      	b.n	8006102 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	4413      	add	r3, r2
 8006082:	1e5a      	subs	r2, r3, #1
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	fbb2 f3f3 	udiv	r3, r2, r3
 800608c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	8afb      	ldrh	r3, [r7, #22]
 800609e:	04d9      	lsls	r1, r3, #19
 80060a0:	4ba4      	ldr	r3, [pc, #656]	@ (8006334 <USB_EPStartXfer+0x3cc>)
 80060a2:	400b      	ands	r3, r1
 80060a4:	69b9      	ldr	r1, [r7, #24]
 80060a6:	0148      	lsls	r0, r1, #5
 80060a8:	69f9      	ldr	r1, [r7, #28]
 80060aa:	4401      	add	r1, r0
 80060ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80060b0:	4313      	orrs	r3, r2
 80060b2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	791b      	ldrb	r3, [r3, #4]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d122      	bne.n	8006102 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	0151      	lsls	r1, r2, #5
 80060ce:	69fa      	ldr	r2, [r7, #28]
 80060d0:	440a      	add	r2, r1
 80060d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060d6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80060da:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e8:	691a      	ldr	r2, [r3, #16]
 80060ea:	8afb      	ldrh	r3, [r7, #22]
 80060ec:	075b      	lsls	r3, r3, #29
 80060ee:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80060f2:	69b9      	ldr	r1, [r7, #24]
 80060f4:	0148      	lsls	r0, r1, #5
 80060f6:	69f9      	ldr	r1, [r7, #28]
 80060f8:	4401      	add	r1, r0
 80060fa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80060fe:	4313      	orrs	r3, r2
 8006100:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006118:	69b9      	ldr	r1, [r7, #24]
 800611a:	0148      	lsls	r0, r1, #5
 800611c:	69f9      	ldr	r1, [r7, #28]
 800611e:	4401      	add	r1, r0
 8006120:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006124:	4313      	orrs	r3, r2
 8006126:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d14b      	bne.n	80061c6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d009      	beq.n	800614a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006142:	461a      	mov	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	791b      	ldrb	r3, [r3, #4]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d128      	bne.n	80061a4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800615e:	2b00      	cmp	r3, #0
 8006160:	d110      	bne.n	8006184 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	0151      	lsls	r1, r2, #5
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	440a      	add	r2, r1
 8006178:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800617c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	e00f      	b.n	80061a4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	0151      	lsls	r1, r2, #5
 8006196:	69fa      	ldr	r2, [r7, #28]
 8006198:	440a      	add	r2, r1
 800619a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800619e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061a2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	0151      	lsls	r1, r2, #5
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	440a      	add	r2, r1
 80061ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	e166      	b.n	8006494 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	0151      	lsls	r1, r2, #5
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	440a      	add	r2, r1
 80061dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80061e4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	791b      	ldrb	r3, [r3, #4]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d015      	beq.n	800621a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 814e 	beq.w	8006494 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	2101      	movs	r1, #1
 800620a:	fa01 f303 	lsl.w	r3, r1, r3
 800620e:	69f9      	ldr	r1, [r7, #28]
 8006210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006214:	4313      	orrs	r3, r2
 8006216:	634b      	str	r3, [r1, #52]	@ 0x34
 8006218:	e13c      	b.n	8006494 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006226:	2b00      	cmp	r3, #0
 8006228:	d110      	bne.n	800624c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006244:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e00f      	b.n	800626c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	440a      	add	r2, r1
 8006262:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800626a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	68d9      	ldr	r1, [r3, #12]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	781a      	ldrb	r2, [r3, #0]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	b298      	uxth	r0, r3
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	4603      	mov	r3, r0
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f9b9 	bl	80065f8 <USB_WritePacket>
 8006286:	e105      	b.n	8006494 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	0151      	lsls	r1, r2, #5
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	440a      	add	r2, r1
 800629e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062a2:	0cdb      	lsrs	r3, r3, #19
 80062a4:	04db      	lsls	r3, r3, #19
 80062a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80062c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80062ca:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d132      	bne.n	8006338 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006300:	69b9      	ldr	r1, [r7, #24]
 8006302:	0148      	lsls	r0, r1, #5
 8006304:	69f9      	ldr	r1, [r7, #28]
 8006306:	4401      	add	r1, r0
 8006308:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800630c:	4313      	orrs	r3, r2
 800630e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	0151      	lsls	r1, r2, #5
 8006322:	69fa      	ldr	r2, [r7, #28]
 8006324:	440a      	add	r2, r1
 8006326:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800632a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800632e:	6113      	str	r3, [r2, #16]
 8006330:	e062      	b.n	80063f8 <USB_EPStartXfer+0x490>
 8006332:	bf00      	nop
 8006334:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d123      	bne.n	8006388 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634c:	691a      	ldr	r2, [r3, #16]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006356:	69b9      	ldr	r1, [r7, #24]
 8006358:	0148      	lsls	r0, r1, #5
 800635a:	69f9      	ldr	r1, [r7, #28]
 800635c:	4401      	add	r1, r0
 800635e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006362:	4313      	orrs	r3, r2
 8006364:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	440a      	add	r2, r1
 800637c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006380:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006384:	6113      	str	r3, [r2, #16]
 8006386:	e037      	b.n	80063f8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4413      	add	r3, r2
 8006392:	1e5a      	subs	r2, r3, #1
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	8afa      	ldrh	r2, [r7, #22]
 80063a4:	fb03 f202 	mul.w	r2, r3, r2
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	8afb      	ldrh	r3, [r7, #22]
 80063bc:	04d9      	lsls	r1, r3, #19
 80063be:	4b38      	ldr	r3, [pc, #224]	@ (80064a0 <USB_EPStartXfer+0x538>)
 80063c0:	400b      	ands	r3, r1
 80063c2:	69b9      	ldr	r1, [r7, #24]
 80063c4:	0148      	lsls	r0, r1, #5
 80063c6:	69f9      	ldr	r1, [r7, #28]
 80063c8:	4401      	add	r1, r0
 80063ca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063ce:	4313      	orrs	r3, r2
 80063d0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063e8:	69b9      	ldr	r1, [r7, #24]
 80063ea:	0148      	lsls	r0, r1, #5
 80063ec:	69f9      	ldr	r1, [r7, #28]
 80063ee:	4401      	add	r1, r0
 80063f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063f4:	4313      	orrs	r3, r2
 80063f6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d10d      	bne.n	800641a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d009      	beq.n	800641a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	68d9      	ldr	r1, [r3, #12]
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006416:	460a      	mov	r2, r1
 8006418:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	791b      	ldrb	r3, [r3, #4]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d128      	bne.n	8006474 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800642e:	2b00      	cmp	r3, #0
 8006430:	d110      	bne.n	8006454 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	440a      	add	r2, r1
 8006448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800644c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	e00f      	b.n	8006474 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	440a      	add	r2, r1
 800646a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800646e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006472:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	440a      	add	r2, r1
 800648a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800648e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006492:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	1ff80000 	.word	0x1ff80000

080064a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d14a      	bne.n	8006558 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064da:	f040 8086 	bne.w	80065ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006500:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	7812      	ldrb	r2, [r2, #0]
 8006516:	0151      	lsls	r1, r2, #5
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	440a      	add	r2, r1
 800651c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006520:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006524:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3301      	adds	r3, #1
 800652a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006532:	4293      	cmp	r3, r2
 8006534:	d902      	bls.n	800653c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	75fb      	strb	r3, [r7, #23]
          break;
 800653a:	e056      	b.n	80065ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006550:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006554:	d0e7      	beq.n	8006526 <USB_EPStopXfer+0x82>
 8006556:	e048      	b.n	80065ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800656c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006570:	d13b      	bne.n	80065ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	7812      	ldrb	r2, [r2, #0]
 8006586:	0151      	lsls	r1, r2, #5
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	440a      	add	r2, r1
 800658c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006590:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006594:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	7812      	ldrb	r2, [r2, #0]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3301      	adds	r3, #1
 80065be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d902      	bls.n	80065d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	75fb      	strb	r3, [r7, #23]
          break;
 80065ce:	e00c      	b.n	80065ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065e8:	d0e7      	beq.n	80065ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b089      	sub	sp, #36	@ 0x24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	4611      	mov	r1, r2
 8006604:	461a      	mov	r2, r3
 8006606:	460b      	mov	r3, r1
 8006608:	71fb      	strb	r3, [r7, #7]
 800660a:	4613      	mov	r3, r2
 800660c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006616:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800661a:	2b00      	cmp	r3, #0
 800661c:	d123      	bne.n	8006666 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800661e:	88bb      	ldrh	r3, [r7, #4]
 8006620:	3303      	adds	r3, #3
 8006622:	089b      	lsrs	r3, r3, #2
 8006624:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006626:	2300      	movs	r3, #0
 8006628:	61bb      	str	r3, [r7, #24]
 800662a:	e018      	b.n	800665e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800662c:	79fb      	ldrb	r3, [r7, #7]
 800662e:	031a      	lsls	r2, r3, #12
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	4413      	add	r3, r2
 8006634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006638:	461a      	mov	r2, r3
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	3301      	adds	r3, #1
 8006644:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	3301      	adds	r3, #1
 800664a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	3301      	adds	r3, #1
 8006650:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	3301      	adds	r3, #1
 8006656:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	3301      	adds	r3, #1
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	429a      	cmp	r2, r3
 8006664:	d3e2      	bcc.n	800662c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3724      	adds	r7, #36	@ 0x24
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006674:	b480      	push	{r7}
 8006676:	b08b      	sub	sp, #44	@ 0x2c
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	4613      	mov	r3, r2
 8006680:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	089b      	lsrs	r3, r3, #2
 800668e:	b29b      	uxth	r3, r3
 8006690:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	f003 0303 	and.w	r3, r3, #3
 8006698:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800669a:	2300      	movs	r3, #0
 800669c:	623b      	str	r3, [r7, #32]
 800669e:	e014      	b.n	80066ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	3301      	adds	r3, #1
 80066b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80066b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b4:	3301      	adds	r3, #1
 80066b6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80066b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ba:	3301      	adds	r3, #1
 80066bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	3301      	adds	r3, #1
 80066c2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	3301      	adds	r3, #1
 80066c8:	623b      	str	r3, [r7, #32]
 80066ca:	6a3a      	ldr	r2, [r7, #32]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d3e6      	bcc.n	80066a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80066d2:	8bfb      	ldrh	r3, [r7, #30]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01e      	beq.n	8006716 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066e2:	461a      	mov	r2, r3
 80066e4:	f107 0310 	add.w	r3, r7, #16
 80066e8:	6812      	ldr	r2, [r2, #0]
 80066ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	fa22 f303 	lsr.w	r3, r2, r3
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	701a      	strb	r2, [r3, #0]
      i++;
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	3301      	adds	r3, #1
 8006702:	623b      	str	r3, [r7, #32]
      pDest++;
 8006704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006706:	3301      	adds	r3, #1
 8006708:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800670a:	8bfb      	ldrh	r3, [r7, #30]
 800670c:	3b01      	subs	r3, #1
 800670e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006710:	8bfb      	ldrh	r3, [r7, #30]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1ea      	bne.n	80066ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006718:	4618      	mov	r0, r3
 800671a:	372c      	adds	r7, #44	@ 0x2c
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	785b      	ldrb	r3, [r3, #1]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d12c      	bne.n	800679a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	db12      	blt.n	8006778 <USB_EPSetStall+0x54>
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00f      	beq.n	8006778 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	440a      	add	r2, r1
 800676e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006772:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006776:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	0151      	lsls	r1, r2, #5
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	440a      	add	r2, r1
 800678e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006792:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	e02b      	b.n	80067f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	db12      	blt.n	80067d2 <USB_EPSetStall+0xae>
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00f      	beq.n	80067d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	0151      	lsls	r1, r2, #5
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	440a      	add	r2, r1
 80067c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80067d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80067f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	785b      	ldrb	r3, [r3, #1]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d128      	bne.n	800686e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	440a      	add	r2, r1
 8006832:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800683a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	791b      	ldrb	r3, [r3, #4]
 8006840:	2b03      	cmp	r3, #3
 8006842:	d003      	beq.n	800684c <USB_EPClearStall+0x4c>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	791b      	ldrb	r3, [r3, #4]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d138      	bne.n	80068be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	e027      	b.n	80068be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	0151      	lsls	r1, r2, #5
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	440a      	add	r2, r1
 8006884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006888:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800688c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	791b      	ldrb	r3, [r3, #4]
 8006892:	2b03      	cmp	r3, #3
 8006894:	d003      	beq.n	800689e <USB_EPClearStall+0x9e>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	791b      	ldrb	r3, [r3, #4]
 800689a:	2b02      	cmp	r3, #2
 800689c:	d10f      	bne.n	80068be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	0151      	lsls	r1, r2, #5
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	440a      	add	r2, r1
 80068b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80068ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006900:	68f9      	ldr	r1, [r7, #12]
 8006902:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006906:	4313      	orrs	r3, r2
 8006908:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006932:	f023 0303 	bic.w	r3, r3, #3
 8006936:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006946:	f023 0302 	bic.w	r3, r3, #2
 800694a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800695a:	b480      	push	{r7}
 800695c:	b085      	sub	sp, #20
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006974:	f023 0303 	bic.w	r3, r3, #3
 8006978:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006988:	f043 0302 	orr.w	r3, r3, #2
 800698c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	4013      	ands	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069b4:	68fb      	ldr	r3, [r7, #12]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	4013      	ands	r3, r2
 80069e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	0c1b      	lsrs	r3, r3, #16
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b085      	sub	sp, #20
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	4013      	ands	r3, r2
 8006a18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	b29b      	uxth	r3, r3
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b085      	sub	sp, #20
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	4013      	ands	r3, r2
 8006a56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a58:	68bb      	ldr	r3, [r7, #8]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b087      	sub	sp, #28
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a88:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a8a:	78fb      	ldrb	r3, [r7, #3]
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	fa22 f303 	lsr.w	r3, r2, r3
 8006a96:	01db      	lsls	r3, r3, #7
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	371c      	adds	r7, #28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	f003 0301 	and.w	r3, r3, #1
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006af8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006afc:	f023 0307 	bic.w	r3, r3, #7
 8006b00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	333c      	adds	r3, #60	@ 0x3c
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	4a26      	ldr	r2, [pc, #152]	@ (8006bdc <USB_EP0_OutStart+0xb8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d90a      	bls.n	8006b5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b58:	d101      	bne.n	8006b5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e037      	b.n	8006bce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b64:	461a      	mov	r2, r3
 8006b66:	2300      	movs	r3, #0
 8006b68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b8c:	f043 0318 	orr.w	r3, r3, #24
 8006b90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ba0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006ba4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ba6:	7afb      	ldrb	r3, [r7, #11]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d10f      	bne.n	8006bcc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bc6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006bca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	4f54300a 	.word	0x4f54300a

08006be0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bf8:	d901      	bls.n	8006bfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e01b      	b.n	8006c36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	daf2      	bge.n	8006bec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f043 0201 	orr.w	r2, r3, #1
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c22:	d901      	bls.n	8006c28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e006      	b.n	8006c36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d0f0      	beq.n	8006c16 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c50:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006c54:	f002 fcbe 	bl	80095d4 <USBD_static_malloc>
 8006c58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d109      	bne.n	8006c74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	32b0      	adds	r2, #176	@ 0xb0
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006c70:	2302      	movs	r3, #2
 8006c72:	e0d4      	b.n	8006e1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006c74:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006c78:	2100      	movs	r1, #0
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f002 fd5c 	bl	8009738 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	32b0      	adds	r2, #176	@ 0xb0
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	32b0      	adds	r2, #176	@ 0xb0
 8006c9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	7c1b      	ldrb	r3, [r3, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d138      	bne.n	8006d1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006cac:	4b5e      	ldr	r3, [pc, #376]	@ (8006e28 <USBD_CDC_Init+0x1e4>)
 8006cae:	7819      	ldrb	r1, [r3, #0]
 8006cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f002 fb69 	bl	800938e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8006e28 <USBD_CDC_Init+0x1e4>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	f003 020f 	and.w	r2, r3, #15
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	3324      	adds	r3, #36	@ 0x24
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006cd6:	4b55      	ldr	r3, [pc, #340]	@ (8006e2c <USBD_CDC_Init+0x1e8>)
 8006cd8:	7819      	ldrb	r1, [r3, #0]
 8006cda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cde:	2202      	movs	r2, #2
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f002 fb54 	bl	800938e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ce6:	4b51      	ldr	r3, [pc, #324]	@ (8006e2c <USBD_CDC_Init+0x1e8>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	f003 020f 	and.w	r2, r3, #15
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006cfe:	2201      	movs	r2, #1
 8006d00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d02:	4b4b      	ldr	r3, [pc, #300]	@ (8006e30 <USBD_CDC_Init+0x1ec>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f003 020f 	and.w	r2, r3, #15
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	3326      	adds	r3, #38	@ 0x26
 8006d18:	2210      	movs	r2, #16
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	e035      	b.n	8006d8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d1e:	4b42      	ldr	r3, [pc, #264]	@ (8006e28 <USBD_CDC_Init+0x1e4>)
 8006d20:	7819      	ldrb	r1, [r3, #0]
 8006d22:	2340      	movs	r3, #64	@ 0x40
 8006d24:	2202      	movs	r2, #2
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f002 fb31 	bl	800938e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8006e28 <USBD_CDC_Init+0x1e4>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	f003 020f 	and.w	r2, r3, #15
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	3324      	adds	r3, #36	@ 0x24
 8006d42:	2201      	movs	r2, #1
 8006d44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d46:	4b39      	ldr	r3, [pc, #228]	@ (8006e2c <USBD_CDC_Init+0x1e8>)
 8006d48:	7819      	ldrb	r1, [r3, #0]
 8006d4a:	2340      	movs	r3, #64	@ 0x40
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f002 fb1d 	bl	800938e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d54:	4b35      	ldr	r3, [pc, #212]	@ (8006e2c <USBD_CDC_Init+0x1e8>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f003 020f 	and.w	r2, r3, #15
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d70:	4b2f      	ldr	r3, [pc, #188]	@ (8006e30 <USBD_CDC_Init+0x1ec>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	f003 020f 	and.w	r2, r3, #15
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	3326      	adds	r3, #38	@ 0x26
 8006d86:	2210      	movs	r2, #16
 8006d88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d8a:	4b29      	ldr	r3, [pc, #164]	@ (8006e30 <USBD_CDC_Init+0x1ec>)
 8006d8c:	7819      	ldrb	r1, [r3, #0]
 8006d8e:	2308      	movs	r3, #8
 8006d90:	2203      	movs	r2, #3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f002 fafb 	bl	800938e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006d98:	4b25      	ldr	r3, [pc, #148]	@ (8006e30 <USBD_CDC_Init+0x1ec>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 020f 	and.w	r2, r3, #15
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	3324      	adds	r3, #36	@ 0x24
 8006dae:	2201      	movs	r2, #1
 8006db0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	33b0      	adds	r3, #176	@ 0xb0
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006de8:	2302      	movs	r3, #2
 8006dea:	e018      	b.n	8006e1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	7c1b      	ldrb	r3, [r3, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006df4:	4b0d      	ldr	r3, [pc, #52]	@ (8006e2c <USBD_CDC_Init+0x1e8>)
 8006df6:	7819      	ldrb	r1, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006dfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f002 fbb2 	bl	800956c <USBD_LL_PrepareReceive>
 8006e08:	e008      	b.n	8006e1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e0a:	4b08      	ldr	r3, [pc, #32]	@ (8006e2c <USBD_CDC_Init+0x1e8>)
 8006e0c:	7819      	ldrb	r1, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e14:	2340      	movs	r3, #64	@ 0x40
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f002 fba8 	bl	800956c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000093 	.word	0x20000093
 8006e2c:	20000094 	.word	0x20000094
 8006e30:	20000095 	.word	0x20000095

08006e34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006e40:	4b3a      	ldr	r3, [pc, #232]	@ (8006f2c <USBD_CDC_DeInit+0xf8>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f002 fac7 	bl	80093da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006e4c:	4b37      	ldr	r3, [pc, #220]	@ (8006f2c <USBD_CDC_DeInit+0xf8>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	f003 020f 	and.w	r2, r3, #15
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	3324      	adds	r3, #36	@ 0x24
 8006e62:	2200      	movs	r2, #0
 8006e64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006e66:	4b32      	ldr	r3, [pc, #200]	@ (8006f30 <USBD_CDC_DeInit+0xfc>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f002 fab4 	bl	80093da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006e72:	4b2f      	ldr	r3, [pc, #188]	@ (8006f30 <USBD_CDC_DeInit+0xfc>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	f003 020f 	and.w	r2, r3, #15
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	440b      	add	r3, r1
 8006e86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006e8e:	4b29      	ldr	r3, [pc, #164]	@ (8006f34 <USBD_CDC_DeInit+0x100>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f002 faa0 	bl	80093da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006e9a:	4b26      	ldr	r3, [pc, #152]	@ (8006f34 <USBD_CDC_DeInit+0x100>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	f003 020f 	and.w	r2, r3, #15
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	440b      	add	r3, r1
 8006eae:	3324      	adds	r3, #36	@ 0x24
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8006f34 <USBD_CDC_DeInit+0x100>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 020f 	and.w	r2, r3, #15
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3326      	adds	r3, #38	@ 0x26
 8006eca:	2200      	movs	r2, #0
 8006ecc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	32b0      	adds	r2, #176	@ 0xb0
 8006ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01f      	beq.n	8006f20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	33b0      	adds	r3, #176	@ 0xb0
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	32b0      	adds	r2, #176	@ 0xb0
 8006efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f002 fb74 	bl	80095f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	32b0      	adds	r2, #176	@ 0xb0
 8006f12:	2100      	movs	r1, #0
 8006f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20000093 	.word	0x20000093
 8006f30:	20000094 	.word	0x20000094
 8006f34:	20000095 	.word	0x20000095

08006f38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	32b0      	adds	r2, #176	@ 0xb0
 8006f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e0bf      	b.n	80070e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d050      	beq.n	8007016 <USBD_CDC_Setup+0xde>
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	f040 80af 	bne.w	80070d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	88db      	ldrh	r3, [r3, #6]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d03a      	beq.n	8006ff8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	b25b      	sxtb	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	da1b      	bge.n	8006fc4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	33b0      	adds	r3, #176	@ 0xb0
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006fa2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	88d2      	ldrh	r2, [r2, #6]
 8006fa8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	88db      	ldrh	r3, [r3, #6]
 8006fae:	2b07      	cmp	r3, #7
 8006fb0:	bf28      	it	cs
 8006fb2:	2307      	movcs	r3, #7
 8006fb4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	89fa      	ldrh	r2, [r7, #14]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 fd93 	bl	8008ae8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006fc2:	e090      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	785a      	ldrb	r2, [r3, #1]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	88db      	ldrh	r3, [r3, #6]
 8006fd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8006fd4:	d803      	bhi.n	8006fde <USBD_CDC_Setup+0xa6>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	88db      	ldrh	r3, [r3, #6]
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	e000      	b.n	8006fe0 <USBD_CDC_Setup+0xa8>
 8006fde:	2240      	movs	r2, #64	@ 0x40
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006fe6:	6939      	ldr	r1, [r7, #16]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 fda5 	bl	8008b40 <USBD_CtlPrepareRx>
      break;
 8006ff6:	e076      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	33b0      	adds	r3, #176	@ 0xb0
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	7850      	ldrb	r0, [r2, #1]
 800700e:	2200      	movs	r2, #0
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	4798      	blx	r3
      break;
 8007014:	e067      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	785b      	ldrb	r3, [r3, #1]
 800701a:	2b0b      	cmp	r3, #11
 800701c:	d851      	bhi.n	80070c2 <USBD_CDC_Setup+0x18a>
 800701e:	a201      	add	r2, pc, #4	@ (adr r2, 8007024 <USBD_CDC_Setup+0xec>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	08007055 	.word	0x08007055
 8007028:	080070d1 	.word	0x080070d1
 800702c:	080070c3 	.word	0x080070c3
 8007030:	080070c3 	.word	0x080070c3
 8007034:	080070c3 	.word	0x080070c3
 8007038:	080070c3 	.word	0x080070c3
 800703c:	080070c3 	.word	0x080070c3
 8007040:	080070c3 	.word	0x080070c3
 8007044:	080070c3 	.word	0x080070c3
 8007048:	080070c3 	.word	0x080070c3
 800704c:	0800707f 	.word	0x0800707f
 8007050:	080070a9 	.word	0x080070a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b03      	cmp	r3, #3
 800705e:	d107      	bne.n	8007070 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007060:	f107 030a 	add.w	r3, r7, #10
 8007064:	2202      	movs	r2, #2
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 fd3d 	bl	8008ae8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800706e:	e032      	b.n	80070d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 fcbb 	bl	80089ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	75fb      	strb	r3, [r7, #23]
          break;
 800707c:	e02b      	b.n	80070d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b03      	cmp	r3, #3
 8007088:	d107      	bne.n	800709a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800708a:	f107 030d 	add.w	r3, r7, #13
 800708e:	2201      	movs	r2, #1
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 fd28 	bl	8008ae8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007098:	e01d      	b.n	80070d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fca6 	bl	80089ee <USBD_CtlError>
            ret = USBD_FAIL;
 80070a2:	2303      	movs	r3, #3
 80070a4:	75fb      	strb	r3, [r7, #23]
          break;
 80070a6:	e016      	b.n	80070d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d00f      	beq.n	80070d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 fc99 	bl	80089ee <USBD_CtlError>
            ret = USBD_FAIL;
 80070bc:	2303      	movs	r3, #3
 80070be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80070c0:	e008      	b.n	80070d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 fc92 	bl	80089ee <USBD_CtlError>
          ret = USBD_FAIL;
 80070ca:	2303      	movs	r3, #3
 80070cc:	75fb      	strb	r3, [r7, #23]
          break;
 80070ce:	e002      	b.n	80070d6 <USBD_CDC_Setup+0x19e>
          break;
 80070d0:	bf00      	nop
 80070d2:	e008      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>
          break;
 80070d4:	bf00      	nop
      }
      break;
 80070d6:	e006      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 fc87 	bl	80089ee <USBD_CtlError>
      ret = USBD_FAIL;
 80070e0:	2303      	movs	r3, #3
 80070e2:	75fb      	strb	r3, [r7, #23]
      break;
 80070e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007102:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	32b0      	adds	r2, #176	@ 0xb0
 800710e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007116:	2303      	movs	r3, #3
 8007118:	e065      	b.n	80071e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	32b0      	adds	r2, #176	@ 0xb0
 8007124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007128:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	f003 020f 	and.w	r2, r3, #15
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	440b      	add	r3, r1
 800713c:	3318      	adds	r3, #24
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d02f      	beq.n	80071a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	f003 020f 	and.w	r2, r3, #15
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	440b      	add	r3, r1
 8007156:	3318      	adds	r3, #24
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	f003 010f 	and.w	r1, r3, #15
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	460b      	mov	r3, r1
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	440b      	add	r3, r1
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4403      	add	r3, r0
 800716c:	331c      	adds	r3, #28
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	fbb2 f1f3 	udiv	r1, r2, r3
 8007174:	fb01 f303 	mul.w	r3, r1, r3
 8007178:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800717a:	2b00      	cmp	r3, #0
 800717c:	d112      	bne.n	80071a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	f003 020f 	and.w	r2, r3, #15
 8007184:	6879      	ldr	r1, [r7, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	3318      	adds	r3, #24
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007196:	78f9      	ldrb	r1, [r7, #3]
 8007198:	2300      	movs	r3, #0
 800719a:	2200      	movs	r2, #0
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f002 f9c4 	bl	800952a <USBD_LL_Transmit>
 80071a2:	e01f      	b.n	80071e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	33b0      	adds	r3, #176	@ 0xb0
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d010      	beq.n	80071e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	33b0      	adds	r3, #176	@ 0xb0
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80071e0:	78fa      	ldrb	r2, [r7, #3]
 80071e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	32b0      	adds	r2, #176	@ 0xb0
 8007204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007208:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	32b0      	adds	r2, #176	@ 0xb0
 8007214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	e01a      	b.n	8007256 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f002 f9c2 	bl	80095ae <USBD_LL_GetRxDataSize>
 800722a:	4602      	mov	r2, r0
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	33b0      	adds	r3, #176	@ 0xb0
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007250:	4611      	mov	r1, r2
 8007252:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	32b0      	adds	r2, #176	@ 0xb0
 8007270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007274:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800727c:	2303      	movs	r3, #3
 800727e:	e024      	b.n	80072ca <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	33b0      	adds	r3, #176	@ 0xb0
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d019      	beq.n	80072c8 <USBD_CDC_EP0_RxReady+0x6a>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800729a:	2bff      	cmp	r3, #255	@ 0xff
 800729c:	d014      	beq.n	80072c8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	33b0      	adds	r3, #176	@ 0xb0
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80072b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80072be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	22ff      	movs	r2, #255	@ 0xff
 80072c4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072dc:	2182      	movs	r1, #130	@ 0x82
 80072de:	4818      	ldr	r0, [pc, #96]	@ (8007340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072e0:	f000 fd4f 	bl	8007d82 <USBD_GetEpDesc>
 80072e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072e6:	2101      	movs	r1, #1
 80072e8:	4815      	ldr	r0, [pc, #84]	@ (8007340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072ea:	f000 fd4a 	bl	8007d82 <USBD_GetEpDesc>
 80072ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072f0:	2181      	movs	r1, #129	@ 0x81
 80072f2:	4813      	ldr	r0, [pc, #76]	@ (8007340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072f4:	f000 fd45 	bl	8007d82 <USBD_GetEpDesc>
 80072f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2210      	movs	r2, #16
 8007304:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d006      	beq.n	800731a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2200      	movs	r2, #0
 8007310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007314:	711a      	strb	r2, [r3, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d006      	beq.n	800732e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007328:	711a      	strb	r2, [r3, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2243      	movs	r2, #67	@ 0x43
 8007332:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007334:	4b02      	ldr	r3, [pc, #8]	@ (8007340 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007336:	4618      	mov	r0, r3
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20000050 	.word	0x20000050

08007344 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800734c:	2182      	movs	r1, #130	@ 0x82
 800734e:	4818      	ldr	r0, [pc, #96]	@ (80073b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007350:	f000 fd17 	bl	8007d82 <USBD_GetEpDesc>
 8007354:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007356:	2101      	movs	r1, #1
 8007358:	4815      	ldr	r0, [pc, #84]	@ (80073b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800735a:	f000 fd12 	bl	8007d82 <USBD_GetEpDesc>
 800735e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007360:	2181      	movs	r1, #129	@ 0x81
 8007362:	4813      	ldr	r0, [pc, #76]	@ (80073b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007364:	f000 fd0d 	bl	8007d82 <USBD_GetEpDesc>
 8007368:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2210      	movs	r2, #16
 8007374:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d006      	beq.n	800738a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	2200      	movs	r2, #0
 8007380:	711a      	strb	r2, [r3, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f042 0202 	orr.w	r2, r2, #2
 8007388:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d006      	beq.n	800739e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	711a      	strb	r2, [r3, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f042 0202 	orr.w	r2, r2, #2
 800739c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2243      	movs	r2, #67	@ 0x43
 80073a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073a4:	4b02      	ldr	r3, [pc, #8]	@ (80073b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000050 	.word	0x20000050

080073b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073bc:	2182      	movs	r1, #130	@ 0x82
 80073be:	4818      	ldr	r0, [pc, #96]	@ (8007420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80073c0:	f000 fcdf 	bl	8007d82 <USBD_GetEpDesc>
 80073c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073c6:	2101      	movs	r1, #1
 80073c8:	4815      	ldr	r0, [pc, #84]	@ (8007420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80073ca:	f000 fcda 	bl	8007d82 <USBD_GetEpDesc>
 80073ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073d0:	2181      	movs	r1, #129	@ 0x81
 80073d2:	4813      	ldr	r0, [pc, #76]	@ (8007420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80073d4:	f000 fcd5 	bl	8007d82 <USBD_GetEpDesc>
 80073d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2210      	movs	r2, #16
 80073e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d006      	beq.n	80073fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073f4:	711a      	strb	r2, [r3, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d006      	beq.n	800740e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007408:	711a      	strb	r2, [r3, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2243      	movs	r2, #67	@ 0x43
 8007412:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007414:	4b02      	ldr	r3, [pc, #8]	@ (8007420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000050 	.word	0x20000050

08007424 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	220a      	movs	r2, #10
 8007430:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007432:	4b03      	ldr	r3, [pc, #12]	@ (8007440 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	2000000c 	.word	0x2000000c

08007444 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007454:	2303      	movs	r3, #3
 8007456:	e009      	b.n	800746c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	33b0      	adds	r3, #176	@ 0xb0
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	32b0      	adds	r2, #176	@ 0xb0
 800748e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007492:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800749a:	2303      	movs	r3, #3
 800749c:	e008      	b.n	80074b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	32b0      	adds	r2, #176	@ 0xb0
 80074d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80074dc:	2303      	movs	r3, #3
 80074de:	e004      	b.n	80074ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
	...

080074f8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	32b0      	adds	r2, #176	@ 0xb0
 800750a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007510:	2301      	movs	r3, #1
 8007512:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800751a:	2303      	movs	r3, #3
 800751c:	e025      	b.n	800756a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007524:	2b00      	cmp	r3, #0
 8007526:	d11f      	bne.n	8007568 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2201      	movs	r2, #1
 800752c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007530:	4b10      	ldr	r3, [pc, #64]	@ (8007574 <USBD_CDC_TransmitPacket+0x7c>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	f003 020f 	and.w	r2, r3, #15
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4613      	mov	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4403      	add	r3, r0
 800754a:	3318      	adds	r3, #24
 800754c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800754e:	4b09      	ldr	r3, [pc, #36]	@ (8007574 <USBD_CDC_TransmitPacket+0x7c>)
 8007550:	7819      	ldrb	r1, [r3, #0]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 ffe3 	bl	800952a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007568:	7bfb      	ldrb	r3, [r7, #15]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	20000093 	.word	0x20000093

08007578 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	32b0      	adds	r2, #176	@ 0xb0
 800758a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	32b0      	adds	r2, #176	@ 0xb0
 800759a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e018      	b.n	80075d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	7c1b      	ldrb	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075ae:	4b0c      	ldr	r3, [pc, #48]	@ (80075e0 <USBD_CDC_ReceivePacket+0x68>)
 80075b0:	7819      	ldrb	r1, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 ffd5 	bl	800956c <USBD_LL_PrepareReceive>
 80075c2:	e008      	b.n	80075d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075c4:	4b06      	ldr	r3, [pc, #24]	@ (80075e0 <USBD_CDC_ReceivePacket+0x68>)
 80075c6:	7819      	ldrb	r1, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075ce:	2340      	movs	r3, #64	@ 0x40
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 ffcb 	bl	800956c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	20000094 	.word	0x20000094

080075e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	4613      	mov	r3, r2
 80075f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e01f      	b.n	800763c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	79fa      	ldrb	r2, [r7, #7]
 800762e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f001 fe45 	bl	80092c0 <USBD_LL_Init>
 8007636:	4603      	mov	r3, r0
 8007638:	75fb      	strb	r3, [r7, #23]

  return ret;
 800763a:	7dfb      	ldrb	r3, [r7, #23]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007658:	2303      	movs	r3, #3
 800765a:	e025      	b.n	80076a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	32ae      	adds	r2, #174	@ 0xae
 800766e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00f      	beq.n	8007698 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	32ae      	adds	r2, #174	@ 0xae
 8007682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007688:	f107 020e 	add.w	r2, r7, #14
 800768c:	4610      	mov	r0, r2
 800768e:	4798      	blx	r3
 8007690:	4602      	mov	r2, r0
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 fe4d 	bl	8009358 <USBD_LL_Start>
 80076be:	4603      	mov	r3, r0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	460b      	mov	r3, r1
 80076e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d009      	beq.n	800770c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	78fa      	ldrb	r2, [r7, #3]
 8007702:	4611      	mov	r1, r2
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4798      	blx	r3
 8007708:	4603      	mov	r3, r0
 800770a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	78fa      	ldrb	r2, [r7, #3]
 8007730:	4611      	mov	r1, r2
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4798      	blx	r3
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800773c:	2303      	movs	r3, #3
 800773e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007740:	7bfb      	ldrb	r3, [r7, #15]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f001 f90c 	bl	800897a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007770:	461a      	mov	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800777e:	f003 031f 	and.w	r3, r3, #31
 8007782:	2b02      	cmp	r3, #2
 8007784:	d01a      	beq.n	80077bc <USBD_LL_SetupStage+0x72>
 8007786:	2b02      	cmp	r3, #2
 8007788:	d822      	bhi.n	80077d0 <USBD_LL_SetupStage+0x86>
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <USBD_LL_SetupStage+0x4a>
 800778e:	2b01      	cmp	r3, #1
 8007790:	d00a      	beq.n	80077a8 <USBD_LL_SetupStage+0x5e>
 8007792:	e01d      	b.n	80077d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fb63 	bl	8007e68 <USBD_StdDevReq>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73fb      	strb	r3, [r7, #15]
      break;
 80077a6:	e020      	b.n	80077ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fbcb 	bl	8007f4c <USBD_StdItfReq>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73fb      	strb	r3, [r7, #15]
      break;
 80077ba:	e016      	b.n	80077ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fc2d 	bl	8008024 <USBD_StdEPReq>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73fb      	strb	r3, [r7, #15]
      break;
 80077ce:	e00c      	b.n	80077ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80077d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 fe1a 	bl	8009418 <USBD_LL_StallEP>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73fb      	strb	r3, [r7, #15]
      break;
 80077e8:	bf00      	nop
  }

  return ret;
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	460b      	mov	r3, r1
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007806:	7afb      	ldrb	r3, [r7, #11]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d16e      	bne.n	80078ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007812:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800781a:	2b03      	cmp	r3, #3
 800781c:	f040 8098 	bne.w	8007950 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	429a      	cmp	r2, r3
 800782a:	d913      	bls.n	8007854 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	1ad2      	subs	r2, r2, r3
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	4293      	cmp	r3, r2
 8007844:	bf28      	it	cs
 8007846:	4613      	movcs	r3, r2
 8007848:	461a      	mov	r2, r3
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f001 f994 	bl	8008b7a <USBD_CtlContinueRx>
 8007852:	e07d      	b.n	8007950 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800785a:	f003 031f 	and.w	r3, r3, #31
 800785e:	2b02      	cmp	r3, #2
 8007860:	d014      	beq.n	800788c <USBD_LL_DataOutStage+0x98>
 8007862:	2b02      	cmp	r3, #2
 8007864:	d81d      	bhi.n	80078a2 <USBD_LL_DataOutStage+0xae>
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <USBD_LL_DataOutStage+0x7c>
 800786a:	2b01      	cmp	r3, #1
 800786c:	d003      	beq.n	8007876 <USBD_LL_DataOutStage+0x82>
 800786e:	e018      	b.n	80078a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	75bb      	strb	r3, [r7, #22]
            break;
 8007874:	e018      	b.n	80078a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800787c:	b2db      	uxtb	r3, r3
 800787e:	4619      	mov	r1, r3
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 fa64 	bl	8007d4e <USBD_CoreFindIF>
 8007886:	4603      	mov	r3, r0
 8007888:	75bb      	strb	r3, [r7, #22]
            break;
 800788a:	e00d      	b.n	80078a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007892:	b2db      	uxtb	r3, r3
 8007894:	4619      	mov	r1, r3
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fa66 	bl	8007d68 <USBD_CoreFindEP>
 800789c:	4603      	mov	r3, r0
 800789e:	75bb      	strb	r3, [r7, #22]
            break;
 80078a0:	e002      	b.n	80078a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	75bb      	strb	r3, [r7, #22]
            break;
 80078a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80078a8:	7dbb      	ldrb	r3, [r7, #22]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d119      	bne.n	80078e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d113      	bne.n	80078e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80078ba:	7dba      	ldrb	r2, [r7, #22]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	32ae      	adds	r2, #174	@ 0xae
 80078c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00b      	beq.n	80078e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80078ca:	7dba      	ldrb	r2, [r7, #22]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80078d2:	7dba      	ldrb	r2, [r7, #22]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	32ae      	adds	r2, #174	@ 0xae
 80078d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f001 f95a 	bl	8008b9c <USBD_CtlSendStatus>
 80078e8:	e032      	b.n	8007950 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80078ea:	7afb      	ldrb	r3, [r7, #11]
 80078ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	4619      	mov	r1, r3
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fa37 	bl	8007d68 <USBD_CoreFindEP>
 80078fa:	4603      	mov	r3, r0
 80078fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078fe:	7dbb      	ldrb	r3, [r7, #22]
 8007900:	2bff      	cmp	r3, #255	@ 0xff
 8007902:	d025      	beq.n	8007950 <USBD_LL_DataOutStage+0x15c>
 8007904:	7dbb      	ldrb	r3, [r7, #22]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d122      	bne.n	8007950 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b03      	cmp	r3, #3
 8007914:	d117      	bne.n	8007946 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007916:	7dba      	ldrb	r2, [r7, #22]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	32ae      	adds	r2, #174	@ 0xae
 800791c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00f      	beq.n	8007946 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007926:	7dba      	ldrb	r2, [r7, #22]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800792e:	7dba      	ldrb	r2, [r7, #22]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	32ae      	adds	r2, #174	@ 0xae
 8007934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	7afa      	ldrb	r2, [r7, #11]
 800793c:	4611      	mov	r1, r2
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	4798      	blx	r3
 8007942:	4603      	mov	r3, r0
 8007944:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007946:	7dfb      	ldrb	r3, [r7, #23]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	e000      	b.n	8007952 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b086      	sub	sp, #24
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	460b      	mov	r3, r1
 8007964:	607a      	str	r2, [r7, #4]
 8007966:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d16f      	bne.n	8007a4e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3314      	adds	r3, #20
 8007972:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800797a:	2b02      	cmp	r3, #2
 800797c:	d15a      	bne.n	8007a34 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	429a      	cmp	r2, r3
 8007988:	d914      	bls.n	80079b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	1ad2      	subs	r2, r2, r3
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	461a      	mov	r2, r3
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f001 f8bc 	bl	8008b1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079a6:	2300      	movs	r3, #0
 80079a8:	2200      	movs	r2, #0
 80079aa:	2100      	movs	r1, #0
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f001 fddd 	bl	800956c <USBD_LL_PrepareReceive>
 80079b2:	e03f      	b.n	8007a34 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d11c      	bne.n	80079fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d316      	bcc.n	80079fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d20f      	bcs.n	80079fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80079da:	2200      	movs	r2, #0
 80079dc:	2100      	movs	r1, #0
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f001 f89d 	bl	8008b1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079ec:	2300      	movs	r3, #0
 80079ee:	2200      	movs	r2, #0
 80079f0:	2100      	movs	r1, #0
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f001 fdba 	bl	800956c <USBD_LL_PrepareReceive>
 80079f8:	e01c      	b.n	8007a34 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d10f      	bne.n	8007a26 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d009      	beq.n	8007a26 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a26:	2180      	movs	r1, #128	@ 0x80
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f001 fcf5 	bl	8009418 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f001 f8c7 	bl	8008bc2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d03a      	beq.n	8007ab4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f7ff fe42 	bl	80076c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007a4c:	e032      	b.n	8007ab4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007a4e:	7afb      	ldrb	r3, [r7, #11]
 8007a50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	4619      	mov	r1, r3
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 f985 	bl	8007d68 <USBD_CoreFindEP>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
 8007a64:	2bff      	cmp	r3, #255	@ 0xff
 8007a66:	d025      	beq.n	8007ab4 <USBD_LL_DataInStage+0x15a>
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d122      	bne.n	8007ab4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d11c      	bne.n	8007ab4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007a7a:	7dfa      	ldrb	r2, [r7, #23]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	32ae      	adds	r2, #174	@ 0xae
 8007a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d014      	beq.n	8007ab4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007a8a:	7dfa      	ldrb	r2, [r7, #23]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007a92:	7dfa      	ldrb	r2, [r7, #23]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	32ae      	adds	r2, #174	@ 0xae
 8007a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	7afa      	ldrb	r2, [r7, #11]
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	4798      	blx	r3
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007aaa:	7dbb      	ldrb	r3, [r7, #22]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007ab0:	7dbb      	ldrb	r3, [r7, #22]
 8007ab2:	e000      	b.n	8007ab6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d014      	beq.n	8007b24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00e      	beq.n	8007b24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	6852      	ldr	r2, [r2, #4]
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	4611      	mov	r1, r2
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	4798      	blx	r3
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007b20:	2303      	movs	r3, #3
 8007b22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b24:	2340      	movs	r3, #64	@ 0x40
 8007b26:	2200      	movs	r2, #0
 8007b28:	2100      	movs	r1, #0
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 fc2f 	bl	800938e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2240      	movs	r2, #64	@ 0x40
 8007b3c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b40:	2340      	movs	r3, #64	@ 0x40
 8007b42:	2200      	movs	r2, #0
 8007b44:	2180      	movs	r1, #128	@ 0x80
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 fc21 	bl	800938e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2240      	movs	r2, #64	@ 0x40
 8007b56:	621a      	str	r2, [r3, #32]

  return ret;
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	78fa      	ldrb	r2, [r7, #3]
 8007b72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d006      	beq.n	8007ba4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2204      	movs	r2, #4
 8007ba8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	d106      	bne.n	8007bdc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b082      	sub	sp, #8
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d110      	bne.n	8007c20 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d005      	beq.n	8007c20 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	460b      	mov	r3, r1
 8007c34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	32ae      	adds	r2, #174	@ 0xae
 8007c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e01c      	b.n	8007c86 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d115      	bne.n	8007c84 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	32ae      	adds	r2, #174	@ 0xae
 8007c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00b      	beq.n	8007c84 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	32ae      	adds	r2, #174	@ 0xae
 8007c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	78fa      	ldrb	r2, [r7, #3]
 8007c7e:	4611      	mov	r1, r2
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	32ae      	adds	r2, #174	@ 0xae
 8007ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e01c      	b.n	8007cea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d115      	bne.n	8007ce8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	32ae      	adds	r2, #174	@ 0xae
 8007cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00b      	beq.n	8007ce8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	32ae      	adds	r2, #174	@ 0xae
 8007cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce0:	78fa      	ldrb	r2, [r7, #3]
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00e      	beq.n	8007d44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	6852      	ldr	r2, [r2, #4]
 8007d32:	b2d2      	uxtb	r2, r2
 8007d34:	4611      	mov	r1, r2
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007d40:	2303      	movs	r3, #3
 8007d42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007d5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007d74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b086      	sub	sp, #24
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	885b      	ldrh	r3, [r3, #2]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	7812      	ldrb	r2, [r2, #0]
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d91f      	bls.n	8007de8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007dae:	e013      	b.n	8007dd8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007db0:	f107 030a 	add.w	r3, r7, #10
 8007db4:	4619      	mov	r1, r3
 8007db6:	6978      	ldr	r0, [r7, #20]
 8007db8:	f000 f81b 	bl	8007df2 <USBD_GetNextDesc>
 8007dbc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	785b      	ldrb	r3, [r3, #1]
 8007dc2:	2b05      	cmp	r3, #5
 8007dc4:	d108      	bne.n	8007dd8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	789b      	ldrb	r3, [r3, #2]
 8007dce:	78fa      	ldrb	r2, [r7, #3]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d008      	beq.n	8007de6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	885b      	ldrh	r3, [r3, #2]
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	897b      	ldrh	r3, [r7, #10]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d8e5      	bhi.n	8007db0 <USBD_GetEpDesc+0x2e>
 8007de4:	e000      	b.n	8007de8 <USBD_GetEpDesc+0x66>
          break;
 8007de6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007de8:	693b      	ldr	r3, [r7, #16]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	7812      	ldrb	r2, [r2, #0]
 8007e08:	4413      	add	r3, r2
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	461a      	mov	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4413      	add	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b087      	sub	sp, #28
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007e48:	8a3b      	ldrh	r3, [r7, #16]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	b21a      	sxth	r2, r3
 8007e4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	b21b      	sxth	r3, r3
 8007e56:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007e58:	89fb      	ldrh	r3, [r7, #14]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
	...

08007e68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e7e:	2b40      	cmp	r3, #64	@ 0x40
 8007e80:	d005      	beq.n	8007e8e <USBD_StdDevReq+0x26>
 8007e82:	2b40      	cmp	r3, #64	@ 0x40
 8007e84:	d857      	bhi.n	8007f36 <USBD_StdDevReq+0xce>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00f      	beq.n	8007eaa <USBD_StdDevReq+0x42>
 8007e8a:	2b20      	cmp	r3, #32
 8007e8c:	d153      	bne.n	8007f36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	32ae      	adds	r2, #174	@ 0xae
 8007e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	4798      	blx	r3
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea8:	e04a      	b.n	8007f40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	2b09      	cmp	r3, #9
 8007eb0:	d83b      	bhi.n	8007f2a <USBD_StdDevReq+0xc2>
 8007eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb8 <USBD_StdDevReq+0x50>)
 8007eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb8:	08007f0d 	.word	0x08007f0d
 8007ebc:	08007f21 	.word	0x08007f21
 8007ec0:	08007f2b 	.word	0x08007f2b
 8007ec4:	08007f17 	.word	0x08007f17
 8007ec8:	08007f2b 	.word	0x08007f2b
 8007ecc:	08007eeb 	.word	0x08007eeb
 8007ed0:	08007ee1 	.word	0x08007ee1
 8007ed4:	08007f2b 	.word	0x08007f2b
 8007ed8:	08007f03 	.word	0x08007f03
 8007edc:	08007ef5 	.word	0x08007ef5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa3c 	bl	8008360 <USBD_GetDescriptor>
          break;
 8007ee8:	e024      	b.n	8007f34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fba1 	bl	8008634 <USBD_SetAddress>
          break;
 8007ef2:	e01f      	b.n	8007f34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fbe0 	bl	80086bc <USBD_SetConfig>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73fb      	strb	r3, [r7, #15]
          break;
 8007f00:	e018      	b.n	8007f34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fc83 	bl	8008810 <USBD_GetConfig>
          break;
 8007f0a:	e013      	b.n	8007f34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fcb4 	bl	800887c <USBD_GetStatus>
          break;
 8007f14:	e00e      	b.n	8007f34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fce3 	bl	80088e4 <USBD_SetFeature>
          break;
 8007f1e:	e009      	b.n	8007f34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fd07 	bl	8008936 <USBD_ClrFeature>
          break;
 8007f28:	e004      	b.n	8007f34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fd5e 	bl	80089ee <USBD_CtlError>
          break;
 8007f32:	bf00      	nop
      }
      break;
 8007f34:	e004      	b.n	8007f40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fd58 	bl	80089ee <USBD_CtlError>
      break;
 8007f3e:	bf00      	nop
  }

  return ret;
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop

08007f4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f62:	2b40      	cmp	r3, #64	@ 0x40
 8007f64:	d005      	beq.n	8007f72 <USBD_StdItfReq+0x26>
 8007f66:	2b40      	cmp	r3, #64	@ 0x40
 8007f68:	d852      	bhi.n	8008010 <USBD_StdItfReq+0xc4>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <USBD_StdItfReq+0x26>
 8007f6e:	2b20      	cmp	r3, #32
 8007f70:	d14e      	bne.n	8008010 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d840      	bhi.n	8008002 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	889b      	ldrh	r3, [r3, #4]
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d836      	bhi.n	8007ff8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	889b      	ldrh	r3, [r3, #4]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7ff fedb 	bl	8007d4e <USBD_CoreFindIF>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	2bff      	cmp	r3, #255	@ 0xff
 8007fa0:	d01d      	beq.n	8007fde <USBD_StdItfReq+0x92>
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d11a      	bne.n	8007fde <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007fa8:	7bba      	ldrb	r2, [r7, #14]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	32ae      	adds	r2, #174	@ 0xae
 8007fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00f      	beq.n	8007fd8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007fb8:	7bba      	ldrb	r2, [r7, #14]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007fc0:	7bba      	ldrb	r2, [r7, #14]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	32ae      	adds	r2, #174	@ 0xae
 8007fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007fd6:	e004      	b.n	8007fe2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007fdc:	e001      	b.n	8007fe2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	88db      	ldrh	r3, [r3, #6]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d110      	bne.n	800800c <USBD_StdItfReq+0xc0>
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10d      	bne.n	800800c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fdd3 	bl	8008b9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ff6:	e009      	b.n	800800c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fcf7 	bl	80089ee <USBD_CtlError>
          break;
 8008000:	e004      	b.n	800800c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fcf2 	bl	80089ee <USBD_CtlError>
          break;
 800800a:	e000      	b.n	800800e <USBD_StdItfReq+0xc2>
          break;
 800800c:	bf00      	nop
      }
      break;
 800800e:	e004      	b.n	800801a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fceb 	bl	80089ee <USBD_CtlError>
      break;
 8008018:	bf00      	nop
  }

  return ret;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	889b      	ldrh	r3, [r3, #4]
 8008036:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008040:	2b40      	cmp	r3, #64	@ 0x40
 8008042:	d007      	beq.n	8008054 <USBD_StdEPReq+0x30>
 8008044:	2b40      	cmp	r3, #64	@ 0x40
 8008046:	f200 817f 	bhi.w	8008348 <USBD_StdEPReq+0x324>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d02a      	beq.n	80080a4 <USBD_StdEPReq+0x80>
 800804e:	2b20      	cmp	r3, #32
 8008050:	f040 817a 	bne.w	8008348 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008054:	7bbb      	ldrb	r3, [r7, #14]
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7ff fe85 	bl	8007d68 <USBD_CoreFindEP>
 800805e:	4603      	mov	r3, r0
 8008060:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008062:	7b7b      	ldrb	r3, [r7, #13]
 8008064:	2bff      	cmp	r3, #255	@ 0xff
 8008066:	f000 8174 	beq.w	8008352 <USBD_StdEPReq+0x32e>
 800806a:	7b7b      	ldrb	r3, [r7, #13]
 800806c:	2b00      	cmp	r3, #0
 800806e:	f040 8170 	bne.w	8008352 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008072:	7b7a      	ldrb	r2, [r7, #13]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800807a:	7b7a      	ldrb	r2, [r7, #13]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	32ae      	adds	r2, #174	@ 0xae
 8008080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 8163 	beq.w	8008352 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800808c:	7b7a      	ldrb	r2, [r7, #13]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	32ae      	adds	r2, #174	@ 0xae
 8008092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	4798      	blx	r3
 800809e:	4603      	mov	r3, r0
 80080a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080a2:	e156      	b.n	8008352 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	785b      	ldrb	r3, [r3, #1]
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d008      	beq.n	80080be <USBD_StdEPReq+0x9a>
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	f300 8145 	bgt.w	800833c <USBD_StdEPReq+0x318>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 809b 	beq.w	80081ee <USBD_StdEPReq+0x1ca>
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d03c      	beq.n	8008136 <USBD_StdEPReq+0x112>
 80080bc:	e13e      	b.n	800833c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d002      	beq.n	80080d0 <USBD_StdEPReq+0xac>
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d016      	beq.n	80080fc <USBD_StdEPReq+0xd8>
 80080ce:	e02c      	b.n	800812a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00d      	beq.n	80080f2 <USBD_StdEPReq+0xce>
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	2b80      	cmp	r3, #128	@ 0x80
 80080da:	d00a      	beq.n	80080f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f001 f999 	bl	8009418 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080e6:	2180      	movs	r1, #128	@ 0x80
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 f995 	bl	8009418 <USBD_LL_StallEP>
 80080ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080f0:	e020      	b.n	8008134 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fc7a 	bl	80089ee <USBD_CtlError>
              break;
 80080fa:	e01b      	b.n	8008134 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	885b      	ldrh	r3, [r3, #2]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10e      	bne.n	8008122 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00b      	beq.n	8008122 <USBD_StdEPReq+0xfe>
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	2b80      	cmp	r3, #128	@ 0x80
 800810e:	d008      	beq.n	8008122 <USBD_StdEPReq+0xfe>
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	88db      	ldrh	r3, [r3, #6]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d104      	bne.n	8008122 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 f97b 	bl	8009418 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fd3a 	bl	8008b9c <USBD_CtlSendStatus>

              break;
 8008128:	e004      	b.n	8008134 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fc5e 	bl	80089ee <USBD_CtlError>
              break;
 8008132:	bf00      	nop
          }
          break;
 8008134:	e107      	b.n	8008346 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b02      	cmp	r3, #2
 8008140:	d002      	beq.n	8008148 <USBD_StdEPReq+0x124>
 8008142:	2b03      	cmp	r3, #3
 8008144:	d016      	beq.n	8008174 <USBD_StdEPReq+0x150>
 8008146:	e04b      	b.n	80081e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00d      	beq.n	800816a <USBD_StdEPReq+0x146>
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	2b80      	cmp	r3, #128	@ 0x80
 8008152:	d00a      	beq.n	800816a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 f95d 	bl	8009418 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800815e:	2180      	movs	r1, #128	@ 0x80
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 f959 	bl	8009418 <USBD_LL_StallEP>
 8008166:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008168:	e040      	b.n	80081ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fc3e 	bl	80089ee <USBD_CtlError>
              break;
 8008172:	e03b      	b.n	80081ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	885b      	ldrh	r3, [r3, #2]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d136      	bne.n	80081ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008182:	2b00      	cmp	r3, #0
 8008184:	d004      	beq.n	8008190 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 f963 	bl	8009456 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fd03 	bl	8008b9c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7ff fde4 	bl	8007d68 <USBD_CoreFindEP>
 80081a0:	4603      	mov	r3, r0
 80081a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081a4:	7b7b      	ldrb	r3, [r7, #13]
 80081a6:	2bff      	cmp	r3, #255	@ 0xff
 80081a8:	d01f      	beq.n	80081ea <USBD_StdEPReq+0x1c6>
 80081aa:	7b7b      	ldrb	r3, [r7, #13]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d11c      	bne.n	80081ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80081b0:	7b7a      	ldrb	r2, [r7, #13]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80081b8:	7b7a      	ldrb	r2, [r7, #13]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	32ae      	adds	r2, #174	@ 0xae
 80081be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d010      	beq.n	80081ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80081c8:	7b7a      	ldrb	r2, [r7, #13]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	32ae      	adds	r2, #174	@ 0xae
 80081ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3
 80081da:	4603      	mov	r3, r0
 80081dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80081de:	e004      	b.n	80081ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fc03 	bl	80089ee <USBD_CtlError>
              break;
 80081e8:	e000      	b.n	80081ec <USBD_StdEPReq+0x1c8>
              break;
 80081ea:	bf00      	nop
          }
          break;
 80081ec:	e0ab      	b.n	8008346 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d002      	beq.n	8008200 <USBD_StdEPReq+0x1dc>
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d032      	beq.n	8008264 <USBD_StdEPReq+0x240>
 80081fe:	e097      	b.n	8008330 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d007      	beq.n	8008216 <USBD_StdEPReq+0x1f2>
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	2b80      	cmp	r3, #128	@ 0x80
 800820a:	d004      	beq.n	8008216 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fbed 	bl	80089ee <USBD_CtlError>
                break;
 8008214:	e091      	b.n	800833a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008216:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800821a:	2b00      	cmp	r3, #0
 800821c:	da0b      	bge.n	8008236 <USBD_StdEPReq+0x212>
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008224:	4613      	mov	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	3310      	adds	r3, #16
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	4413      	add	r3, r2
 8008232:	3304      	adds	r3, #4
 8008234:	e00b      	b.n	800824e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	4413      	add	r3, r2
 800824c:	3304      	adds	r3, #4
 800824e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2202      	movs	r2, #2
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fc43 	bl	8008ae8 <USBD_CtlSendData>
              break;
 8008262:	e06a      	b.n	800833a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008268:	2b00      	cmp	r3, #0
 800826a:	da11      	bge.n	8008290 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	f003 020f 	and.w	r2, r3, #15
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	4613      	mov	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	440b      	add	r3, r1
 800827e:	3324      	adds	r3, #36	@ 0x24
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d117      	bne.n	80082b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fbb0 	bl	80089ee <USBD_CtlError>
                  break;
 800828e:	e054      	b.n	800833a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	f003 020f 	and.w	r2, r3, #15
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	4613      	mov	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	440b      	add	r3, r1
 80082a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d104      	bne.n	80082b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fb9d 	bl	80089ee <USBD_CtlError>
                  break;
 80082b4:	e041      	b.n	800833a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	da0b      	bge.n	80082d6 <USBD_StdEPReq+0x2b2>
 80082be:	7bbb      	ldrb	r3, [r7, #14]
 80082c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082c4:	4613      	mov	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	3310      	adds	r3, #16
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	4413      	add	r3, r2
 80082d2:	3304      	adds	r3, #4
 80082d4:	e00b      	b.n	80082ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082dc:	4613      	mov	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	4413      	add	r3, r2
 80082ec:	3304      	adds	r3, #4
 80082ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80082f0:	7bbb      	ldrb	r3, [r7, #14]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <USBD_StdEPReq+0x2d8>
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	2b80      	cmp	r3, #128	@ 0x80
 80082fa:	d103      	bne.n	8008304 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2200      	movs	r2, #0
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	e00e      	b.n	8008322 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 f8c3 	bl	8009494 <USBD_LL_IsStallEP>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d003      	beq.n	800831c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2201      	movs	r2, #1
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	e002      	b.n	8008322 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2200      	movs	r2, #0
 8008320:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2202      	movs	r2, #2
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fbdd 	bl	8008ae8 <USBD_CtlSendData>
              break;
 800832e:	e004      	b.n	800833a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fb5b 	bl	80089ee <USBD_CtlError>
              break;
 8008338:	bf00      	nop
          }
          break;
 800833a:	e004      	b.n	8008346 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fb55 	bl	80089ee <USBD_CtlError>
          break;
 8008344:	bf00      	nop
      }
      break;
 8008346:	e005      	b.n	8008354 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fb4f 	bl	80089ee <USBD_CtlError>
      break;
 8008350:	e000      	b.n	8008354 <USBD_StdEPReq+0x330>
      break;
 8008352:	bf00      	nop
  }

  return ret;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800836e:	2300      	movs	r3, #0
 8008370:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	885b      	ldrh	r3, [r3, #2]
 800837a:	0a1b      	lsrs	r3, r3, #8
 800837c:	b29b      	uxth	r3, r3
 800837e:	3b01      	subs	r3, #1
 8008380:	2b06      	cmp	r3, #6
 8008382:	f200 8128 	bhi.w	80085d6 <USBD_GetDescriptor+0x276>
 8008386:	a201      	add	r2, pc, #4	@ (adr r2, 800838c <USBD_GetDescriptor+0x2c>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083a9 	.word	0x080083a9
 8008390:	080083c1 	.word	0x080083c1
 8008394:	08008401 	.word	0x08008401
 8008398:	080085d7 	.word	0x080085d7
 800839c:	080085d7 	.word	0x080085d7
 80083a0:	08008577 	.word	0x08008577
 80083a4:	080085a3 	.word	0x080085a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	7c12      	ldrb	r2, [r2, #16]
 80083b4:	f107 0108 	add.w	r1, r7, #8
 80083b8:	4610      	mov	r0, r2
 80083ba:	4798      	blx	r3
 80083bc:	60f8      	str	r0, [r7, #12]
      break;
 80083be:	e112      	b.n	80085e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	7c1b      	ldrb	r3, [r3, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10d      	bne.n	80083e4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d0:	f107 0208 	add.w	r2, r7, #8
 80083d4:	4610      	mov	r0, r2
 80083d6:	4798      	blx	r3
 80083d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	3301      	adds	r3, #1
 80083de:	2202      	movs	r2, #2
 80083e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80083e2:	e100      	b.n	80085e6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ec:	f107 0208 	add.w	r2, r7, #8
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
 80083f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3301      	adds	r3, #1
 80083fa:	2202      	movs	r2, #2
 80083fc:	701a      	strb	r2, [r3, #0]
      break;
 80083fe:	e0f2      	b.n	80085e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	885b      	ldrh	r3, [r3, #2]
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b05      	cmp	r3, #5
 8008408:	f200 80ac 	bhi.w	8008564 <USBD_GetDescriptor+0x204>
 800840c:	a201      	add	r2, pc, #4	@ (adr r2, 8008414 <USBD_GetDescriptor+0xb4>)
 800840e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008412:	bf00      	nop
 8008414:	0800842d 	.word	0x0800842d
 8008418:	08008461 	.word	0x08008461
 800841c:	08008495 	.word	0x08008495
 8008420:	080084c9 	.word	0x080084c9
 8008424:	080084fd 	.word	0x080084fd
 8008428:	08008531 	.word	0x08008531
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00b      	beq.n	8008450 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	7c12      	ldrb	r2, [r2, #16]
 8008444:	f107 0108 	add.w	r1, r7, #8
 8008448:	4610      	mov	r0, r2
 800844a:	4798      	blx	r3
 800844c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800844e:	e091      	b.n	8008574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 facb 	bl	80089ee <USBD_CtlError>
            err++;
 8008458:	7afb      	ldrb	r3, [r7, #11]
 800845a:	3301      	adds	r3, #1
 800845c:	72fb      	strb	r3, [r7, #11]
          break;
 800845e:	e089      	b.n	8008574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00b      	beq.n	8008484 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	7c12      	ldrb	r2, [r2, #16]
 8008478:	f107 0108 	add.w	r1, r7, #8
 800847c:	4610      	mov	r0, r2
 800847e:	4798      	blx	r3
 8008480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008482:	e077      	b.n	8008574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fab1 	bl	80089ee <USBD_CtlError>
            err++;
 800848c:	7afb      	ldrb	r3, [r7, #11]
 800848e:	3301      	adds	r3, #1
 8008490:	72fb      	strb	r3, [r7, #11]
          break;
 8008492:	e06f      	b.n	8008574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00b      	beq.n	80084b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	7c12      	ldrb	r2, [r2, #16]
 80084ac:	f107 0108 	add.w	r1, r7, #8
 80084b0:	4610      	mov	r0, r2
 80084b2:	4798      	blx	r3
 80084b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084b6:	e05d      	b.n	8008574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fa97 	bl	80089ee <USBD_CtlError>
            err++;
 80084c0:	7afb      	ldrb	r3, [r7, #11]
 80084c2:	3301      	adds	r3, #1
 80084c4:	72fb      	strb	r3, [r7, #11]
          break;
 80084c6:	e055      	b.n	8008574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	7c12      	ldrb	r2, [r2, #16]
 80084e0:	f107 0108 	add.w	r1, r7, #8
 80084e4:	4610      	mov	r0, r2
 80084e6:	4798      	blx	r3
 80084e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ea:	e043      	b.n	8008574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fa7d 	bl	80089ee <USBD_CtlError>
            err++;
 80084f4:	7afb      	ldrb	r3, [r7, #11]
 80084f6:	3301      	adds	r3, #1
 80084f8:	72fb      	strb	r3, [r7, #11]
          break;
 80084fa:	e03b      	b.n	8008574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	7c12      	ldrb	r2, [r2, #16]
 8008514:	f107 0108 	add.w	r1, r7, #8
 8008518:	4610      	mov	r0, r2
 800851a:	4798      	blx	r3
 800851c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800851e:	e029      	b.n	8008574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fa63 	bl	80089ee <USBD_CtlError>
            err++;
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	3301      	adds	r3, #1
 800852c:	72fb      	strb	r3, [r7, #11]
          break;
 800852e:	e021      	b.n	8008574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	7c12      	ldrb	r2, [r2, #16]
 8008548:	f107 0108 	add.w	r1, r7, #8
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008552:	e00f      	b.n	8008574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa49 	bl	80089ee <USBD_CtlError>
            err++;
 800855c:	7afb      	ldrb	r3, [r7, #11]
 800855e:	3301      	adds	r3, #1
 8008560:	72fb      	strb	r3, [r7, #11]
          break;
 8008562:	e007      	b.n	8008574 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fa41 	bl	80089ee <USBD_CtlError>
          err++;
 800856c:	7afb      	ldrb	r3, [r7, #11]
 800856e:	3301      	adds	r3, #1
 8008570:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008572:	bf00      	nop
      }
      break;
 8008574:	e037      	b.n	80085e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	7c1b      	ldrb	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d109      	bne.n	8008592 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008586:	f107 0208 	add.w	r2, r7, #8
 800858a:	4610      	mov	r0, r2
 800858c:	4798      	blx	r3
 800858e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008590:	e029      	b.n	80085e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fa2a 	bl	80089ee <USBD_CtlError>
        err++;
 800859a:	7afb      	ldrb	r3, [r7, #11]
 800859c:	3301      	adds	r3, #1
 800859e:	72fb      	strb	r3, [r7, #11]
      break;
 80085a0:	e021      	b.n	80085e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	7c1b      	ldrb	r3, [r3, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10d      	bne.n	80085c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b2:	f107 0208 	add.w	r2, r7, #8
 80085b6:	4610      	mov	r0, r2
 80085b8:	4798      	blx	r3
 80085ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3301      	adds	r3, #1
 80085c0:	2207      	movs	r2, #7
 80085c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085c4:	e00f      	b.n	80085e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fa10 	bl	80089ee <USBD_CtlError>
        err++;
 80085ce:	7afb      	ldrb	r3, [r7, #11]
 80085d0:	3301      	adds	r3, #1
 80085d2:	72fb      	strb	r3, [r7, #11]
      break;
 80085d4:	e007      	b.n	80085e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fa08 	bl	80089ee <USBD_CtlError>
      err++;
 80085de:	7afb      	ldrb	r3, [r7, #11]
 80085e0:	3301      	adds	r3, #1
 80085e2:	72fb      	strb	r3, [r7, #11]
      break;
 80085e4:	bf00      	nop
  }

  if (err != 0U)
 80085e6:	7afb      	ldrb	r3, [r7, #11]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d11e      	bne.n	800862a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	88db      	ldrh	r3, [r3, #6]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d016      	beq.n	8008622 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80085f4:	893b      	ldrh	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00e      	beq.n	8008618 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	88da      	ldrh	r2, [r3, #6]
 80085fe:	893b      	ldrh	r3, [r7, #8]
 8008600:	4293      	cmp	r3, r2
 8008602:	bf28      	it	cs
 8008604:	4613      	movcs	r3, r2
 8008606:	b29b      	uxth	r3, r3
 8008608:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800860a:	893b      	ldrh	r3, [r7, #8]
 800860c:	461a      	mov	r2, r3
 800860e:	68f9      	ldr	r1, [r7, #12]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fa69 	bl	8008ae8 <USBD_CtlSendData>
 8008616:	e009      	b.n	800862c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f9e7 	bl	80089ee <USBD_CtlError>
 8008620:	e004      	b.n	800862c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 faba 	bl	8008b9c <USBD_CtlSendStatus>
 8008628:	e000      	b.n	800862c <USBD_GetDescriptor+0x2cc>
    return;
 800862a:	bf00      	nop
  }
}
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop

08008634 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	889b      	ldrh	r3, [r3, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d131      	bne.n	80086aa <USBD_SetAddress+0x76>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	88db      	ldrh	r3, [r3, #6]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d12d      	bne.n	80086aa <USBD_SetAddress+0x76>
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	885b      	ldrh	r3, [r3, #2]
 8008652:	2b7f      	cmp	r3, #127	@ 0x7f
 8008654:	d829      	bhi.n	80086aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	885b      	ldrh	r3, [r3, #2]
 800865a:	b2db      	uxtb	r3, r3
 800865c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008660:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b03      	cmp	r3, #3
 800866c:	d104      	bne.n	8008678 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f9bc 	bl	80089ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008676:	e01d      	b.n	80086b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	7bfa      	ldrb	r2, [r7, #15]
 800867c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 ff31 	bl	80094ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa86 	bl	8008b9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d004      	beq.n	80086a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2202      	movs	r2, #2
 800869a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800869e:	e009      	b.n	80086b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a8:	e004      	b.n	80086b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f99e 	bl	80089ee <USBD_CtlError>
  }
}
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	885b      	ldrh	r3, [r3, #2]
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	4b4e      	ldr	r3, [pc, #312]	@ (800880c <USBD_SetConfig+0x150>)
 80086d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80086d4:	4b4d      	ldr	r3, [pc, #308]	@ (800880c <USBD_SetConfig+0x150>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d905      	bls.n	80086e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f985 	bl	80089ee <USBD_CtlError>
    return USBD_FAIL;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e08c      	b.n	8008802 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d002      	beq.n	80086fa <USBD_SetConfig+0x3e>
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d029      	beq.n	800874c <USBD_SetConfig+0x90>
 80086f8:	e075      	b.n	80087e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80086fa:	4b44      	ldr	r3, [pc, #272]	@ (800880c <USBD_SetConfig+0x150>)
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d020      	beq.n	8008744 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008702:	4b42      	ldr	r3, [pc, #264]	@ (800880c <USBD_SetConfig+0x150>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800870c:	4b3f      	ldr	r3, [pc, #252]	@ (800880c <USBD_SetConfig+0x150>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7fe ffe3 	bl	80076de <USBD_SetClassConfig>
 8008718:	4603      	mov	r3, r0
 800871a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800871c:	7bfb      	ldrb	r3, [r7, #15]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d008      	beq.n	8008734 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f962 	bl	80089ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2202      	movs	r2, #2
 800872e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008732:	e065      	b.n	8008800 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fa31 	bl	8008b9c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2203      	movs	r2, #3
 800873e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008742:	e05d      	b.n	8008800 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fa29 	bl	8008b9c <USBD_CtlSendStatus>
      break;
 800874a:	e059      	b.n	8008800 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800874c:	4b2f      	ldr	r3, [pc, #188]	@ (800880c <USBD_SetConfig+0x150>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d112      	bne.n	800877a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800875c:	4b2b      	ldr	r3, [pc, #172]	@ (800880c <USBD_SetConfig+0x150>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	461a      	mov	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008766:	4b29      	ldr	r3, [pc, #164]	@ (800880c <USBD_SetConfig+0x150>)
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7fe ffd2 	bl	8007716 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fa12 	bl	8008b9c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008778:	e042      	b.n	8008800 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800877a:	4b24      	ldr	r3, [pc, #144]	@ (800880c <USBD_SetConfig+0x150>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	429a      	cmp	r2, r3
 8008786:	d02a      	beq.n	80087de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7fe ffc0 	bl	8007716 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008796:	4b1d      	ldr	r3, [pc, #116]	@ (800880c <USBD_SetConfig+0x150>)
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087a0:	4b1a      	ldr	r3, [pc, #104]	@ (800880c <USBD_SetConfig+0x150>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7fe ff99 	bl	80076de <USBD_SetClassConfig>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00f      	beq.n	80087d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f918 	bl	80089ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7fe ffa5 	bl	8007716 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80087d4:	e014      	b.n	8008800 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f9e0 	bl	8008b9c <USBD_CtlSendStatus>
      break;
 80087dc:	e010      	b.n	8008800 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f9dc 	bl	8008b9c <USBD_CtlSendStatus>
      break;
 80087e4:	e00c      	b.n	8008800 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f900 	bl	80089ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087ee:	4b07      	ldr	r3, [pc, #28]	@ (800880c <USBD_SetConfig+0x150>)
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7fe ff8e 	bl	8007716 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80087fa:	2303      	movs	r3, #3
 80087fc:	73fb      	strb	r3, [r7, #15]
      break;
 80087fe:	bf00      	nop
  }

  return ret;
 8008800:	7bfb      	ldrb	r3, [r7, #15]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	20000264 	.word	0x20000264

08008810 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	88db      	ldrh	r3, [r3, #6]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d004      	beq.n	800882c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f8e2 	bl	80089ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800882a:	e023      	b.n	8008874 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b02      	cmp	r3, #2
 8008836:	dc02      	bgt.n	800883e <USBD_GetConfig+0x2e>
 8008838:	2b00      	cmp	r3, #0
 800883a:	dc03      	bgt.n	8008844 <USBD_GetConfig+0x34>
 800883c:	e015      	b.n	800886a <USBD_GetConfig+0x5a>
 800883e:	2b03      	cmp	r3, #3
 8008840:	d00b      	beq.n	800885a <USBD_GetConfig+0x4a>
 8008842:	e012      	b.n	800886a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	3308      	adds	r3, #8
 800884e:	2201      	movs	r2, #1
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f948 	bl	8008ae8 <USBD_CtlSendData>
        break;
 8008858:	e00c      	b.n	8008874 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	3304      	adds	r3, #4
 800885e:	2201      	movs	r2, #1
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f940 	bl	8008ae8 <USBD_CtlSendData>
        break;
 8008868:	e004      	b.n	8008874 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f8be 	bl	80089ee <USBD_CtlError>
        break;
 8008872:	bf00      	nop
}
 8008874:	bf00      	nop
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800888c:	b2db      	uxtb	r3, r3
 800888e:	3b01      	subs	r3, #1
 8008890:	2b02      	cmp	r3, #2
 8008892:	d81e      	bhi.n	80088d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	88db      	ldrh	r3, [r3, #6]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d004      	beq.n	80088a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f8a5 	bl	80089ee <USBD_CtlError>
        break;
 80088a4:	e01a      	b.n	80088dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d005      	beq.n	80088c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	f043 0202 	orr.w	r2, r3, #2
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	330c      	adds	r3, #12
 80088c6:	2202      	movs	r2, #2
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f90c 	bl	8008ae8 <USBD_CtlSendData>
      break;
 80088d0:	e004      	b.n	80088dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f88a 	bl	80089ee <USBD_CtlError>
      break;
 80088da:	bf00      	nop
  }
}
 80088dc:	bf00      	nop
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	885b      	ldrh	r3, [r3, #2]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d107      	bne.n	8008906 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f94c 	bl	8008b9c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008904:	e013      	b.n	800892e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	885b      	ldrh	r3, [r3, #2]
 800890a:	2b02      	cmp	r3, #2
 800890c:	d10b      	bne.n	8008926 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	889b      	ldrh	r3, [r3, #4]
 8008912:	0a1b      	lsrs	r3, r3, #8
 8008914:	b29b      	uxth	r3, r3
 8008916:	b2da      	uxtb	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f93c 	bl	8008b9c <USBD_CtlSendStatus>
}
 8008924:	e003      	b.n	800892e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f860 	bl	80089ee <USBD_CtlError>
}
 800892e:	bf00      	nop
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008946:	b2db      	uxtb	r3, r3
 8008948:	3b01      	subs	r3, #1
 800894a:	2b02      	cmp	r3, #2
 800894c:	d80b      	bhi.n	8008966 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	885b      	ldrh	r3, [r3, #2]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d10c      	bne.n	8008970 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f91c 	bl	8008b9c <USBD_CtlSendStatus>
      }
      break;
 8008964:	e004      	b.n	8008970 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f840 	bl	80089ee <USBD_CtlError>
      break;
 800896e:	e000      	b.n	8008972 <USBD_ClrFeature+0x3c>
      break;
 8008970:	bf00      	nop
  }
}
 8008972:	bf00      	nop
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b084      	sub	sp, #16
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	781a      	ldrb	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	3301      	adds	r3, #1
 8008994:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	781a      	ldrb	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3301      	adds	r3, #1
 80089a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f7ff fa40 	bl	8007e2a <SWAPBYTE>
 80089aa:	4603      	mov	r3, r0
 80089ac:	461a      	mov	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	3301      	adds	r3, #1
 80089b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3301      	adds	r3, #1
 80089bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f7ff fa33 	bl	8007e2a <SWAPBYTE>
 80089c4:	4603      	mov	r3, r0
 80089c6:	461a      	mov	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	3301      	adds	r3, #1
 80089d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3301      	adds	r3, #1
 80089d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f7ff fa26 	bl	8007e2a <SWAPBYTE>
 80089de:	4603      	mov	r3, r0
 80089e0:	461a      	mov	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	80da      	strh	r2, [r3, #6]
}
 80089e6:	bf00      	nop
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80089f8:	2180      	movs	r1, #128	@ 0x80
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fd0c 	bl	8009418 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a00:	2100      	movs	r1, #0
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fd08 	bl	8009418 <USBD_LL_StallEP>
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d042      	beq.n	8008aac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008a2a:	6938      	ldr	r0, [r7, #16]
 8008a2c:	f000 f842 	bl	8008ab4 <USBD_GetLen>
 8008a30:	4603      	mov	r3, r0
 8008a32:	3301      	adds	r3, #1
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a3a:	d808      	bhi.n	8008a4e <USBD_GetString+0x3e>
 8008a3c:	6938      	ldr	r0, [r7, #16]
 8008a3e:	f000 f839 	bl	8008ab4 <USBD_GetLen>
 8008a42:	4603      	mov	r3, r0
 8008a44:	3301      	adds	r3, #1
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	e001      	b.n	8008a52 <USBD_GetString+0x42>
 8008a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a56:	7dfb      	ldrb	r3, [r7, #23]
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	7812      	ldrb	r2, [r2, #0]
 8008a60:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
 8008a64:	3301      	adds	r3, #1
 8008a66:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	2203      	movs	r2, #3
 8008a70:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a72:	7dfb      	ldrb	r3, [r7, #23]
 8008a74:	3301      	adds	r3, #1
 8008a76:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a78:	e013      	b.n	8008aa2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008a7a:	7dfb      	ldrb	r3, [r7, #23]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	4413      	add	r3, r2
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	7812      	ldrb	r2, [r2, #0]
 8008a84:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	613b      	str	r3, [r7, #16]
    idx++;
 8008a8c:	7dfb      	ldrb	r3, [r7, #23]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008a92:	7dfb      	ldrb	r3, [r7, #23]
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	4413      	add	r3, r2
 8008a98:	2200      	movs	r2, #0
 8008a9a:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a9c:	7dfb      	ldrb	r3, [r7, #23]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1e7      	bne.n	8008a7a <USBD_GetString+0x6a>
 8008aaa:	e000      	b.n	8008aae <USBD_GetString+0x9e>
    return;
 8008aac:	bf00      	nop
  }
}
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ac4:	e005      	b.n	8008ad2 <USBD_GetLen+0x1e>
  {
    len++;
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1f5      	bne.n	8008ac6 <USBD_GetLen+0x12>
  }

  return len;
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 fd0b 	bl	800952a <USBD_LL_Transmit>

  return USBD_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	2100      	movs	r1, #0
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 fcfa 	bl	800952a <USBD_LL_Transmit>

  return USBD_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2203      	movs	r2, #3
 8008b50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	2100      	movs	r1, #0
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 fcfe 	bl	800956c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	60f8      	str	r0, [r7, #12]
 8008b82:	60b9      	str	r1, [r7, #8]
 8008b84:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f000 fced 	bl	800956c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2204      	movs	r2, #4
 8008ba8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bac:	2300      	movs	r3, #0
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fcb9 	bl	800952a <USBD_LL_Transmit>

  return USBD_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2205      	movs	r2, #5
 8008bce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fcc7 	bl	800956c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008bec:	2200      	movs	r2, #0
 8008bee:	4912      	ldr	r1, [pc, #72]	@ (8008c38 <MX_USB_DEVICE_Init+0x50>)
 8008bf0:	4812      	ldr	r0, [pc, #72]	@ (8008c3c <MX_USB_DEVICE_Init+0x54>)
 8008bf2:	f7fe fcf7 	bl	80075e4 <USBD_Init>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bfc:	f7f7 ff12 	bl	8000a24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c00:	490f      	ldr	r1, [pc, #60]	@ (8008c40 <MX_USB_DEVICE_Init+0x58>)
 8008c02:	480e      	ldr	r0, [pc, #56]	@ (8008c3c <MX_USB_DEVICE_Init+0x54>)
 8008c04:	f7fe fd1e 	bl	8007644 <USBD_RegisterClass>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c0e:	f7f7 ff09 	bl	8000a24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c12:	490c      	ldr	r1, [pc, #48]	@ (8008c44 <MX_USB_DEVICE_Init+0x5c>)
 8008c14:	4809      	ldr	r0, [pc, #36]	@ (8008c3c <MX_USB_DEVICE_Init+0x54>)
 8008c16:	f7fe fc15 	bl	8007444 <USBD_CDC_RegisterInterface>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c20:	f7f7 ff00 	bl	8000a24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c24:	4805      	ldr	r0, [pc, #20]	@ (8008c3c <MX_USB_DEVICE_Init+0x54>)
 8008c26:	f7fe fd43 	bl	80076b0 <USBD_Start>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c30:	f7f7 fef8 	bl	8000a24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c34:	bf00      	nop
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	200000ac 	.word	0x200000ac
 8008c3c:	20000268 	.word	0x20000268
 8008c40:	20000018 	.word	0x20000018
 8008c44:	20000098 	.word	0x20000098

08008c48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	4905      	ldr	r1, [pc, #20]	@ (8008c64 <CDC_Init_FS+0x1c>)
 8008c50:	4805      	ldr	r0, [pc, #20]	@ (8008c68 <CDC_Init_FS+0x20>)
 8008c52:	f7fe fc11 	bl	8007478 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c56:	4905      	ldr	r1, [pc, #20]	@ (8008c6c <CDC_Init_FS+0x24>)
 8008c58:	4803      	ldr	r0, [pc, #12]	@ (8008c68 <CDC_Init_FS+0x20>)
 8008c5a:	f7fe fc2f 	bl	80074bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20000d44 	.word	0x20000d44
 8008c68:	20000268 	.word	0x20000268
 8008c6c:	20000544 	.word	0x20000544

08008c70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c70:	b480      	push	{r7}
 8008c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	4603      	mov	r3, r0
 8008c88:	6039      	str	r1, [r7, #0]
 8008c8a:	71fb      	strb	r3, [r7, #7]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c90:	79fb      	ldrb	r3, [r7, #7]
 8008c92:	2b23      	cmp	r3, #35	@ 0x23
 8008c94:	d84a      	bhi.n	8008d2c <CDC_Control_FS+0xac>
 8008c96:	a201      	add	r2, pc, #4	@ (adr r2, 8008c9c <CDC_Control_FS+0x1c>)
 8008c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9c:	08008d2d 	.word	0x08008d2d
 8008ca0:	08008d2d 	.word	0x08008d2d
 8008ca4:	08008d2d 	.word	0x08008d2d
 8008ca8:	08008d2d 	.word	0x08008d2d
 8008cac:	08008d2d 	.word	0x08008d2d
 8008cb0:	08008d2d 	.word	0x08008d2d
 8008cb4:	08008d2d 	.word	0x08008d2d
 8008cb8:	08008d2d 	.word	0x08008d2d
 8008cbc:	08008d2d 	.word	0x08008d2d
 8008cc0:	08008d2d 	.word	0x08008d2d
 8008cc4:	08008d2d 	.word	0x08008d2d
 8008cc8:	08008d2d 	.word	0x08008d2d
 8008ccc:	08008d2d 	.word	0x08008d2d
 8008cd0:	08008d2d 	.word	0x08008d2d
 8008cd4:	08008d2d 	.word	0x08008d2d
 8008cd8:	08008d2d 	.word	0x08008d2d
 8008cdc:	08008d2d 	.word	0x08008d2d
 8008ce0:	08008d2d 	.word	0x08008d2d
 8008ce4:	08008d2d 	.word	0x08008d2d
 8008ce8:	08008d2d 	.word	0x08008d2d
 8008cec:	08008d2d 	.word	0x08008d2d
 8008cf0:	08008d2d 	.word	0x08008d2d
 8008cf4:	08008d2d 	.word	0x08008d2d
 8008cf8:	08008d2d 	.word	0x08008d2d
 8008cfc:	08008d2d 	.word	0x08008d2d
 8008d00:	08008d2d 	.word	0x08008d2d
 8008d04:	08008d2d 	.word	0x08008d2d
 8008d08:	08008d2d 	.word	0x08008d2d
 8008d0c:	08008d2d 	.word	0x08008d2d
 8008d10:	08008d2d 	.word	0x08008d2d
 8008d14:	08008d2d 	.word	0x08008d2d
 8008d18:	08008d2d 	.word	0x08008d2d
 8008d1c:	08008d2d 	.word	0x08008d2d
 8008d20:	08008d2d 	.word	0x08008d2d
 8008d24:	08008d2d 	.word	0x08008d2d
 8008d28:	08008d2d 	.word	0x08008d2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d2c:	bf00      	nop
  }

  return (USBD_OK);
 8008d2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d46:	6879      	ldr	r1, [r7, #4]
 8008d48:	4805      	ldr	r0, [pc, #20]	@ (8008d60 <CDC_Receive_FS+0x24>)
 8008d4a:	f7fe fbb7 	bl	80074bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d4e:	4804      	ldr	r0, [pc, #16]	@ (8008d60 <CDC_Receive_FS+0x24>)
 8008d50:	f7fe fc12 	bl	8007578 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20000268 	.word	0x20000268

08008d64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008d74:	4b0d      	ldr	r3, [pc, #52]	@ (8008dac <CDC_Transmit_FS+0x48>)
 8008d76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e00b      	b.n	8008da2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d8a:	887b      	ldrh	r3, [r7, #2]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	4806      	ldr	r0, [pc, #24]	@ (8008dac <CDC_Transmit_FS+0x48>)
 8008d92:	f7fe fb71 	bl	8007478 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d96:	4805      	ldr	r0, [pc, #20]	@ (8008dac <CDC_Transmit_FS+0x48>)
 8008d98:	f7fe fbae 	bl	80074f8 <USBD_CDC_TransmitPacket>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20000268 	.word	0x20000268

08008db0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008dc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	371c      	adds	r7, #28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <CDC_Printf>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Printf(const char *fmt, ...)
{
 8008dd2:	b40f      	push	{r0, r1, r2, r3}
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b0a2      	sub	sp, #136	@ 0x88
 8008dd8:	af00      	add	r7, sp, #0
    char tmp[128];
    va_list ap;
    va_start(ap, fmt);
 8008dda:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8008dde:	603b      	str	r3, [r7, #0]
    int n = vsnprintf(tmp, sizeof(tmp), fmt, ap);
 8008de0:	1d38      	adds	r0, r7, #4
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8008de8:	2180      	movs	r1, #128	@ 0x80
 8008dea:	f000 fc97 	bl	800971c <vsniprintf>
 8008dee:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    va_end(ap);
    if (n > 0) {
 8008df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	dd0e      	ble.n	8008e18 <CDC_Printf+0x46>
        if (n > sizeof(tmp)) n = sizeof(tmp);
 8008dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008dfe:	2b80      	cmp	r3, #128	@ 0x80
 8008e00:	d902      	bls.n	8008e08 <CDC_Printf+0x36>
 8008e02:	2380      	movs	r3, #128	@ 0x80
 8008e04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        CDC_Transmit_FS((uint8_t*)tmp, (uint16_t)n);
 8008e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	1d3b      	adds	r3, r7, #4
 8008e10:	4611      	mov	r1, r2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff ffa6 	bl	8008d64 <CDC_Transmit_FS>
    }
}
 8008e18:	bf00      	nop
 8008e1a:	3788      	adds	r7, #136	@ 0x88
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e22:	b004      	add	sp, #16
 8008e24:	4770      	bx	lr
	...

08008e28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	4603      	mov	r3, r0
 8008e30:	6039      	str	r1, [r7, #0]
 8008e32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	2212      	movs	r2, #18
 8008e38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e3a:	4b03      	ldr	r3, [pc, #12]	@ (8008e48 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	200000c8 	.word	0x200000c8

08008e4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	6039      	str	r1, [r7, #0]
 8008e56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2204      	movs	r2, #4
 8008e5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e5e:	4b03      	ldr	r3, [pc, #12]	@ (8008e6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	200000dc 	.word	0x200000dc

08008e70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	6039      	str	r1, [r7, #0]
 8008e7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d105      	bne.n	8008e8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	4907      	ldr	r1, [pc, #28]	@ (8008ea4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e86:	4808      	ldr	r0, [pc, #32]	@ (8008ea8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e88:	f7ff fdc2 	bl	8008a10 <USBD_GetString>
 8008e8c:	e004      	b.n	8008e98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	4904      	ldr	r1, [pc, #16]	@ (8008ea4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e92:	4805      	ldr	r0, [pc, #20]	@ (8008ea8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e94:	f7ff fdbc 	bl	8008a10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e98:	4b02      	ldr	r3, [pc, #8]	@ (8008ea4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20001544 	.word	0x20001544
 8008ea8:	0800a098 	.word	0x0800a098

08008eac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	6039      	str	r1, [r7, #0]
 8008eb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	4904      	ldr	r1, [pc, #16]	@ (8008ecc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ebc:	4804      	ldr	r0, [pc, #16]	@ (8008ed0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ebe:	f7ff fda7 	bl	8008a10 <USBD_GetString>
  return USBD_StrDesc;
 8008ec2:	4b02      	ldr	r3, [pc, #8]	@ (8008ecc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	20001544 	.word	0x20001544
 8008ed0:	0800a0b0 	.word	0x0800a0b0

08008ed4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	6039      	str	r1, [r7, #0]
 8008ede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	221a      	movs	r2, #26
 8008ee4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ee6:	f000 f843 	bl	8008f70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008eea:	4b02      	ldr	r3, [pc, #8]	@ (8008ef4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	200000e0 	.word	0x200000e0

08008ef8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	6039      	str	r1, [r7, #0]
 8008f02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f04:	79fb      	ldrb	r3, [r7, #7]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d105      	bne.n	8008f16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	4907      	ldr	r1, [pc, #28]	@ (8008f2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f0e:	4808      	ldr	r0, [pc, #32]	@ (8008f30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f10:	f7ff fd7e 	bl	8008a10 <USBD_GetString>
 8008f14:	e004      	b.n	8008f20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	4904      	ldr	r1, [pc, #16]	@ (8008f2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f1a:	4805      	ldr	r0, [pc, #20]	@ (8008f30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f1c:	f7ff fd78 	bl	8008a10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f20:	4b02      	ldr	r3, [pc, #8]	@ (8008f2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20001544 	.word	0x20001544
 8008f30:	0800a0c4 	.word	0x0800a0c4

08008f34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	6039      	str	r1, [r7, #0]
 8008f3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f40:	79fb      	ldrb	r3, [r7, #7]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d105      	bne.n	8008f52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	4907      	ldr	r1, [pc, #28]	@ (8008f68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f4a:	4808      	ldr	r0, [pc, #32]	@ (8008f6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f4c:	f7ff fd60 	bl	8008a10 <USBD_GetString>
 8008f50:	e004      	b.n	8008f5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	4904      	ldr	r1, [pc, #16]	@ (8008f68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f56:	4805      	ldr	r0, [pc, #20]	@ (8008f6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f58:	f7ff fd5a 	bl	8008a10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f5c:	4b02      	ldr	r3, [pc, #8]	@ (8008f68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	20001544 	.word	0x20001544
 8008f6c:	0800a0d0 	.word	0x0800a0d0

08008f70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f76:	4b0f      	ldr	r3, [pc, #60]	@ (8008fb4 <Get_SerialNum+0x44>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8008fb8 <Get_SerialNum+0x48>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f82:	4b0e      	ldr	r3, [pc, #56]	@ (8008fbc <Get_SerialNum+0x4c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d009      	beq.n	8008faa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f96:	2208      	movs	r2, #8
 8008f98:	4909      	ldr	r1, [pc, #36]	@ (8008fc0 <Get_SerialNum+0x50>)
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f000 f814 	bl	8008fc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fa0:	2204      	movs	r2, #4
 8008fa2:	4908      	ldr	r1, [pc, #32]	@ (8008fc4 <Get_SerialNum+0x54>)
 8008fa4:	68b8      	ldr	r0, [r7, #8]
 8008fa6:	f000 f80f 	bl	8008fc8 <IntToUnicode>
  }
}
 8008faa:	bf00      	nop
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	1fff7a10 	.word	0x1fff7a10
 8008fb8:	1fff7a14 	.word	0x1fff7a14
 8008fbc:	1fff7a18 	.word	0x1fff7a18
 8008fc0:	200000e2 	.word	0x200000e2
 8008fc4:	200000f2 	.word	0x200000f2

08008fc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fda:	2300      	movs	r3, #0
 8008fdc:	75fb      	strb	r3, [r7, #23]
 8008fde:	e027      	b.n	8009030 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	0f1b      	lsrs	r3, r3, #28
 8008fe4:	2b09      	cmp	r3, #9
 8008fe6:	d80b      	bhi.n	8009000 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	0f1b      	lsrs	r3, r3, #28
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	440b      	add	r3, r1
 8008ff8:	3230      	adds	r2, #48	@ 0x30
 8008ffa:	b2d2      	uxtb	r2, r2
 8008ffc:	701a      	strb	r2, [r3, #0]
 8008ffe:	e00a      	b.n	8009016 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	0f1b      	lsrs	r3, r3, #28
 8009004:	b2da      	uxtb	r2, r3
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	4619      	mov	r1, r3
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	440b      	add	r3, r1
 8009010:	3237      	adds	r2, #55	@ 0x37
 8009012:	b2d2      	uxtb	r2, r2
 8009014:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	011b      	lsls	r3, r3, #4
 800901a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800901c:	7dfb      	ldrb	r3, [r7, #23]
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	3301      	adds	r3, #1
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	4413      	add	r3, r2
 8009026:	2200      	movs	r2, #0
 8009028:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	3301      	adds	r3, #1
 800902e:	75fb      	strb	r3, [r7, #23]
 8009030:	7dfa      	ldrb	r2, [r7, #23]
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	429a      	cmp	r2, r3
 8009036:	d3d3      	bcc.n	8008fe0 <IntToUnicode+0x18>
  }
}
 8009038:	bf00      	nop
 800903a:	bf00      	nop
 800903c:	371c      	adds	r7, #28
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
	...

08009048 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b08a      	sub	sp, #40	@ 0x28
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009050:	f107 0314 	add.w	r3, r7, #20
 8009054:	2200      	movs	r2, #0
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	605a      	str	r2, [r3, #4]
 800905a:	609a      	str	r2, [r3, #8]
 800905c:	60da      	str	r2, [r3, #12]
 800905e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009068:	d13a      	bne.n	80090e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800906a:	2300      	movs	r3, #0
 800906c:	613b      	str	r3, [r7, #16]
 800906e:	4b1e      	ldr	r3, [pc, #120]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 8009070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009072:	4a1d      	ldr	r2, [pc, #116]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 8009074:	f043 0301 	orr.w	r3, r3, #1
 8009078:	6313      	str	r3, [r2, #48]	@ 0x30
 800907a:	4b1b      	ldr	r3, [pc, #108]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	613b      	str	r3, [r7, #16]
 8009084:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009086:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800908a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800908c:	2302      	movs	r3, #2
 800908e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009090:	2300      	movs	r3, #0
 8009092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009094:	2303      	movs	r3, #3
 8009096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009098:	230a      	movs	r3, #10
 800909a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800909c:	f107 0314 	add.w	r3, r7, #20
 80090a0:	4619      	mov	r1, r3
 80090a2:	4812      	ldr	r0, [pc, #72]	@ (80090ec <HAL_PCD_MspInit+0xa4>)
 80090a4:	f7f8 fcbe 	bl	8001a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80090a8:	4b0f      	ldr	r3, [pc, #60]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 80090aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ac:	4a0e      	ldr	r2, [pc, #56]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 80090ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090b2:	6353      	str	r3, [r2, #52]	@ 0x34
 80090b4:	2300      	movs	r3, #0
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	4b0b      	ldr	r3, [pc, #44]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 80090ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090bc:	4a0a      	ldr	r2, [pc, #40]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 80090be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80090c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80090c4:	4b08      	ldr	r3, [pc, #32]	@ (80090e8 <HAL_PCD_MspInit+0xa0>)
 80090c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090d0:	2200      	movs	r2, #0
 80090d2:	2100      	movs	r1, #0
 80090d4:	2043      	movs	r0, #67	@ 0x43
 80090d6:	f7f8 fbdc 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090da:	2043      	movs	r0, #67	@ 0x43
 80090dc:	f7f8 fbf5 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090e0:	bf00      	nop
 80090e2:	3728      	adds	r7, #40	@ 0x28
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	40023800 	.word	0x40023800
 80090ec:	40020000 	.word	0x40020000

080090f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009104:	4619      	mov	r1, r3
 8009106:	4610      	mov	r0, r2
 8009108:	f7fe fb1f 	bl	800774a <USBD_LL_SetupStage>
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009126:	78fa      	ldrb	r2, [r7, #3]
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	4613      	mov	r3, r2
 800912c:	00db      	lsls	r3, r3, #3
 800912e:	4413      	add	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	440b      	add	r3, r1
 8009134:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	78fb      	ldrb	r3, [r7, #3]
 800913c:	4619      	mov	r1, r3
 800913e:	f7fe fb59 	bl	80077f4 <USBD_LL_DataOutStage>
}
 8009142:	bf00      	nop
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b082      	sub	sp, #8
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800915c:	78fa      	ldrb	r2, [r7, #3]
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	4613      	mov	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	440b      	add	r3, r1
 800916a:	3320      	adds	r3, #32
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	78fb      	ldrb	r3, [r7, #3]
 8009170:	4619      	mov	r1, r3
 8009172:	f7fe fbf2 	bl	800795a <USBD_LL_DataInStage>
}
 8009176:	bf00      	nop
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800918c:	4618      	mov	r0, r3
 800918e:	f7fe fd2c 	bl	8007bea <USBD_LL_SOF>
}
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091a2:	2301      	movs	r3, #1
 80091a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	79db      	ldrb	r3, [r3, #7]
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d001      	beq.n	80091b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80091ae:	f7f7 fc39 	bl	8000a24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091b8:	7bfa      	ldrb	r2, [r7, #15]
 80091ba:	4611      	mov	r1, r2
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fe fcd0 	bl	8007b62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fe fc78 	bl	8007abe <USBD_LL_Reset>
}
 80091ce:	bf00      	nop
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
	...

080091d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fccb 	bl	8007b82 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	6812      	ldr	r2, [r2, #0]
 80091fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80091fe:	f043 0301 	orr.w	r3, r3, #1
 8009202:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	7adb      	ldrb	r3, [r3, #11]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d005      	beq.n	8009218 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800920c:	4b04      	ldr	r3, [pc, #16]	@ (8009220 <HAL_PCD_SuspendCallback+0x48>)
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	4a03      	ldr	r2, [pc, #12]	@ (8009220 <HAL_PCD_SuspendCallback+0x48>)
 8009212:	f043 0306 	orr.w	r3, r3, #6
 8009216:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009218:	bf00      	nop
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	e000ed00 	.word	0xe000ed00

08009224 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe fcc1 	bl	8007bba <USBD_LL_Resume>
}
 8009238:	bf00      	nop
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009252:	78fa      	ldrb	r2, [r7, #3]
 8009254:	4611      	mov	r1, r2
 8009256:	4618      	mov	r0, r3
 8009258:	f7fe fd19 	bl	8007c8e <USBD_LL_IsoOUTIncomplete>
}
 800925c:	bf00      	nop
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009276:	78fa      	ldrb	r2, [r7, #3]
 8009278:	4611      	mov	r1, r2
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe fcd5 	bl	8007c2a <USBD_LL_IsoINIncomplete>
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe fd2b 	bl	8007cf2 <USBD_LL_DevConnected>
}
 800929c:	bf00      	nop
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fe fd28 	bl	8007d08 <USBD_LL_DevDisconnected>
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d13c      	bne.n	800934a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80092d0:	4a20      	ldr	r2, [pc, #128]	@ (8009354 <USBD_LL_Init+0x94>)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a1e      	ldr	r2, [pc, #120]	@ (8009354 <USBD_LL_Init+0x94>)
 80092dc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009354 <USBD_LL_Init+0x94>)
 80092e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80092e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80092e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009354 <USBD_LL_Init+0x94>)
 80092ea:	2204      	movs	r2, #4
 80092ec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80092ee:	4b19      	ldr	r3, [pc, #100]	@ (8009354 <USBD_LL_Init+0x94>)
 80092f0:	2202      	movs	r2, #2
 80092f2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80092f4:	4b17      	ldr	r3, [pc, #92]	@ (8009354 <USBD_LL_Init+0x94>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80092fa:	4b16      	ldr	r3, [pc, #88]	@ (8009354 <USBD_LL_Init+0x94>)
 80092fc:	2202      	movs	r2, #2
 80092fe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009300:	4b14      	ldr	r3, [pc, #80]	@ (8009354 <USBD_LL_Init+0x94>)
 8009302:	2200      	movs	r2, #0
 8009304:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009306:	4b13      	ldr	r3, [pc, #76]	@ (8009354 <USBD_LL_Init+0x94>)
 8009308:	2200      	movs	r2, #0
 800930a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800930c:	4b11      	ldr	r3, [pc, #68]	@ (8009354 <USBD_LL_Init+0x94>)
 800930e:	2200      	movs	r2, #0
 8009310:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009312:	4b10      	ldr	r3, [pc, #64]	@ (8009354 <USBD_LL_Init+0x94>)
 8009314:	2200      	movs	r2, #0
 8009316:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009318:	4b0e      	ldr	r3, [pc, #56]	@ (8009354 <USBD_LL_Init+0x94>)
 800931a:	2200      	movs	r2, #0
 800931c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800931e:	480d      	ldr	r0, [pc, #52]	@ (8009354 <USBD_LL_Init+0x94>)
 8009320:	f7f8 fd4e 	bl	8001dc0 <HAL_PCD_Init>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800932a:	f7f7 fb7b 	bl	8000a24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800932e:	2180      	movs	r1, #128	@ 0x80
 8009330:	4808      	ldr	r0, [pc, #32]	@ (8009354 <USBD_LL_Init+0x94>)
 8009332:	f7f9 ff7a 	bl	800322a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009336:	2240      	movs	r2, #64	@ 0x40
 8009338:	2100      	movs	r1, #0
 800933a:	4806      	ldr	r0, [pc, #24]	@ (8009354 <USBD_LL_Init+0x94>)
 800933c:	f7f9 ff2e 	bl	800319c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009340:	2280      	movs	r2, #128	@ 0x80
 8009342:	2101      	movs	r1, #1
 8009344:	4803      	ldr	r0, [pc, #12]	@ (8009354 <USBD_LL_Init+0x94>)
 8009346:	f7f9 ff29 	bl	800319c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	20001744 	.word	0x20001744

08009358 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800936e:	4618      	mov	r0, r3
 8009370:	f7f8 fe35 	bl	8001fde <HAL_PCD_Start>
 8009374:	4603      	mov	r3, r0
 8009376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f942 	bl	8009604 <USBD_Get_USB_Status>
 8009380:	4603      	mov	r3, r0
 8009382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009384:	7bbb      	ldrb	r3, [r7, #14]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	4608      	mov	r0, r1
 8009398:	4611      	mov	r1, r2
 800939a:	461a      	mov	r2, r3
 800939c:	4603      	mov	r3, r0
 800939e:	70fb      	strb	r3, [r7, #3]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70bb      	strb	r3, [r7, #2]
 80093a4:	4613      	mov	r3, r2
 80093a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80093b6:	78bb      	ldrb	r3, [r7, #2]
 80093b8:	883a      	ldrh	r2, [r7, #0]
 80093ba:	78f9      	ldrb	r1, [r7, #3]
 80093bc:	f7f9 fb09 	bl	80029d2 <HAL_PCD_EP_Open>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 f91c 	bl	8009604 <USBD_Get_USB_Status>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80093f4:	78fa      	ldrb	r2, [r7, #3]
 80093f6:	4611      	mov	r1, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7f9 fb54 	bl	8002aa6 <HAL_PCD_EP_Close>
 80093fe:	4603      	mov	r3, r0
 8009400:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 f8fd 	bl	8009604 <USBD_Get_USB_Status>
 800940a:	4603      	mov	r3, r0
 800940c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800940e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009432:	78fa      	ldrb	r2, [r7, #3]
 8009434:	4611      	mov	r1, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f7f9 fc0c 	bl	8002c54 <HAL_PCD_EP_SetStall>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	4618      	mov	r0, r3
 8009444:	f000 f8de 	bl	8009604 <USBD_Get_USB_Status>
 8009448:	4603      	mov	r3, r0
 800944a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800944c:	7bbb      	ldrb	r3, [r7, #14]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009470:	78fa      	ldrb	r2, [r7, #3]
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f7f9 fc50 	bl	8002d1a <HAL_PCD_EP_ClrStall>
 800947a:	4603      	mov	r3, r0
 800947c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	4618      	mov	r0, r3
 8009482:	f000 f8bf 	bl	8009604 <USBD_Get_USB_Status>
 8009486:	4603      	mov	r3, r0
 8009488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800948a:	7bbb      	ldrb	r3, [r7, #14]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	da0b      	bge.n	80094c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094b6:	68f9      	ldr	r1, [r7, #12]
 80094b8:	4613      	mov	r3, r2
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	4413      	add	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	440b      	add	r3, r1
 80094c2:	3316      	adds	r3, #22
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	e00b      	b.n	80094e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094c8:	78fb      	ldrb	r3, [r7, #3]
 80094ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094ce:	68f9      	ldr	r1, [r7, #12]
 80094d0:	4613      	mov	r3, r2
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	4413      	add	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	440b      	add	r3, r1
 80094da:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80094de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	460b      	mov	r3, r1
 80094f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009506:	78fa      	ldrb	r2, [r7, #3]
 8009508:	4611      	mov	r1, r2
 800950a:	4618      	mov	r0, r3
 800950c:	f7f9 fa3d 	bl	800298a <HAL_PCD_SetAddress>
 8009510:	4603      	mov	r3, r0
 8009512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	4618      	mov	r0, r3
 8009518:	f000 f874 	bl	8009604 <USBD_Get_USB_Status>
 800951c:	4603      	mov	r3, r0
 800951e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009520:	7bbb      	ldrb	r3, [r7, #14]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b086      	sub	sp, #24
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	603b      	str	r3, [r7, #0]
 8009536:	460b      	mov	r3, r1
 8009538:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009548:	7af9      	ldrb	r1, [r7, #11]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	f7f9 fb47 	bl	8002be0 <HAL_PCD_EP_Transmit>
 8009552:	4603      	mov	r3, r0
 8009554:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009556:	7dfb      	ldrb	r3, [r7, #23]
 8009558:	4618      	mov	r0, r3
 800955a:	f000 f853 	bl	8009604 <USBD_Get_USB_Status>
 800955e:	4603      	mov	r3, r0
 8009560:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009562:	7dbb      	ldrb	r3, [r7, #22]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	607a      	str	r2, [r7, #4]
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	460b      	mov	r3, r1
 800957a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800958a:	7af9      	ldrb	r1, [r7, #11]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	f7f9 fad3 	bl	8002b3a <HAL_PCD_EP_Receive>
 8009594:	4603      	mov	r3, r0
 8009596:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	4618      	mov	r0, r3
 800959c:	f000 f832 	bl	8009604 <USBD_Get_USB_Status>
 80095a0:	4603      	mov	r3, r0
 80095a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3718      	adds	r7, #24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b082      	sub	sp, #8
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	460b      	mov	r3, r1
 80095b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095c0:	78fa      	ldrb	r2, [r7, #3]
 80095c2:	4611      	mov	r1, r2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7f9 faf3 	bl	8002bb0 <HAL_PCD_EP_GetRxCount>
 80095ca:	4603      	mov	r3, r0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095dc:	4b03      	ldr	r3, [pc, #12]	@ (80095ec <USBD_static_malloc+0x18>)
}
 80095de:	4618      	mov	r0, r3
 80095e0:	370c      	adds	r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	20001c28 	.word	0x20001c28

080095f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]

}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	2b03      	cmp	r3, #3
 8009616:	d817      	bhi.n	8009648 <USBD_Get_USB_Status+0x44>
 8009618:	a201      	add	r2, pc, #4	@ (adr r2, 8009620 <USBD_Get_USB_Status+0x1c>)
 800961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961e:	bf00      	nop
 8009620:	08009631 	.word	0x08009631
 8009624:	08009637 	.word	0x08009637
 8009628:	0800963d 	.word	0x0800963d
 800962c:	08009643 	.word	0x08009643
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	73fb      	strb	r3, [r7, #15]
    break;
 8009634:	e00b      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009636:	2303      	movs	r3, #3
 8009638:	73fb      	strb	r3, [r7, #15]
    break;
 800963a:	e008      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800963c:	2301      	movs	r3, #1
 800963e:	73fb      	strb	r3, [r7, #15]
    break;
 8009640:	e005      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009642:	2303      	movs	r3, #3
 8009644:	73fb      	strb	r3, [r7, #15]
    break;
 8009646:	e002      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009648:	2303      	movs	r3, #3
 800964a:	73fb      	strb	r3, [r7, #15]
    break;
 800964c:	bf00      	nop
  }
  return usb_status;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <sniprintf>:
 800965c:	b40c      	push	{r2, r3}
 800965e:	b530      	push	{r4, r5, lr}
 8009660:	4b17      	ldr	r3, [pc, #92]	@ (80096c0 <sniprintf+0x64>)
 8009662:	1e0c      	subs	r4, r1, #0
 8009664:	681d      	ldr	r5, [r3, #0]
 8009666:	b09d      	sub	sp, #116	@ 0x74
 8009668:	da08      	bge.n	800967c <sniprintf+0x20>
 800966a:	238b      	movs	r3, #139	@ 0x8b
 800966c:	602b      	str	r3, [r5, #0]
 800966e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009672:	b01d      	add	sp, #116	@ 0x74
 8009674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009678:	b002      	add	sp, #8
 800967a:	4770      	bx	lr
 800967c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009680:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009684:	bf14      	ite	ne
 8009686:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800968a:	4623      	moveq	r3, r4
 800968c:	9304      	str	r3, [sp, #16]
 800968e:	9307      	str	r3, [sp, #28]
 8009690:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009694:	9002      	str	r0, [sp, #8]
 8009696:	9006      	str	r0, [sp, #24]
 8009698:	f8ad 3016 	strh.w	r3, [sp, #22]
 800969c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800969e:	ab21      	add	r3, sp, #132	@ 0x84
 80096a0:	a902      	add	r1, sp, #8
 80096a2:	4628      	mov	r0, r5
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	f000 f8e5 	bl	8009874 <_svfiprintf_r>
 80096aa:	1c43      	adds	r3, r0, #1
 80096ac:	bfbc      	itt	lt
 80096ae:	238b      	movlt	r3, #139	@ 0x8b
 80096b0:	602b      	strlt	r3, [r5, #0]
 80096b2:	2c00      	cmp	r4, #0
 80096b4:	d0dd      	beq.n	8009672 <sniprintf+0x16>
 80096b6:	9b02      	ldr	r3, [sp, #8]
 80096b8:	2200      	movs	r2, #0
 80096ba:	701a      	strb	r2, [r3, #0]
 80096bc:	e7d9      	b.n	8009672 <sniprintf+0x16>
 80096be:	bf00      	nop
 80096c0:	200000fc 	.word	0x200000fc

080096c4 <_vsniprintf_r>:
 80096c4:	b530      	push	{r4, r5, lr}
 80096c6:	4614      	mov	r4, r2
 80096c8:	2c00      	cmp	r4, #0
 80096ca:	b09b      	sub	sp, #108	@ 0x6c
 80096cc:	4605      	mov	r5, r0
 80096ce:	461a      	mov	r2, r3
 80096d0:	da05      	bge.n	80096de <_vsniprintf_r+0x1a>
 80096d2:	238b      	movs	r3, #139	@ 0x8b
 80096d4:	6003      	str	r3, [r0, #0]
 80096d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096da:	b01b      	add	sp, #108	@ 0x6c
 80096dc:	bd30      	pop	{r4, r5, pc}
 80096de:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80096e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80096e6:	bf14      	ite	ne
 80096e8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80096ec:	4623      	moveq	r3, r4
 80096ee:	9302      	str	r3, [sp, #8]
 80096f0:	9305      	str	r3, [sp, #20]
 80096f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80096f6:	9100      	str	r1, [sp, #0]
 80096f8:	9104      	str	r1, [sp, #16]
 80096fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80096fe:	4669      	mov	r1, sp
 8009700:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009702:	f000 f8b7 	bl	8009874 <_svfiprintf_r>
 8009706:	1c43      	adds	r3, r0, #1
 8009708:	bfbc      	itt	lt
 800970a:	238b      	movlt	r3, #139	@ 0x8b
 800970c:	602b      	strlt	r3, [r5, #0]
 800970e:	2c00      	cmp	r4, #0
 8009710:	d0e3      	beq.n	80096da <_vsniprintf_r+0x16>
 8009712:	9b00      	ldr	r3, [sp, #0]
 8009714:	2200      	movs	r2, #0
 8009716:	701a      	strb	r2, [r3, #0]
 8009718:	e7df      	b.n	80096da <_vsniprintf_r+0x16>
	...

0800971c <vsniprintf>:
 800971c:	b507      	push	{r0, r1, r2, lr}
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	4613      	mov	r3, r2
 8009722:	460a      	mov	r2, r1
 8009724:	4601      	mov	r1, r0
 8009726:	4803      	ldr	r0, [pc, #12]	@ (8009734 <vsniprintf+0x18>)
 8009728:	6800      	ldr	r0, [r0, #0]
 800972a:	f7ff ffcb 	bl	80096c4 <_vsniprintf_r>
 800972e:	b003      	add	sp, #12
 8009730:	f85d fb04 	ldr.w	pc, [sp], #4
 8009734:	200000fc 	.word	0x200000fc

08009738 <memset>:
 8009738:	4402      	add	r2, r0
 800973a:	4603      	mov	r3, r0
 800973c:	4293      	cmp	r3, r2
 800973e:	d100      	bne.n	8009742 <memset+0xa>
 8009740:	4770      	bx	lr
 8009742:	f803 1b01 	strb.w	r1, [r3], #1
 8009746:	e7f9      	b.n	800973c <memset+0x4>

08009748 <__errno>:
 8009748:	4b01      	ldr	r3, [pc, #4]	@ (8009750 <__errno+0x8>)
 800974a:	6818      	ldr	r0, [r3, #0]
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	200000fc 	.word	0x200000fc

08009754 <__libc_init_array>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	4d0d      	ldr	r5, [pc, #52]	@ (800978c <__libc_init_array+0x38>)
 8009758:	4c0d      	ldr	r4, [pc, #52]	@ (8009790 <__libc_init_array+0x3c>)
 800975a:	1b64      	subs	r4, r4, r5
 800975c:	10a4      	asrs	r4, r4, #2
 800975e:	2600      	movs	r6, #0
 8009760:	42a6      	cmp	r6, r4
 8009762:	d109      	bne.n	8009778 <__libc_init_array+0x24>
 8009764:	4d0b      	ldr	r5, [pc, #44]	@ (8009794 <__libc_init_array+0x40>)
 8009766:	4c0c      	ldr	r4, [pc, #48]	@ (8009798 <__libc_init_array+0x44>)
 8009768:	f000 fc66 	bl	800a038 <_init>
 800976c:	1b64      	subs	r4, r4, r5
 800976e:	10a4      	asrs	r4, r4, #2
 8009770:	2600      	movs	r6, #0
 8009772:	42a6      	cmp	r6, r4
 8009774:	d105      	bne.n	8009782 <__libc_init_array+0x2e>
 8009776:	bd70      	pop	{r4, r5, r6, pc}
 8009778:	f855 3b04 	ldr.w	r3, [r5], #4
 800977c:	4798      	blx	r3
 800977e:	3601      	adds	r6, #1
 8009780:	e7ee      	b.n	8009760 <__libc_init_array+0xc>
 8009782:	f855 3b04 	ldr.w	r3, [r5], #4
 8009786:	4798      	blx	r3
 8009788:	3601      	adds	r6, #1
 800978a:	e7f2      	b.n	8009772 <__libc_init_array+0x1e>
 800978c:	0800a134 	.word	0x0800a134
 8009790:	0800a134 	.word	0x0800a134
 8009794:	0800a134 	.word	0x0800a134
 8009798:	0800a138 	.word	0x0800a138

0800979c <__retarget_lock_acquire_recursive>:
 800979c:	4770      	bx	lr

0800979e <__retarget_lock_release_recursive>:
 800979e:	4770      	bx	lr

080097a0 <memcpy>:
 80097a0:	440a      	add	r2, r1
 80097a2:	4291      	cmp	r1, r2
 80097a4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80097a8:	d100      	bne.n	80097ac <memcpy+0xc>
 80097aa:	4770      	bx	lr
 80097ac:	b510      	push	{r4, lr}
 80097ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097b6:	4291      	cmp	r1, r2
 80097b8:	d1f9      	bne.n	80097ae <memcpy+0xe>
 80097ba:	bd10      	pop	{r4, pc}

080097bc <__ssputs_r>:
 80097bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c0:	688e      	ldr	r6, [r1, #8]
 80097c2:	461f      	mov	r7, r3
 80097c4:	42be      	cmp	r6, r7
 80097c6:	680b      	ldr	r3, [r1, #0]
 80097c8:	4682      	mov	sl, r0
 80097ca:	460c      	mov	r4, r1
 80097cc:	4690      	mov	r8, r2
 80097ce:	d82d      	bhi.n	800982c <__ssputs_r+0x70>
 80097d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80097d8:	d026      	beq.n	8009828 <__ssputs_r+0x6c>
 80097da:	6965      	ldr	r5, [r4, #20]
 80097dc:	6909      	ldr	r1, [r1, #16]
 80097de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097e2:	eba3 0901 	sub.w	r9, r3, r1
 80097e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097ea:	1c7b      	adds	r3, r7, #1
 80097ec:	444b      	add	r3, r9
 80097ee:	106d      	asrs	r5, r5, #1
 80097f0:	429d      	cmp	r5, r3
 80097f2:	bf38      	it	cc
 80097f4:	461d      	movcc	r5, r3
 80097f6:	0553      	lsls	r3, r2, #21
 80097f8:	d527      	bpl.n	800984a <__ssputs_r+0x8e>
 80097fa:	4629      	mov	r1, r5
 80097fc:	f000 f958 	bl	8009ab0 <_malloc_r>
 8009800:	4606      	mov	r6, r0
 8009802:	b360      	cbz	r0, 800985e <__ssputs_r+0xa2>
 8009804:	6921      	ldr	r1, [r4, #16]
 8009806:	464a      	mov	r2, r9
 8009808:	f7ff ffca 	bl	80097a0 <memcpy>
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009816:	81a3      	strh	r3, [r4, #12]
 8009818:	6126      	str	r6, [r4, #16]
 800981a:	6165      	str	r5, [r4, #20]
 800981c:	444e      	add	r6, r9
 800981e:	eba5 0509 	sub.w	r5, r5, r9
 8009822:	6026      	str	r6, [r4, #0]
 8009824:	60a5      	str	r5, [r4, #8]
 8009826:	463e      	mov	r6, r7
 8009828:	42be      	cmp	r6, r7
 800982a:	d900      	bls.n	800982e <__ssputs_r+0x72>
 800982c:	463e      	mov	r6, r7
 800982e:	6820      	ldr	r0, [r4, #0]
 8009830:	4632      	mov	r2, r6
 8009832:	4641      	mov	r1, r8
 8009834:	f000 fb84 	bl	8009f40 <memmove>
 8009838:	68a3      	ldr	r3, [r4, #8]
 800983a:	1b9b      	subs	r3, r3, r6
 800983c:	60a3      	str	r3, [r4, #8]
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	4433      	add	r3, r6
 8009842:	6023      	str	r3, [r4, #0]
 8009844:	2000      	movs	r0, #0
 8009846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800984a:	462a      	mov	r2, r5
 800984c:	f000 fb4a 	bl	8009ee4 <_realloc_r>
 8009850:	4606      	mov	r6, r0
 8009852:	2800      	cmp	r0, #0
 8009854:	d1e0      	bne.n	8009818 <__ssputs_r+0x5c>
 8009856:	6921      	ldr	r1, [r4, #16]
 8009858:	4650      	mov	r0, sl
 800985a:	f000 fb9b 	bl	8009f94 <_free_r>
 800985e:	230c      	movs	r3, #12
 8009860:	f8ca 3000 	str.w	r3, [sl]
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800986a:	81a3      	strh	r3, [r4, #12]
 800986c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009870:	e7e9      	b.n	8009846 <__ssputs_r+0x8a>
	...

08009874 <_svfiprintf_r>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	4698      	mov	r8, r3
 800987a:	898b      	ldrh	r3, [r1, #12]
 800987c:	061b      	lsls	r3, r3, #24
 800987e:	b09d      	sub	sp, #116	@ 0x74
 8009880:	4607      	mov	r7, r0
 8009882:	460d      	mov	r5, r1
 8009884:	4614      	mov	r4, r2
 8009886:	d510      	bpl.n	80098aa <_svfiprintf_r+0x36>
 8009888:	690b      	ldr	r3, [r1, #16]
 800988a:	b973      	cbnz	r3, 80098aa <_svfiprintf_r+0x36>
 800988c:	2140      	movs	r1, #64	@ 0x40
 800988e:	f000 f90f 	bl	8009ab0 <_malloc_r>
 8009892:	6028      	str	r0, [r5, #0]
 8009894:	6128      	str	r0, [r5, #16]
 8009896:	b930      	cbnz	r0, 80098a6 <_svfiprintf_r+0x32>
 8009898:	230c      	movs	r3, #12
 800989a:	603b      	str	r3, [r7, #0]
 800989c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098a0:	b01d      	add	sp, #116	@ 0x74
 80098a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a6:	2340      	movs	r3, #64	@ 0x40
 80098a8:	616b      	str	r3, [r5, #20]
 80098aa:	2300      	movs	r3, #0
 80098ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ae:	2320      	movs	r3, #32
 80098b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80098b8:	2330      	movs	r3, #48	@ 0x30
 80098ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a58 <_svfiprintf_r+0x1e4>
 80098be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098c2:	f04f 0901 	mov.w	r9, #1
 80098c6:	4623      	mov	r3, r4
 80098c8:	469a      	mov	sl, r3
 80098ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ce:	b10a      	cbz	r2, 80098d4 <_svfiprintf_r+0x60>
 80098d0:	2a25      	cmp	r2, #37	@ 0x25
 80098d2:	d1f9      	bne.n	80098c8 <_svfiprintf_r+0x54>
 80098d4:	ebba 0b04 	subs.w	fp, sl, r4
 80098d8:	d00b      	beq.n	80098f2 <_svfiprintf_r+0x7e>
 80098da:	465b      	mov	r3, fp
 80098dc:	4622      	mov	r2, r4
 80098de:	4629      	mov	r1, r5
 80098e0:	4638      	mov	r0, r7
 80098e2:	f7ff ff6b 	bl	80097bc <__ssputs_r>
 80098e6:	3001      	adds	r0, #1
 80098e8:	f000 80a7 	beq.w	8009a3a <_svfiprintf_r+0x1c6>
 80098ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098ee:	445a      	add	r2, fp
 80098f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80098f2:	f89a 3000 	ldrb.w	r3, [sl]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 809f 	beq.w	8009a3a <_svfiprintf_r+0x1c6>
 80098fc:	2300      	movs	r3, #0
 80098fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009906:	f10a 0a01 	add.w	sl, sl, #1
 800990a:	9304      	str	r3, [sp, #16]
 800990c:	9307      	str	r3, [sp, #28]
 800990e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009912:	931a      	str	r3, [sp, #104]	@ 0x68
 8009914:	4654      	mov	r4, sl
 8009916:	2205      	movs	r2, #5
 8009918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800991c:	484e      	ldr	r0, [pc, #312]	@ (8009a58 <_svfiprintf_r+0x1e4>)
 800991e:	f7f6 fc5f 	bl	80001e0 <memchr>
 8009922:	9a04      	ldr	r2, [sp, #16]
 8009924:	b9d8      	cbnz	r0, 800995e <_svfiprintf_r+0xea>
 8009926:	06d0      	lsls	r0, r2, #27
 8009928:	bf44      	itt	mi
 800992a:	2320      	movmi	r3, #32
 800992c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009930:	0711      	lsls	r1, r2, #28
 8009932:	bf44      	itt	mi
 8009934:	232b      	movmi	r3, #43	@ 0x2b
 8009936:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800993a:	f89a 3000 	ldrb.w	r3, [sl]
 800993e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009940:	d015      	beq.n	800996e <_svfiprintf_r+0xfa>
 8009942:	9a07      	ldr	r2, [sp, #28]
 8009944:	4654      	mov	r4, sl
 8009946:	2000      	movs	r0, #0
 8009948:	f04f 0c0a 	mov.w	ip, #10
 800994c:	4621      	mov	r1, r4
 800994e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009952:	3b30      	subs	r3, #48	@ 0x30
 8009954:	2b09      	cmp	r3, #9
 8009956:	d94b      	bls.n	80099f0 <_svfiprintf_r+0x17c>
 8009958:	b1b0      	cbz	r0, 8009988 <_svfiprintf_r+0x114>
 800995a:	9207      	str	r2, [sp, #28]
 800995c:	e014      	b.n	8009988 <_svfiprintf_r+0x114>
 800995e:	eba0 0308 	sub.w	r3, r0, r8
 8009962:	fa09 f303 	lsl.w	r3, r9, r3
 8009966:	4313      	orrs	r3, r2
 8009968:	9304      	str	r3, [sp, #16]
 800996a:	46a2      	mov	sl, r4
 800996c:	e7d2      	b.n	8009914 <_svfiprintf_r+0xa0>
 800996e:	9b03      	ldr	r3, [sp, #12]
 8009970:	1d19      	adds	r1, r3, #4
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	9103      	str	r1, [sp, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	bfbb      	ittet	lt
 800997a:	425b      	neglt	r3, r3
 800997c:	f042 0202 	orrlt.w	r2, r2, #2
 8009980:	9307      	strge	r3, [sp, #28]
 8009982:	9307      	strlt	r3, [sp, #28]
 8009984:	bfb8      	it	lt
 8009986:	9204      	strlt	r2, [sp, #16]
 8009988:	7823      	ldrb	r3, [r4, #0]
 800998a:	2b2e      	cmp	r3, #46	@ 0x2e
 800998c:	d10a      	bne.n	80099a4 <_svfiprintf_r+0x130>
 800998e:	7863      	ldrb	r3, [r4, #1]
 8009990:	2b2a      	cmp	r3, #42	@ 0x2a
 8009992:	d132      	bne.n	80099fa <_svfiprintf_r+0x186>
 8009994:	9b03      	ldr	r3, [sp, #12]
 8009996:	1d1a      	adds	r2, r3, #4
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	9203      	str	r2, [sp, #12]
 800999c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099a0:	3402      	adds	r4, #2
 80099a2:	9305      	str	r3, [sp, #20]
 80099a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a68 <_svfiprintf_r+0x1f4>
 80099a8:	7821      	ldrb	r1, [r4, #0]
 80099aa:	2203      	movs	r2, #3
 80099ac:	4650      	mov	r0, sl
 80099ae:	f7f6 fc17 	bl	80001e0 <memchr>
 80099b2:	b138      	cbz	r0, 80099c4 <_svfiprintf_r+0x150>
 80099b4:	9b04      	ldr	r3, [sp, #16]
 80099b6:	eba0 000a 	sub.w	r0, r0, sl
 80099ba:	2240      	movs	r2, #64	@ 0x40
 80099bc:	4082      	lsls	r2, r0
 80099be:	4313      	orrs	r3, r2
 80099c0:	3401      	adds	r4, #1
 80099c2:	9304      	str	r3, [sp, #16]
 80099c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c8:	4824      	ldr	r0, [pc, #144]	@ (8009a5c <_svfiprintf_r+0x1e8>)
 80099ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099ce:	2206      	movs	r2, #6
 80099d0:	f7f6 fc06 	bl	80001e0 <memchr>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d036      	beq.n	8009a46 <_svfiprintf_r+0x1d2>
 80099d8:	4b21      	ldr	r3, [pc, #132]	@ (8009a60 <_svfiprintf_r+0x1ec>)
 80099da:	bb1b      	cbnz	r3, 8009a24 <_svfiprintf_r+0x1b0>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	3307      	adds	r3, #7
 80099e0:	f023 0307 	bic.w	r3, r3, #7
 80099e4:	3308      	adds	r3, #8
 80099e6:	9303      	str	r3, [sp, #12]
 80099e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ea:	4433      	add	r3, r6
 80099ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ee:	e76a      	b.n	80098c6 <_svfiprintf_r+0x52>
 80099f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80099f4:	460c      	mov	r4, r1
 80099f6:	2001      	movs	r0, #1
 80099f8:	e7a8      	b.n	800994c <_svfiprintf_r+0xd8>
 80099fa:	2300      	movs	r3, #0
 80099fc:	3401      	adds	r4, #1
 80099fe:	9305      	str	r3, [sp, #20]
 8009a00:	4619      	mov	r1, r3
 8009a02:	f04f 0c0a 	mov.w	ip, #10
 8009a06:	4620      	mov	r0, r4
 8009a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a0c:	3a30      	subs	r2, #48	@ 0x30
 8009a0e:	2a09      	cmp	r2, #9
 8009a10:	d903      	bls.n	8009a1a <_svfiprintf_r+0x1a6>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0c6      	beq.n	80099a4 <_svfiprintf_r+0x130>
 8009a16:	9105      	str	r1, [sp, #20]
 8009a18:	e7c4      	b.n	80099a4 <_svfiprintf_r+0x130>
 8009a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a1e:	4604      	mov	r4, r0
 8009a20:	2301      	movs	r3, #1
 8009a22:	e7f0      	b.n	8009a06 <_svfiprintf_r+0x192>
 8009a24:	ab03      	add	r3, sp, #12
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	462a      	mov	r2, r5
 8009a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8009a64 <_svfiprintf_r+0x1f0>)
 8009a2c:	a904      	add	r1, sp, #16
 8009a2e:	4638      	mov	r0, r7
 8009a30:	f3af 8000 	nop.w
 8009a34:	1c42      	adds	r2, r0, #1
 8009a36:	4606      	mov	r6, r0
 8009a38:	d1d6      	bne.n	80099e8 <_svfiprintf_r+0x174>
 8009a3a:	89ab      	ldrh	r3, [r5, #12]
 8009a3c:	065b      	lsls	r3, r3, #25
 8009a3e:	f53f af2d 	bmi.w	800989c <_svfiprintf_r+0x28>
 8009a42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a44:	e72c      	b.n	80098a0 <_svfiprintf_r+0x2c>
 8009a46:	ab03      	add	r3, sp, #12
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	462a      	mov	r2, r5
 8009a4c:	4b05      	ldr	r3, [pc, #20]	@ (8009a64 <_svfiprintf_r+0x1f0>)
 8009a4e:	a904      	add	r1, sp, #16
 8009a50:	4638      	mov	r0, r7
 8009a52:	f000 f91b 	bl	8009c8c <_printf_i>
 8009a56:	e7ed      	b.n	8009a34 <_svfiprintf_r+0x1c0>
 8009a58:	0800a0f8 	.word	0x0800a0f8
 8009a5c:	0800a102 	.word	0x0800a102
 8009a60:	00000000 	.word	0x00000000
 8009a64:	080097bd 	.word	0x080097bd
 8009a68:	0800a0fe 	.word	0x0800a0fe

08009a6c <sbrk_aligned>:
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	4e0f      	ldr	r6, [pc, #60]	@ (8009aac <sbrk_aligned+0x40>)
 8009a70:	460c      	mov	r4, r1
 8009a72:	6831      	ldr	r1, [r6, #0]
 8009a74:	4605      	mov	r5, r0
 8009a76:	b911      	cbnz	r1, 8009a7e <sbrk_aligned+0x12>
 8009a78:	f000 fa7c 	bl	8009f74 <_sbrk_r>
 8009a7c:	6030      	str	r0, [r6, #0]
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4628      	mov	r0, r5
 8009a82:	f000 fa77 	bl	8009f74 <_sbrk_r>
 8009a86:	1c43      	adds	r3, r0, #1
 8009a88:	d103      	bne.n	8009a92 <sbrk_aligned+0x26>
 8009a8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009a8e:	4620      	mov	r0, r4
 8009a90:	bd70      	pop	{r4, r5, r6, pc}
 8009a92:	1cc4      	adds	r4, r0, #3
 8009a94:	f024 0403 	bic.w	r4, r4, #3
 8009a98:	42a0      	cmp	r0, r4
 8009a9a:	d0f8      	beq.n	8009a8e <sbrk_aligned+0x22>
 8009a9c:	1a21      	subs	r1, r4, r0
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	f000 fa68 	bl	8009f74 <_sbrk_r>
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	d1f2      	bne.n	8009a8e <sbrk_aligned+0x22>
 8009aa8:	e7ef      	b.n	8009a8a <sbrk_aligned+0x1e>
 8009aaa:	bf00      	nop
 8009aac:	20001f84 	.word	0x20001f84

08009ab0 <_malloc_r>:
 8009ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab4:	1ccd      	adds	r5, r1, #3
 8009ab6:	f025 0503 	bic.w	r5, r5, #3
 8009aba:	3508      	adds	r5, #8
 8009abc:	2d0c      	cmp	r5, #12
 8009abe:	bf38      	it	cc
 8009ac0:	250c      	movcc	r5, #12
 8009ac2:	2d00      	cmp	r5, #0
 8009ac4:	4606      	mov	r6, r0
 8009ac6:	db01      	blt.n	8009acc <_malloc_r+0x1c>
 8009ac8:	42a9      	cmp	r1, r5
 8009aca:	d904      	bls.n	8009ad6 <_malloc_r+0x26>
 8009acc:	230c      	movs	r3, #12
 8009ace:	6033      	str	r3, [r6, #0]
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009bac <_malloc_r+0xfc>
 8009ada:	f000 f9f7 	bl	8009ecc <__malloc_lock>
 8009ade:	f8d8 3000 	ldr.w	r3, [r8]
 8009ae2:	461c      	mov	r4, r3
 8009ae4:	bb44      	cbnz	r4, 8009b38 <_malloc_r+0x88>
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f7ff ffbf 	bl	8009a6c <sbrk_aligned>
 8009aee:	1c43      	adds	r3, r0, #1
 8009af0:	4604      	mov	r4, r0
 8009af2:	d158      	bne.n	8009ba6 <_malloc_r+0xf6>
 8009af4:	f8d8 4000 	ldr.w	r4, [r8]
 8009af8:	4627      	mov	r7, r4
 8009afa:	2f00      	cmp	r7, #0
 8009afc:	d143      	bne.n	8009b86 <_malloc_r+0xd6>
 8009afe:	2c00      	cmp	r4, #0
 8009b00:	d04b      	beq.n	8009b9a <_malloc_r+0xea>
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	4639      	mov	r1, r7
 8009b06:	4630      	mov	r0, r6
 8009b08:	eb04 0903 	add.w	r9, r4, r3
 8009b0c:	f000 fa32 	bl	8009f74 <_sbrk_r>
 8009b10:	4581      	cmp	r9, r0
 8009b12:	d142      	bne.n	8009b9a <_malloc_r+0xea>
 8009b14:	6821      	ldr	r1, [r4, #0]
 8009b16:	1a6d      	subs	r5, r5, r1
 8009b18:	4629      	mov	r1, r5
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f7ff ffa6 	bl	8009a6c <sbrk_aligned>
 8009b20:	3001      	adds	r0, #1
 8009b22:	d03a      	beq.n	8009b9a <_malloc_r+0xea>
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	442b      	add	r3, r5
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	bb62      	cbnz	r2, 8009b8c <_malloc_r+0xdc>
 8009b32:	f8c8 7000 	str.w	r7, [r8]
 8009b36:	e00f      	b.n	8009b58 <_malloc_r+0xa8>
 8009b38:	6822      	ldr	r2, [r4, #0]
 8009b3a:	1b52      	subs	r2, r2, r5
 8009b3c:	d420      	bmi.n	8009b80 <_malloc_r+0xd0>
 8009b3e:	2a0b      	cmp	r2, #11
 8009b40:	d917      	bls.n	8009b72 <_malloc_r+0xc2>
 8009b42:	1961      	adds	r1, r4, r5
 8009b44:	42a3      	cmp	r3, r4
 8009b46:	6025      	str	r5, [r4, #0]
 8009b48:	bf18      	it	ne
 8009b4a:	6059      	strne	r1, [r3, #4]
 8009b4c:	6863      	ldr	r3, [r4, #4]
 8009b4e:	bf08      	it	eq
 8009b50:	f8c8 1000 	streq.w	r1, [r8]
 8009b54:	5162      	str	r2, [r4, r5]
 8009b56:	604b      	str	r3, [r1, #4]
 8009b58:	4630      	mov	r0, r6
 8009b5a:	f000 f9bd 	bl	8009ed8 <__malloc_unlock>
 8009b5e:	f104 000b 	add.w	r0, r4, #11
 8009b62:	1d23      	adds	r3, r4, #4
 8009b64:	f020 0007 	bic.w	r0, r0, #7
 8009b68:	1ac2      	subs	r2, r0, r3
 8009b6a:	bf1c      	itt	ne
 8009b6c:	1a1b      	subne	r3, r3, r0
 8009b6e:	50a3      	strne	r3, [r4, r2]
 8009b70:	e7af      	b.n	8009ad2 <_malloc_r+0x22>
 8009b72:	6862      	ldr	r2, [r4, #4]
 8009b74:	42a3      	cmp	r3, r4
 8009b76:	bf0c      	ite	eq
 8009b78:	f8c8 2000 	streq.w	r2, [r8]
 8009b7c:	605a      	strne	r2, [r3, #4]
 8009b7e:	e7eb      	b.n	8009b58 <_malloc_r+0xa8>
 8009b80:	4623      	mov	r3, r4
 8009b82:	6864      	ldr	r4, [r4, #4]
 8009b84:	e7ae      	b.n	8009ae4 <_malloc_r+0x34>
 8009b86:	463c      	mov	r4, r7
 8009b88:	687f      	ldr	r7, [r7, #4]
 8009b8a:	e7b6      	b.n	8009afa <_malloc_r+0x4a>
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	42a3      	cmp	r3, r4
 8009b92:	d1fb      	bne.n	8009b8c <_malloc_r+0xdc>
 8009b94:	2300      	movs	r3, #0
 8009b96:	6053      	str	r3, [r2, #4]
 8009b98:	e7de      	b.n	8009b58 <_malloc_r+0xa8>
 8009b9a:	230c      	movs	r3, #12
 8009b9c:	6033      	str	r3, [r6, #0]
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f000 f99a 	bl	8009ed8 <__malloc_unlock>
 8009ba4:	e794      	b.n	8009ad0 <_malloc_r+0x20>
 8009ba6:	6005      	str	r5, [r0, #0]
 8009ba8:	e7d6      	b.n	8009b58 <_malloc_r+0xa8>
 8009baa:	bf00      	nop
 8009bac:	20001f88 	.word	0x20001f88

08009bb0 <_printf_common>:
 8009bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb4:	4616      	mov	r6, r2
 8009bb6:	4698      	mov	r8, r3
 8009bb8:	688a      	ldr	r2, [r1, #8]
 8009bba:	690b      	ldr	r3, [r1, #16]
 8009bbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	bfb8      	it	lt
 8009bc4:	4613      	movlt	r3, r2
 8009bc6:	6033      	str	r3, [r6, #0]
 8009bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009bcc:	4607      	mov	r7, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	b10a      	cbz	r2, 8009bd6 <_printf_common+0x26>
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	6033      	str	r3, [r6, #0]
 8009bd6:	6823      	ldr	r3, [r4, #0]
 8009bd8:	0699      	lsls	r1, r3, #26
 8009bda:	bf42      	ittt	mi
 8009bdc:	6833      	ldrmi	r3, [r6, #0]
 8009bde:	3302      	addmi	r3, #2
 8009be0:	6033      	strmi	r3, [r6, #0]
 8009be2:	6825      	ldr	r5, [r4, #0]
 8009be4:	f015 0506 	ands.w	r5, r5, #6
 8009be8:	d106      	bne.n	8009bf8 <_printf_common+0x48>
 8009bea:	f104 0a19 	add.w	sl, r4, #25
 8009bee:	68e3      	ldr	r3, [r4, #12]
 8009bf0:	6832      	ldr	r2, [r6, #0]
 8009bf2:	1a9b      	subs	r3, r3, r2
 8009bf4:	42ab      	cmp	r3, r5
 8009bf6:	dc26      	bgt.n	8009c46 <_printf_common+0x96>
 8009bf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009bfc:	6822      	ldr	r2, [r4, #0]
 8009bfe:	3b00      	subs	r3, #0
 8009c00:	bf18      	it	ne
 8009c02:	2301      	movne	r3, #1
 8009c04:	0692      	lsls	r2, r2, #26
 8009c06:	d42b      	bmi.n	8009c60 <_printf_common+0xb0>
 8009c08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c0c:	4641      	mov	r1, r8
 8009c0e:	4638      	mov	r0, r7
 8009c10:	47c8      	blx	r9
 8009c12:	3001      	adds	r0, #1
 8009c14:	d01e      	beq.n	8009c54 <_printf_common+0xa4>
 8009c16:	6823      	ldr	r3, [r4, #0]
 8009c18:	6922      	ldr	r2, [r4, #16]
 8009c1a:	f003 0306 	and.w	r3, r3, #6
 8009c1e:	2b04      	cmp	r3, #4
 8009c20:	bf02      	ittt	eq
 8009c22:	68e5      	ldreq	r5, [r4, #12]
 8009c24:	6833      	ldreq	r3, [r6, #0]
 8009c26:	1aed      	subeq	r5, r5, r3
 8009c28:	68a3      	ldr	r3, [r4, #8]
 8009c2a:	bf0c      	ite	eq
 8009c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c30:	2500      	movne	r5, #0
 8009c32:	4293      	cmp	r3, r2
 8009c34:	bfc4      	itt	gt
 8009c36:	1a9b      	subgt	r3, r3, r2
 8009c38:	18ed      	addgt	r5, r5, r3
 8009c3a:	2600      	movs	r6, #0
 8009c3c:	341a      	adds	r4, #26
 8009c3e:	42b5      	cmp	r5, r6
 8009c40:	d11a      	bne.n	8009c78 <_printf_common+0xc8>
 8009c42:	2000      	movs	r0, #0
 8009c44:	e008      	b.n	8009c58 <_printf_common+0xa8>
 8009c46:	2301      	movs	r3, #1
 8009c48:	4652      	mov	r2, sl
 8009c4a:	4641      	mov	r1, r8
 8009c4c:	4638      	mov	r0, r7
 8009c4e:	47c8      	blx	r9
 8009c50:	3001      	adds	r0, #1
 8009c52:	d103      	bne.n	8009c5c <_printf_common+0xac>
 8009c54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c5c:	3501      	adds	r5, #1
 8009c5e:	e7c6      	b.n	8009bee <_printf_common+0x3e>
 8009c60:	18e1      	adds	r1, r4, r3
 8009c62:	1c5a      	adds	r2, r3, #1
 8009c64:	2030      	movs	r0, #48	@ 0x30
 8009c66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c6a:	4422      	add	r2, r4
 8009c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c74:	3302      	adds	r3, #2
 8009c76:	e7c7      	b.n	8009c08 <_printf_common+0x58>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	4641      	mov	r1, r8
 8009c7e:	4638      	mov	r0, r7
 8009c80:	47c8      	blx	r9
 8009c82:	3001      	adds	r0, #1
 8009c84:	d0e6      	beq.n	8009c54 <_printf_common+0xa4>
 8009c86:	3601      	adds	r6, #1
 8009c88:	e7d9      	b.n	8009c3e <_printf_common+0x8e>
	...

08009c8c <_printf_i>:
 8009c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c90:	7e0f      	ldrb	r7, [r1, #24]
 8009c92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c94:	2f78      	cmp	r7, #120	@ 0x78
 8009c96:	4691      	mov	r9, r2
 8009c98:	4680      	mov	r8, r0
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	469a      	mov	sl, r3
 8009c9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ca2:	d807      	bhi.n	8009cb4 <_printf_i+0x28>
 8009ca4:	2f62      	cmp	r7, #98	@ 0x62
 8009ca6:	d80a      	bhi.n	8009cbe <_printf_i+0x32>
 8009ca8:	2f00      	cmp	r7, #0
 8009caa:	f000 80d2 	beq.w	8009e52 <_printf_i+0x1c6>
 8009cae:	2f58      	cmp	r7, #88	@ 0x58
 8009cb0:	f000 80b9 	beq.w	8009e26 <_printf_i+0x19a>
 8009cb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009cbc:	e03a      	b.n	8009d34 <_printf_i+0xa8>
 8009cbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009cc2:	2b15      	cmp	r3, #21
 8009cc4:	d8f6      	bhi.n	8009cb4 <_printf_i+0x28>
 8009cc6:	a101      	add	r1, pc, #4	@ (adr r1, 8009ccc <_printf_i+0x40>)
 8009cc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ccc:	08009d25 	.word	0x08009d25
 8009cd0:	08009d39 	.word	0x08009d39
 8009cd4:	08009cb5 	.word	0x08009cb5
 8009cd8:	08009cb5 	.word	0x08009cb5
 8009cdc:	08009cb5 	.word	0x08009cb5
 8009ce0:	08009cb5 	.word	0x08009cb5
 8009ce4:	08009d39 	.word	0x08009d39
 8009ce8:	08009cb5 	.word	0x08009cb5
 8009cec:	08009cb5 	.word	0x08009cb5
 8009cf0:	08009cb5 	.word	0x08009cb5
 8009cf4:	08009cb5 	.word	0x08009cb5
 8009cf8:	08009e39 	.word	0x08009e39
 8009cfc:	08009d63 	.word	0x08009d63
 8009d00:	08009df3 	.word	0x08009df3
 8009d04:	08009cb5 	.word	0x08009cb5
 8009d08:	08009cb5 	.word	0x08009cb5
 8009d0c:	08009e5b 	.word	0x08009e5b
 8009d10:	08009cb5 	.word	0x08009cb5
 8009d14:	08009d63 	.word	0x08009d63
 8009d18:	08009cb5 	.word	0x08009cb5
 8009d1c:	08009cb5 	.word	0x08009cb5
 8009d20:	08009dfb 	.word	0x08009dfb
 8009d24:	6833      	ldr	r3, [r6, #0]
 8009d26:	1d1a      	adds	r2, r3, #4
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6032      	str	r2, [r6, #0]
 8009d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d34:	2301      	movs	r3, #1
 8009d36:	e09d      	b.n	8009e74 <_printf_i+0x1e8>
 8009d38:	6833      	ldr	r3, [r6, #0]
 8009d3a:	6820      	ldr	r0, [r4, #0]
 8009d3c:	1d19      	adds	r1, r3, #4
 8009d3e:	6031      	str	r1, [r6, #0]
 8009d40:	0606      	lsls	r6, r0, #24
 8009d42:	d501      	bpl.n	8009d48 <_printf_i+0xbc>
 8009d44:	681d      	ldr	r5, [r3, #0]
 8009d46:	e003      	b.n	8009d50 <_printf_i+0xc4>
 8009d48:	0645      	lsls	r5, r0, #25
 8009d4a:	d5fb      	bpl.n	8009d44 <_printf_i+0xb8>
 8009d4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d50:	2d00      	cmp	r5, #0
 8009d52:	da03      	bge.n	8009d5c <_printf_i+0xd0>
 8009d54:	232d      	movs	r3, #45	@ 0x2d
 8009d56:	426d      	negs	r5, r5
 8009d58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d5c:	4859      	ldr	r0, [pc, #356]	@ (8009ec4 <_printf_i+0x238>)
 8009d5e:	230a      	movs	r3, #10
 8009d60:	e011      	b.n	8009d86 <_printf_i+0xfa>
 8009d62:	6821      	ldr	r1, [r4, #0]
 8009d64:	6833      	ldr	r3, [r6, #0]
 8009d66:	0608      	lsls	r0, r1, #24
 8009d68:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d6c:	d402      	bmi.n	8009d74 <_printf_i+0xe8>
 8009d6e:	0649      	lsls	r1, r1, #25
 8009d70:	bf48      	it	mi
 8009d72:	b2ad      	uxthmi	r5, r5
 8009d74:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d76:	4853      	ldr	r0, [pc, #332]	@ (8009ec4 <_printf_i+0x238>)
 8009d78:	6033      	str	r3, [r6, #0]
 8009d7a:	bf14      	ite	ne
 8009d7c:	230a      	movne	r3, #10
 8009d7e:	2308      	moveq	r3, #8
 8009d80:	2100      	movs	r1, #0
 8009d82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d86:	6866      	ldr	r6, [r4, #4]
 8009d88:	60a6      	str	r6, [r4, #8]
 8009d8a:	2e00      	cmp	r6, #0
 8009d8c:	bfa2      	ittt	ge
 8009d8e:	6821      	ldrge	r1, [r4, #0]
 8009d90:	f021 0104 	bicge.w	r1, r1, #4
 8009d94:	6021      	strge	r1, [r4, #0]
 8009d96:	b90d      	cbnz	r5, 8009d9c <_printf_i+0x110>
 8009d98:	2e00      	cmp	r6, #0
 8009d9a:	d04b      	beq.n	8009e34 <_printf_i+0x1a8>
 8009d9c:	4616      	mov	r6, r2
 8009d9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009da2:	fb03 5711 	mls	r7, r3, r1, r5
 8009da6:	5dc7      	ldrb	r7, [r0, r7]
 8009da8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009dac:	462f      	mov	r7, r5
 8009dae:	42bb      	cmp	r3, r7
 8009db0:	460d      	mov	r5, r1
 8009db2:	d9f4      	bls.n	8009d9e <_printf_i+0x112>
 8009db4:	2b08      	cmp	r3, #8
 8009db6:	d10b      	bne.n	8009dd0 <_printf_i+0x144>
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	07df      	lsls	r7, r3, #31
 8009dbc:	d508      	bpl.n	8009dd0 <_printf_i+0x144>
 8009dbe:	6923      	ldr	r3, [r4, #16]
 8009dc0:	6861      	ldr	r1, [r4, #4]
 8009dc2:	4299      	cmp	r1, r3
 8009dc4:	bfde      	ittt	le
 8009dc6:	2330      	movle	r3, #48	@ 0x30
 8009dc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009dcc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009dd0:	1b92      	subs	r2, r2, r6
 8009dd2:	6122      	str	r2, [r4, #16]
 8009dd4:	f8cd a000 	str.w	sl, [sp]
 8009dd8:	464b      	mov	r3, r9
 8009dda:	aa03      	add	r2, sp, #12
 8009ddc:	4621      	mov	r1, r4
 8009dde:	4640      	mov	r0, r8
 8009de0:	f7ff fee6 	bl	8009bb0 <_printf_common>
 8009de4:	3001      	adds	r0, #1
 8009de6:	d14a      	bne.n	8009e7e <_printf_i+0x1f2>
 8009de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dec:	b004      	add	sp, #16
 8009dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	f043 0320 	orr.w	r3, r3, #32
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	4833      	ldr	r0, [pc, #204]	@ (8009ec8 <_printf_i+0x23c>)
 8009dfc:	2778      	movs	r7, #120	@ 0x78
 8009dfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	6831      	ldr	r1, [r6, #0]
 8009e06:	061f      	lsls	r7, r3, #24
 8009e08:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e0c:	d402      	bmi.n	8009e14 <_printf_i+0x188>
 8009e0e:	065f      	lsls	r7, r3, #25
 8009e10:	bf48      	it	mi
 8009e12:	b2ad      	uxthmi	r5, r5
 8009e14:	6031      	str	r1, [r6, #0]
 8009e16:	07d9      	lsls	r1, r3, #31
 8009e18:	bf44      	itt	mi
 8009e1a:	f043 0320 	orrmi.w	r3, r3, #32
 8009e1e:	6023      	strmi	r3, [r4, #0]
 8009e20:	b11d      	cbz	r5, 8009e2a <_printf_i+0x19e>
 8009e22:	2310      	movs	r3, #16
 8009e24:	e7ac      	b.n	8009d80 <_printf_i+0xf4>
 8009e26:	4827      	ldr	r0, [pc, #156]	@ (8009ec4 <_printf_i+0x238>)
 8009e28:	e7e9      	b.n	8009dfe <_printf_i+0x172>
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	f023 0320 	bic.w	r3, r3, #32
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	e7f6      	b.n	8009e22 <_printf_i+0x196>
 8009e34:	4616      	mov	r6, r2
 8009e36:	e7bd      	b.n	8009db4 <_printf_i+0x128>
 8009e38:	6833      	ldr	r3, [r6, #0]
 8009e3a:	6825      	ldr	r5, [r4, #0]
 8009e3c:	6961      	ldr	r1, [r4, #20]
 8009e3e:	1d18      	adds	r0, r3, #4
 8009e40:	6030      	str	r0, [r6, #0]
 8009e42:	062e      	lsls	r6, r5, #24
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	d501      	bpl.n	8009e4c <_printf_i+0x1c0>
 8009e48:	6019      	str	r1, [r3, #0]
 8009e4a:	e002      	b.n	8009e52 <_printf_i+0x1c6>
 8009e4c:	0668      	lsls	r0, r5, #25
 8009e4e:	d5fb      	bpl.n	8009e48 <_printf_i+0x1bc>
 8009e50:	8019      	strh	r1, [r3, #0]
 8009e52:	2300      	movs	r3, #0
 8009e54:	6123      	str	r3, [r4, #16]
 8009e56:	4616      	mov	r6, r2
 8009e58:	e7bc      	b.n	8009dd4 <_printf_i+0x148>
 8009e5a:	6833      	ldr	r3, [r6, #0]
 8009e5c:	1d1a      	adds	r2, r3, #4
 8009e5e:	6032      	str	r2, [r6, #0]
 8009e60:	681e      	ldr	r6, [r3, #0]
 8009e62:	6862      	ldr	r2, [r4, #4]
 8009e64:	2100      	movs	r1, #0
 8009e66:	4630      	mov	r0, r6
 8009e68:	f7f6 f9ba 	bl	80001e0 <memchr>
 8009e6c:	b108      	cbz	r0, 8009e72 <_printf_i+0x1e6>
 8009e6e:	1b80      	subs	r0, r0, r6
 8009e70:	6060      	str	r0, [r4, #4]
 8009e72:	6863      	ldr	r3, [r4, #4]
 8009e74:	6123      	str	r3, [r4, #16]
 8009e76:	2300      	movs	r3, #0
 8009e78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e7c:	e7aa      	b.n	8009dd4 <_printf_i+0x148>
 8009e7e:	6923      	ldr	r3, [r4, #16]
 8009e80:	4632      	mov	r2, r6
 8009e82:	4649      	mov	r1, r9
 8009e84:	4640      	mov	r0, r8
 8009e86:	47d0      	blx	sl
 8009e88:	3001      	adds	r0, #1
 8009e8a:	d0ad      	beq.n	8009de8 <_printf_i+0x15c>
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	079b      	lsls	r3, r3, #30
 8009e90:	d413      	bmi.n	8009eba <_printf_i+0x22e>
 8009e92:	68e0      	ldr	r0, [r4, #12]
 8009e94:	9b03      	ldr	r3, [sp, #12]
 8009e96:	4298      	cmp	r0, r3
 8009e98:	bfb8      	it	lt
 8009e9a:	4618      	movlt	r0, r3
 8009e9c:	e7a6      	b.n	8009dec <_printf_i+0x160>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	4632      	mov	r2, r6
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	47d0      	blx	sl
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d09d      	beq.n	8009de8 <_printf_i+0x15c>
 8009eac:	3501      	adds	r5, #1
 8009eae:	68e3      	ldr	r3, [r4, #12]
 8009eb0:	9903      	ldr	r1, [sp, #12]
 8009eb2:	1a5b      	subs	r3, r3, r1
 8009eb4:	42ab      	cmp	r3, r5
 8009eb6:	dcf2      	bgt.n	8009e9e <_printf_i+0x212>
 8009eb8:	e7eb      	b.n	8009e92 <_printf_i+0x206>
 8009eba:	2500      	movs	r5, #0
 8009ebc:	f104 0619 	add.w	r6, r4, #25
 8009ec0:	e7f5      	b.n	8009eae <_printf_i+0x222>
 8009ec2:	bf00      	nop
 8009ec4:	0800a109 	.word	0x0800a109
 8009ec8:	0800a11a 	.word	0x0800a11a

08009ecc <__malloc_lock>:
 8009ecc:	4801      	ldr	r0, [pc, #4]	@ (8009ed4 <__malloc_lock+0x8>)
 8009ece:	f7ff bc65 	b.w	800979c <__retarget_lock_acquire_recursive>
 8009ed2:	bf00      	nop
 8009ed4:	20001f80 	.word	0x20001f80

08009ed8 <__malloc_unlock>:
 8009ed8:	4801      	ldr	r0, [pc, #4]	@ (8009ee0 <__malloc_unlock+0x8>)
 8009eda:	f7ff bc60 	b.w	800979e <__retarget_lock_release_recursive>
 8009ede:	bf00      	nop
 8009ee0:	20001f80 	.word	0x20001f80

08009ee4 <_realloc_r>:
 8009ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee8:	4680      	mov	r8, r0
 8009eea:	4615      	mov	r5, r2
 8009eec:	460c      	mov	r4, r1
 8009eee:	b921      	cbnz	r1, 8009efa <_realloc_r+0x16>
 8009ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	f7ff bddb 	b.w	8009ab0 <_malloc_r>
 8009efa:	b92a      	cbnz	r2, 8009f08 <_realloc_r+0x24>
 8009efc:	f000 f84a 	bl	8009f94 <_free_r>
 8009f00:	2400      	movs	r4, #0
 8009f02:	4620      	mov	r0, r4
 8009f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f08:	f000 f88e 	bl	800a028 <_malloc_usable_size_r>
 8009f0c:	4285      	cmp	r5, r0
 8009f0e:	4606      	mov	r6, r0
 8009f10:	d802      	bhi.n	8009f18 <_realloc_r+0x34>
 8009f12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009f16:	d8f4      	bhi.n	8009f02 <_realloc_r+0x1e>
 8009f18:	4629      	mov	r1, r5
 8009f1a:	4640      	mov	r0, r8
 8009f1c:	f7ff fdc8 	bl	8009ab0 <_malloc_r>
 8009f20:	4607      	mov	r7, r0
 8009f22:	2800      	cmp	r0, #0
 8009f24:	d0ec      	beq.n	8009f00 <_realloc_r+0x1c>
 8009f26:	42b5      	cmp	r5, r6
 8009f28:	462a      	mov	r2, r5
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	bf28      	it	cs
 8009f2e:	4632      	movcs	r2, r6
 8009f30:	f7ff fc36 	bl	80097a0 <memcpy>
 8009f34:	4621      	mov	r1, r4
 8009f36:	4640      	mov	r0, r8
 8009f38:	f000 f82c 	bl	8009f94 <_free_r>
 8009f3c:	463c      	mov	r4, r7
 8009f3e:	e7e0      	b.n	8009f02 <_realloc_r+0x1e>

08009f40 <memmove>:
 8009f40:	4288      	cmp	r0, r1
 8009f42:	b510      	push	{r4, lr}
 8009f44:	eb01 0402 	add.w	r4, r1, r2
 8009f48:	d902      	bls.n	8009f50 <memmove+0x10>
 8009f4a:	4284      	cmp	r4, r0
 8009f4c:	4623      	mov	r3, r4
 8009f4e:	d807      	bhi.n	8009f60 <memmove+0x20>
 8009f50:	1e43      	subs	r3, r0, #1
 8009f52:	42a1      	cmp	r1, r4
 8009f54:	d008      	beq.n	8009f68 <memmove+0x28>
 8009f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f5e:	e7f8      	b.n	8009f52 <memmove+0x12>
 8009f60:	4402      	add	r2, r0
 8009f62:	4601      	mov	r1, r0
 8009f64:	428a      	cmp	r2, r1
 8009f66:	d100      	bne.n	8009f6a <memmove+0x2a>
 8009f68:	bd10      	pop	{r4, pc}
 8009f6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f72:	e7f7      	b.n	8009f64 <memmove+0x24>

08009f74 <_sbrk_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	4d06      	ldr	r5, [pc, #24]	@ (8009f90 <_sbrk_r+0x1c>)
 8009f78:	2300      	movs	r3, #0
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	4608      	mov	r0, r1
 8009f7e:	602b      	str	r3, [r5, #0]
 8009f80:	f7f6 fe62 	bl	8000c48 <_sbrk>
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	d102      	bne.n	8009f8e <_sbrk_r+0x1a>
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	b103      	cbz	r3, 8009f8e <_sbrk_r+0x1a>
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	bd38      	pop	{r3, r4, r5, pc}
 8009f90:	20001f8c 	.word	0x20001f8c

08009f94 <_free_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4605      	mov	r5, r0
 8009f98:	2900      	cmp	r1, #0
 8009f9a:	d041      	beq.n	800a020 <_free_r+0x8c>
 8009f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fa0:	1f0c      	subs	r4, r1, #4
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	bfb8      	it	lt
 8009fa6:	18e4      	addlt	r4, r4, r3
 8009fa8:	f7ff ff90 	bl	8009ecc <__malloc_lock>
 8009fac:	4a1d      	ldr	r2, [pc, #116]	@ (800a024 <_free_r+0x90>)
 8009fae:	6813      	ldr	r3, [r2, #0]
 8009fb0:	b933      	cbnz	r3, 8009fc0 <_free_r+0x2c>
 8009fb2:	6063      	str	r3, [r4, #4]
 8009fb4:	6014      	str	r4, [r2, #0]
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fbc:	f7ff bf8c 	b.w	8009ed8 <__malloc_unlock>
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	d908      	bls.n	8009fd6 <_free_r+0x42>
 8009fc4:	6820      	ldr	r0, [r4, #0]
 8009fc6:	1821      	adds	r1, r4, r0
 8009fc8:	428b      	cmp	r3, r1
 8009fca:	bf01      	itttt	eq
 8009fcc:	6819      	ldreq	r1, [r3, #0]
 8009fce:	685b      	ldreq	r3, [r3, #4]
 8009fd0:	1809      	addeq	r1, r1, r0
 8009fd2:	6021      	streq	r1, [r4, #0]
 8009fd4:	e7ed      	b.n	8009fb2 <_free_r+0x1e>
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	b10b      	cbz	r3, 8009fe0 <_free_r+0x4c>
 8009fdc:	42a3      	cmp	r3, r4
 8009fde:	d9fa      	bls.n	8009fd6 <_free_r+0x42>
 8009fe0:	6811      	ldr	r1, [r2, #0]
 8009fe2:	1850      	adds	r0, r2, r1
 8009fe4:	42a0      	cmp	r0, r4
 8009fe6:	d10b      	bne.n	800a000 <_free_r+0x6c>
 8009fe8:	6820      	ldr	r0, [r4, #0]
 8009fea:	4401      	add	r1, r0
 8009fec:	1850      	adds	r0, r2, r1
 8009fee:	4283      	cmp	r3, r0
 8009ff0:	6011      	str	r1, [r2, #0]
 8009ff2:	d1e0      	bne.n	8009fb6 <_free_r+0x22>
 8009ff4:	6818      	ldr	r0, [r3, #0]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	6053      	str	r3, [r2, #4]
 8009ffa:	4408      	add	r0, r1
 8009ffc:	6010      	str	r0, [r2, #0]
 8009ffe:	e7da      	b.n	8009fb6 <_free_r+0x22>
 800a000:	d902      	bls.n	800a008 <_free_r+0x74>
 800a002:	230c      	movs	r3, #12
 800a004:	602b      	str	r3, [r5, #0]
 800a006:	e7d6      	b.n	8009fb6 <_free_r+0x22>
 800a008:	6820      	ldr	r0, [r4, #0]
 800a00a:	1821      	adds	r1, r4, r0
 800a00c:	428b      	cmp	r3, r1
 800a00e:	bf04      	itt	eq
 800a010:	6819      	ldreq	r1, [r3, #0]
 800a012:	685b      	ldreq	r3, [r3, #4]
 800a014:	6063      	str	r3, [r4, #4]
 800a016:	bf04      	itt	eq
 800a018:	1809      	addeq	r1, r1, r0
 800a01a:	6021      	streq	r1, [r4, #0]
 800a01c:	6054      	str	r4, [r2, #4]
 800a01e:	e7ca      	b.n	8009fb6 <_free_r+0x22>
 800a020:	bd38      	pop	{r3, r4, r5, pc}
 800a022:	bf00      	nop
 800a024:	20001f88 	.word	0x20001f88

0800a028 <_malloc_usable_size_r>:
 800a028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a02c:	1f18      	subs	r0, r3, #4
 800a02e:	2b00      	cmp	r3, #0
 800a030:	bfbc      	itt	lt
 800a032:	580b      	ldrlt	r3, [r1, r0]
 800a034:	18c0      	addlt	r0, r0, r3
 800a036:	4770      	bx	lr

0800a038 <_init>:
 800a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03a:	bf00      	nop
 800a03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03e:	bc08      	pop	{r3}
 800a040:	469e      	mov	lr, r3
 800a042:	4770      	bx	lr

0800a044 <_fini>:
 800a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a046:	bf00      	nop
 800a048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04a:	bc08      	pop	{r3}
 800a04c:	469e      	mov	lr, r3
 800a04e:	4770      	bx	lr
