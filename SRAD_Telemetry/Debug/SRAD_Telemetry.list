
SRAD_Telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009948  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08009ae0  08009ae0  0000aae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b74  08009b74  0000b100  2**0
                  CONTENTS
  4 .ARM          00000008  08009b74  08009b74  0000ab74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b7c  08009b7c  0000b100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b7c  08009b7c  0000ab7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b80  08009b80  0000ab80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08009b84  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d04  20000100  08009c84  0000b100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e04  08009c84  0000be04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017af7  00000000  00000000  0000b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003836  00000000  00000000  00022c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00026460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e64  00000000  00000000  00027758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178a4  00000000  00000000  000285bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b2c  00000000  00000000  0003fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f50f  00000000  00000000  0005698c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5e9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e94  00000000  00000000  000e5ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ead74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009ac8 	.word	0x08009ac8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08009ac8 	.word	0x08009ac8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b5b0      	push	{r4, r5, r7, lr}
 80004ca:	b08e      	sub	sp, #56	@ 0x38
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
//e22 stm32 context and param struct
 e22trans transmitter = {
 80004ce:	4b1b      	ldr	r3, [pc, #108]	@ (800053c <main+0x74>)
 80004d0:	1d3c      	adds	r4, r7, #4
 80004d2:	461d      	mov	r5, r3
 80004d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e0:	682b      	ldr	r3, [r5, #0]
 80004e2:	6023      	str	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 ff0a 	bl	80012fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f834 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f900 	bl	80006f0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004f0:	f008 fdd4 	bl	800909c <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80004f4:	f000 f8d2 	bl	800069c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004f8:	f000 f898 	bl	800062c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart2, gpsBuff, sizeof(gpsBuff));
 80004fc:	2252      	movs	r2, #82	@ 0x52
 80004fe:	4910      	ldr	r1, [pc, #64]	@ (8000540 <main+0x78>)
 8000500:	4810      	ldr	r0, [pc, #64]	@ (8000544 <main+0x7c>)
 8000502:	f004 fbce 	bl	8004ca2 <HAL_UART_Receive_IT>
  HAL_SPI_Receive_IT(&hspi1, transmitRx, sizeof(transmitRx));
 8000506:	220a      	movs	r2, #10
 8000508:	490f      	ldr	r1, [pc, #60]	@ (8000548 <main+0x80>)
 800050a:	4810      	ldr	r0, [pc, #64]	@ (800054c <main+0x84>)
 800050c:	f003 fe38 	bl	8004180 <HAL_SPI_Receive_IT>


  sx126x_init(&transmitter);
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	4618      	mov	r0, r3
 8000514:	f000 f986 	bl	8000824 <sx126x_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  switch(sysFlag){
 8000518:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <main+0x88>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b0a      	cmp	r3, #10
 800051e:	d10b      	bne.n	8000538 <main+0x70>

	  //flag 10 is set once microcontroller gets a sentence from gps.
	  case 10: //write to transmitter FIFO buffer
		  	  sx126x_write_buffer(&transmitter.hardwareConfig,0x06,gpsBuff,sizeof(gpsBuff));
 8000520:	1d38      	adds	r0, r7, #4
 8000522:	2352      	movs	r3, #82	@ 0x52
 8000524:	4a06      	ldr	r2, [pc, #24]	@ (8000540 <main+0x78>)
 8000526:	2106      	movs	r1, #6
 8000528:	f000 fc33 	bl	8000d92 <sx126x_write_buffer>
		  	  //transmit once last trasnsmition has been sent.

		  		sx126x_set_tx(&transmitter.hardwareConfig, 0x00 );
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f000 fb5d 	bl	8000bf0 <sx126x_set_tx>

		  	  break;
 8000536:	e000      	b.n	800053a <main+0x72>



	  default: break;
 8000538:	bf00      	nop
	  switch(sysFlag){
 800053a:	e7ed      	b.n	8000518 <main+0x50>
 800053c:	08009ae0 	.word	0x08009ae0
 8000540:	200001bc 	.word	0x200001bc
 8000544:	20000174 	.word	0x20000174
 8000548:	20000210 	.word	0x20000210
 800054c:	2000011c 	.word	0x2000011c
 8000550:	20000000 	.word	0x20000000

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	@ 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	@ 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f009 fa84 	bl	8009a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b29      	ldr	r3, [pc, #164]	@ (8000624 <SystemClock_Config+0xd0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	4a28      	ldr	r2, [pc, #160]	@ (8000624 <SystemClock_Config+0xd0>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	@ 0x40
 8000588:	4b26      	ldr	r3, [pc, #152]	@ (8000624 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <SystemClock_Config+0xd4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a22      	ldr	r2, [pc, #136]	@ (8000628 <SystemClock_Config+0xd4>)
 800059e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b20      	ldr	r3, [pc, #128]	@ (8000628 <SystemClock_Config+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005b0:	2303      	movs	r3, #3
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ba:	2301      	movs	r3, #1
 80005bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005be:	2310      	movs	r3, #16
 80005c0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005cc:	2319      	movs	r3, #25
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005d0:	23c0      	movs	r3, #192	@ 0xc0
 80005d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 fce5 	bl	8002fb0 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005ec:	f000 f9c4 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 ff48 	bl	80034a0 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000616:	f000 f9af 	bl	8000978 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	@ 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000630:	4b18      	ldr	r3, [pc, #96]	@ (8000694 <MX_SPI1_Init+0x68>)
 8000632:	4a19      	ldr	r2, [pc, #100]	@ (8000698 <MX_SPI1_Init+0x6c>)
 8000634:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000636:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <MX_SPI1_Init+0x68>)
 8000638:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800063c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800063e:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <MX_SPI1_Init+0x68>)
 8000640:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000644:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_SPI1_Init+0x68>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800064c:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_SPI1_Init+0x68>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <MX_SPI1_Init+0x68>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000658:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_SPI1_Init+0x68>)
 800065a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800065e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_SPI1_Init+0x68>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <MX_SPI1_Init+0x68>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_SPI1_Init+0x68>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <MX_SPI1_Init+0x68>)
 8000674:	2200      	movs	r2, #0
 8000676:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_SPI1_Init+0x68>)
 800067a:	220a      	movs	r2, #10
 800067c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_SPI1_Init+0x68>)
 8000680:	f003 f8ee 	bl	8003860 <HAL_SPI_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800068a:	f000 f975 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000011c 	.word	0x2000011c
 8000698:	40013000 	.word	0x40013000

0800069c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	@ (80006ec <MX_USART2_UART_Init+0x50>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006a6:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f004 fa95 	bl	8004c02 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006de:	f000 f94b 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000174 	.word	0x20000174
 80006ec:	40004400 	.word	0x40004400

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b43      	ldr	r3, [pc, #268]	@ (8000818 <MX_GPIO_Init+0x128>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a42      	ldr	r2, [pc, #264]	@ (8000818 <MX_GPIO_Init+0x128>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b40      	ldr	r3, [pc, #256]	@ (8000818 <MX_GPIO_Init+0x128>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	4b3c      	ldr	r3, [pc, #240]	@ (8000818 <MX_GPIO_Init+0x128>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a3b      	ldr	r2, [pc, #236]	@ (8000818 <MX_GPIO_Init+0x128>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b39      	ldr	r3, [pc, #228]	@ (8000818 <MX_GPIO_Init+0x128>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b35      	ldr	r3, [pc, #212]	@ (8000818 <MX_GPIO_Init+0x128>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a34      	ldr	r2, [pc, #208]	@ (8000818 <MX_GPIO_Init+0x128>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b32      	ldr	r3, [pc, #200]	@ (8000818 <MX_GPIO_Init+0x128>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b2e      	ldr	r3, [pc, #184]	@ (8000818 <MX_GPIO_Init+0x128>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a2d      	ldr	r2, [pc, #180]	@ (8000818 <MX_GPIO_Init+0x128>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b2b      	ldr	r3, [pc, #172]	@ (8000818 <MX_GPIO_Init+0x128>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800077c:	4827      	ldr	r0, [pc, #156]	@ (800081c <MX_GPIO_Init+0x12c>)
 800077e:	f001 f993 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8000788:	4825      	ldr	r0, [pc, #148]	@ (8000820 <MX_GPIO_Init+0x130>)
 800078a:	f001 f98d 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800078e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	481d      	ldr	r0, [pc, #116]	@ (800081c <MX_GPIO_Init+0x12c>)
 80007a8:	f000 ffe2 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007ac:	2340      	movs	r3, #64	@ 0x40
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	4818      	ldr	r0, [pc, #96]	@ (8000820 <MX_GPIO_Init+0x130>)
 80007c0:	f000 ffd6 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80007c4:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	4810      	ldr	r0, [pc, #64]	@ (8000820 <MX_GPIO_Init+0x130>)
 80007de:	f000 ffc7 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	4809      	ldr	r0, [pc, #36]	@ (8000820 <MX_GPIO_Init+0x130>)
 80007fa:	f000 ffb9 	bl	8001770 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	2017      	movs	r0, #23
 8000804:	f000 feeb 	bl	80015de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000808:	2017      	movs	r0, #23
 800080a:	f000 ff04 	bl	8001616 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	@ 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000
 8000820:	40020400 	.word	0x40020400

08000824 <sx126x_init>:

/* USER CODE BEGIN 4 */
void sx126x_init(e22trans *transmitter){
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af02      	add	r7, sp, #8
 800082a:	6078      	str	r0, [r7, #4]
// Follows sequence of operations laid out it SX126X data sheet
// for basic TX operation
	sx126x_context* stm32Context = &transmitter->hardwareConfig ;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	60fb      	str	r3, [r7, #12]

	//Reset Transmitter, Reset is active Low.
	sx126x_hal_reset(stm32Context);
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f000 fcdf 	bl	80011f4 <sx126x_hal_reset>
	//Wakeup trasnmitter
	sx126x_hal_wakeup(stm32Context);
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f000 fcfa 	bl	8001230 <sx126x_hal_wakeup>
	//Set operating mode to standby using RC
	sx126x_set_standby(stm32Context,SX126X_STANDBY_CFG_RC);
 800083c:	2100      	movs	r1, #0
 800083e:	68f8      	ldr	r0, [r7, #12]
 8000840:	f000 f9be 	bl	8000bc0 <sx126x_set_standby>
	//Configures DIO3 to supply power to an external TCXO (Temperature Compensated Crystal Oscillator)
	//Output 1.8V as stated in E22 datasheet, could be 3.3V as shown in their screen capture.
	sx126x_set_dio3_as_tcxo_ctrl(stm32Context,SX126X_TCXO_CTRL_1_8V ,320);
 8000844:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000848:	2102      	movs	r1, #2
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f000 fafb 	bl	8000e46 <sx126x_set_dio3_as_tcxo_ctrl>
	//Calibrate to value given in E22 data sheet, which calibrates all settings, should take 3.5ms
	sx126x_cal(stm32Context,0xFF);
 8000850:	21ff      	movs	r1, #255	@ 0xff
 8000852:	68f8      	ldr	r0, [r7, #12]
 8000854:	f000 fa1c 	bl	8000c90 <sx126x_cal>
	//set regulator mode to DC_DC buck converter
	sx126x_set_reg_mode(stm32Context,SX126X_REG_MODE_DCDC);
 8000858:	2101      	movs	r1, #1
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f000 fa00 	bl	8000c60 <sx126x_set_reg_mode>
	//Configure  to use Lora
	sx126x_set_pkt_type(stm32Context,SX126X_PKT_TYPE_LORA );
 8000860:	2101      	movs	r1, #1
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f000 fb49 	bl	8000efa <sx126x_set_pkt_type>
	//3. Set frequency
	sx126x_set_rf_freq(stm32Context,RF_FREQUENCY);
 8000868:	4924      	ldr	r1, [pc, #144]	@ (80008fc <sx126x_init+0xd8>)
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f000 fb0f 	bl	8000e8e <sx126x_set_rf_freq>
	//4. set Pa params
	sx126x_set_pa_cfg(stm32Context, &transmitter->paParams);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3326      	adds	r3, #38	@ 0x26
 8000874:	4619      	mov	r1, r3
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	f000 fa22 	bl	8000cc0 <sx126x_set_pa_cfg>
	//setlora for private network
	sx126x_write_register(stm32Context,0x0740,(uint8_t*)0x14,1);
 800087c:	2301      	movs	r3, #1
 800087e:	2214      	movs	r2, #20
 8000880:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f000 fa3c 	bl	8000d02 <sx126x_write_register>
	sx126x_write_register(stm32Context,0x0741,(uint8_t*)0x24,1);
 800088a:	2301      	movs	r3, #1
 800088c:	2224      	movs	r2, #36	@ 0x24
 800088e:	f240 7141 	movw	r1, #1857	@ 0x741
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f000 fa35 	bl	8000d02 <sx126x_write_register>
	//Sset trasnmit params
	sx126x_set_tx_params(stm32Context,PWR_DBM,SX126X_RAMP_40_US);
 8000898:	2202      	movs	r2, #2
 800089a:	2104      	movs	r1, #4
 800089c:	68f8      	ldr	r0, [r7, #12]
 800089e:	f000 fb44 	bl	8000f2a <sx126x_set_tx_params>
	//Define where the data payload will be stored.
	sx126x_set_buffer_base_address(stm32Context,0x00,0x90);
 80008a2:	2290      	movs	r2, #144	@ 0x90
 80008a4:	2100      	movs	r1, #0
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f000 fb8d 	bl	8000fc6 <sx126x_set_buffer_base_address>
	//Define Modulation parameters
	sx126x_set_lora_mod_params(stm32Context,&transmitter->loraParams);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	331c      	adds	r3, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f000 fb55 	bl	8000f62 <sx126x_set_lora_mod_params>

	uint8_t irqMask  = 0x01;
 80008b8:	2301      	movs	r3, #1
 80008ba:	72fb      	strb	r3, [r7, #11]
	uint8_t dio1Mask = 0x01;
 80008bc:	2301      	movs	r3, #1
 80008be:	72bb      	strb	r3, [r7, #10]
	uint8_t dio2Mask = 0x00;
 80008c0:	2300      	movs	r3, #0
 80008c2:	727b      	strb	r3, [r7, #9]
	uint8_t dio3Mask = 0x00;
 80008c4:	2300      	movs	r3, #0
 80008c6:	723b      	strb	r3, [r7, #8]

	//Set DIO 1 for
	sx126x_set_dio_irq_params(stm32Context, irqMask , dio1Mask, dio2Mask, dio3Mask);
 80008c8:	7afb      	ldrb	r3, [r7, #11]
 80008ca:	b299      	uxth	r1, r3
 80008cc:	7abb      	ldrb	r3, [r7, #10]
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	7a7b      	ldrb	r3, [r7, #9]
 80008d2:	b298      	uxth	r0, r3
 80008d4:	7a3b      	ldrb	r3, [r7, #8]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	4603      	mov	r3, r0
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f000 fa75 	bl	8000dcc <sx126x_set_dio_irq_params>
	//copy callsign to first 6 elements of fifo buffer
	sx126x_write_buffer(stm32Context,0x00,transmitter->callSign,6);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f103 022b 	add.w	r2, r3, #43	@ 0x2b
 80008e8:	2306      	movs	r3, #6
 80008ea:	2100      	movs	r1, #0
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f000 fa50 	bl	8000d92 <sx126x_write_buffer>


}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	3689cac0 	.word	0x3689cac0

08000900 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_8){
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000910:	d102      	bne.n	8000918 <HAL_GPIO_EXTI_Callback+0x18>
       txDone = true; //set transmission flag flag
 8000912:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <HAL_GPIO_EXTI_Callback+0x24>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
    }
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	2000021a 	.word	0x2000021a

08000928 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]



    // Re-enable SPI Receive interrupt for the next data
	HAL_SPI_Receive_IT(&hspi1, transmitRx, sizeof(transmitRx));
 8000930:	220a      	movs	r2, #10
 8000932:	4904      	ldr	r1, [pc, #16]	@ (8000944 <HAL_SPI_RxCpltCallback+0x1c>)
 8000934:	4804      	ldr	r0, [pc, #16]	@ (8000948 <HAL_SPI_RxCpltCallback+0x20>)
 8000936:	f003 fc23 	bl	8004180 <HAL_SPI_Receive_IT>


}	// Re-enable SPI Receive interrupt for the next data
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000210 	.word	0x20000210
 8000948:	2000011c 	.word	0x2000011c

0800094c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	 // Re-enable UART Receive interrupt for the next data
	HAL_UART_Receive_IT(&huart2, gpsBuff, sizeof(gpsBuff)); // 10 bytes or your buffer size
 8000954:	2252      	movs	r2, #82	@ 0x52
 8000956:	4905      	ldr	r1, [pc, #20]	@ (800096c <HAL_UART_RxCpltCallback+0x20>)
 8000958:	4805      	ldr	r0, [pc, #20]	@ (8000970 <HAL_UART_RxCpltCallback+0x24>)
 800095a:	f004 f9a2 	bl	8004ca2 <HAL_UART_Receive_IT>

	// Set system flag for gps sentence transmission
	sysFlag = 10;
 800095e:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <HAL_UART_RxCpltCallback+0x28>)
 8000960:	220a      	movs	r2, #10
 8000962:	701a      	strb	r2, [r3, #0]



}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200001bc 	.word	0x200001bc
 8000970:	20000174 	.word	0x20000174
 8000974:	20000000 	.word	0x20000000

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	4a0f      	ldr	r2, [pc, #60]	@ (80009d0 <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000998:	6453      	str	r3, [r2, #68]	@ 0x44
 800099a:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	4a08      	ldr	r2, [pc, #32]	@ (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a68 <HAL_SPI_MspInit+0x94>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d133      	bne.n	8000a5e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <HAL_SPI_MspInit+0x98>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <HAL_SPI_MspInit+0x98>)
 8000a00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <HAL_SPI_MspInit+0x98>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_SPI_MspInit+0x98>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a14      	ldr	r2, [pc, #80]	@ (8000a6c <HAL_SPI_MspInit+0x98>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_SPI_MspInit+0x98>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a2e:	2338      	movs	r3, #56	@ 0x38
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4809      	ldr	r0, [pc, #36]	@ (8000a70 <HAL_SPI_MspInit+0x9c>)
 8000a4a:	f000 fe91 	bl	8001770 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2023      	movs	r0, #35	@ 0x23
 8000a54:	f000 fdc3 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a58:	2023      	movs	r0, #35	@ 0x23
 8000a5a:	f000 fddc 	bl	8001616 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	@ 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40013000 	.word	0x40013000
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400

08000a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a1d      	ldr	r2, [pc, #116]	@ (8000b08 <HAL_UART_MspInit+0x94>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d133      	bne.n	8000afe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <HAL_UART_MspInit+0x98>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000b0c <HAL_UART_MspInit+0x98>)
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <HAL_UART_MspInit+0x98>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <HAL_UART_MspInit+0x98>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a14      	ldr	r2, [pc, #80]	@ (8000b0c <HAL_UART_MspInit+0x98>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <HAL_UART_MspInit+0x98>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4809      	ldr	r0, [pc, #36]	@ (8000b10 <HAL_UART_MspInit+0x9c>)
 8000aea:	f000 fe41 	bl	8001770 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	2026      	movs	r0, #38	@ 0x26
 8000af4:	f000 fd73 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000af8:	2026      	movs	r0, #38	@ 0x26
 8000afa:	f000 fd8c 	bl	8001616 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	@ 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020000 	.word	0x40020000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <NMI_Handler+0x4>

08000b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6a:	f000 fc19 	bl	80013a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000b76:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000b7a:	f000 ffaf 	bl	8001adc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <SPI1_IRQHandler+0x10>)
 8000b8a:	f003 fc1f 	bl	80043cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000011c 	.word	0x2000011c

08000b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <USART2_IRQHandler+0x10>)
 8000b9e:	f004 f8a5 	bl	8004cec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000174 	.word	0x20000174

08000bac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bb0:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <OTG_FS_IRQHandler+0x10>)
 8000bb2:	f001 f8ef 	bl	8001d94 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20001700 	.word	0x20001700

08000bc0 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_STANDBY] = {
 8000bcc:	2380      	movs	r3, #128	@ 0x80
 8000bce:	733b      	strb	r3, [r7, #12]
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	737b      	strb	r3, [r7, #13]
        SX126X_SET_STANDBY,
        ( uint8_t ) cfg,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 8000bd4:	f107 010c 	add.w	r1, r7, #12
 8000bd8:	2300      	movs	r3, #0
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2300      	movs	r3, #0
 8000bde:	2202      	movs	r2, #2
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f000 fa7c 	bl	80010de <sx126x_hal_write>
 8000be6:	4603      	mov	r3, r0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8000c00:	d301      	bcc.n	8000c06 <sx126x_set_tx+0x16>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 8000c02:	2302      	movs	r3, #2
 8000c04:	e008      	b.n	8000c18 <sx126x_set_tx+0x28>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 8000c06:	6838      	ldr	r0, [r7, #0]
 8000c08:	f000 fa20 	bl	800104c <sx126x_convert_timeout_in_ms_to_rtc_step>
 8000c0c:	60f8      	str	r0, [r7, #12]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8000c0e:	68f9      	ldr	r1, [r7, #12]
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 f805 	bl	8000c20 <sx126x_set_tx_with_timeout_in_rtc_step>
 8000c16:	4603      	mov	r3, r0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 8000c2a:	2383      	movs	r3, #131	@ 0x83
 8000c2c:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	0c1b      	lsrs	r3, r3, #16
 8000c32:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 8000c34:	737b      	strb	r3, [r7, #13]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 8000c3c:	73bb      	strb	r3, [r7, #14]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 8000c42:	73fb      	strb	r3, [r7, #15]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 8000c44:	f107 010c 	add.w	r1, r7, #12
 8000c48:	2300      	movs	r3, #0
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	2204      	movs	r2, #4
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f000 fa44 	bl	80010de <sx126x_hal_write>
 8000c56:	4603      	mov	r3, r0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = {
 8000c6c:	2396      	movs	r3, #150	@ 0x96
 8000c6e:	733b      	strb	r3, [r7, #12]
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	737b      	strb	r3, [r7, #13]
        SX126X_SET_REGULATOR_MODE,
        ( uint8_t ) mode,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 8000c74:	f107 010c 	add.w	r1, r7, #12
 8000c78:	2300      	movs	r3, #0
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	2202      	movs	r2, #2
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f000 fa2c 	bl	80010de <sx126x_hal_write>
 8000c86:	4603      	mov	r3, r0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_CALIBRATE] = {
 8000c9c:	2389      	movs	r3, #137	@ 0x89
 8000c9e:	733b      	strb	r3, [r7, #12]
 8000ca0:	78fb      	ldrb	r3, [r7, #3]
 8000ca2:	737b      	strb	r3, [r7, #13]
        SX126X_CALIBRATE,
        ( uint8_t ) param,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 8000ca4:	f107 010c 	add.w	r1, r7, #12
 8000ca8:	2300      	movs	r3, #0
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2300      	movs	r3, #0
 8000cae:	2202      	movs	r2, #2
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f000 fa14 	bl	80010de <sx126x_hal_write>
 8000cb6:	4603      	mov	r3, r0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <sx126x_set_pa_cfg>:

    return sx126x_cal_img( context, freq1, freq2 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000cca:	2395      	movs	r3, #149	@ 0x95
 8000ccc:	723b      	strb	r3, [r7, #8]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000cd2:	727b      	strb	r3, [r7, #9]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000cd8:	72bb      	strb	r3, [r7, #10]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000cde:	72fb      	strb	r3, [r7, #11]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000ce4:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 8000ce6:	f107 0108 	add.w	r1, r7, #8
 8000cea:	2300      	movs	r3, #0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2205      	movs	r2, #5
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f9f3 	bl	80010de <sx126x_hal_write>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b088      	sub	sp, #32
 8000d06:	af02      	add	r7, sp, #8
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	460b      	mov	r3, r1
 8000d10:	817b      	strh	r3, [r7, #10]
 8000d12:	4613      	mov	r3, r2
 8000d14:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 8000d16:	230d      	movs	r3, #13
 8000d18:	753b      	strb	r3, [r7, #20]
        SX126X_WRITE_REGISTER,
        ( uint8_t )( address >> 8 ),
 8000d1a:	897b      	ldrh	r3, [r7, #10]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 8000d22:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 8000d24:	897b      	ldrh	r3, [r7, #10]
 8000d26:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 8000d28:	75bb      	strb	r3, [r7, #22]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 8000d2a:	7a7b      	ldrb	r3, [r7, #9]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	f107 0114 	add.w	r1, r7, #20
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2203      	movs	r2, #3
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f000 f9d0 	bl	80010de <sx126x_hal_write>
 8000d3e:	4603      	mov	r3, r0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af02      	add	r7, sp, #8
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	461a      	mov	r2, r3
 8000d54:	460b      	mov	r3, r1
 8000d56:	817b      	strh	r3, [r7, #10]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 8000d5c:	231d      	movs	r3, #29
 8000d5e:	753b      	strb	r3, [r7, #20]
        SX126X_READ_REGISTER,
        ( uint8_t )( address >> 8 ),
 8000d60:	897b      	ldrh	r3, [r7, #10]
 8000d62:	0a1b      	lsrs	r3, r3, #8
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 8000d68:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 8000d6a:	897b      	ldrh	r3, [r7, #10]
 8000d6c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 8000d6e:	75bb      	strb	r3, [r7, #22]
 8000d70:	2300      	movs	r3, #0
 8000d72:	75fb      	strb	r3, [r7, #23]
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 8000d74:	7a7b      	ldrb	r3, [r7, #9]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	f107 0114 	add.w	r1, r7, #20
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2204      	movs	r2, #4
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f000 f9e6 	bl	8001154 <sx126x_hal_read>
 8000d88:	4603      	mov	r3, r0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b088      	sub	sp, #32
 8000d96:	af02      	add	r7, sp, #8
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	460b      	mov	r3, r1
 8000da0:	72fb      	strb	r3, [r7, #11]
 8000da2:	4613      	mov	r3, r2
 8000da4:	72bb      	strb	r3, [r7, #10]
    const uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = {
 8000da6:	230e      	movs	r3, #14
 8000da8:	753b      	strb	r3, [r7, #20]
 8000daa:	7afb      	ldrb	r3, [r7, #11]
 8000dac:	757b      	strb	r3, [r7, #21]
        SX126X_WRITE_BUFFER,
        offset,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 8000dae:	7abb      	ldrb	r3, [r7, #10]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	f107 0114 	add.w	r1, r7, #20
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2202      	movs	r2, #2
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f000 f98e 	bl	80010de <sx126x_hal_write>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	@ 0x28
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4603      	mov	r3, r0
 8000ddc:	817b      	strh	r3, [r7, #10]
 8000dde:	460b      	mov	r3, r1
 8000de0:	813b      	strh	r3, [r7, #8]
 8000de2:	4613      	mov	r3, r2
 8000de4:	80fb      	strh	r3, [r7, #6]
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000de6:	2308      	movs	r3, #8
 8000de8:	753b      	strb	r3, [r7, #20]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 8000dea:	897b      	ldrh	r3, [r7, #10]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000df2:	757b      	strb	r3, [r7, #21]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 8000df4:	897b      	ldrh	r3, [r7, #10]
 8000df6:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000df8:	75bb      	strb	r3, [r7, #22]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 8000dfa:	893b      	ldrh	r3, [r7, #8]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000e02:	75fb      	strb	r3, [r7, #23]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 8000e04:	893b      	ldrh	r3, [r7, #8]
 8000e06:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000e08:	763b      	strb	r3, [r7, #24]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000e12:	767b      	strb	r3, [r7, #25]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000e18:	76bb      	strb	r3, [r7, #26]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 8000e1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000e22:	76fb      	strb	r3, [r7, #27]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 8000e24:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000e26:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8000e28:	773b      	strb	r3, [r7, #28]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 8000e2a:	f107 0114 	add.w	r1, r7, #20
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2300      	movs	r3, #0
 8000e34:	2209      	movs	r2, #9
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	f000 f951 	bl	80010de <sx126x_hal_write>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3720      	adds	r7, #32
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <sx126x_set_dio3_as_tcxo_ctrl>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
}

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b088      	sub	sp, #32
 8000e4a:	af02      	add	r7, sp, #8
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	72fb      	strb	r3, [r7, #11]
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8000e54:	2397      	movs	r3, #151	@ 0x97
 8000e56:	743b      	strb	r3, [r7, #16]
 8000e58:	7afb      	ldrb	r3, [r7, #11]
 8000e5a:	747b      	strb	r3, [r7, #17]
        SX126X_SET_DIO3_AS_TCXO_CTRL, ( uint8_t ) tcxo_voltage,    ( uint8_t )( timeout >> 16 ),
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	0c1b      	lsrs	r3, r3, #16
 8000e60:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8000e62:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	0a1b      	lsrs	r3, r3, #8
 8000e68:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8000e6a:	74fb      	strb	r3, [r7, #19]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8000e70:	753b      	strb	r3, [r7, #20]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 8000e72:	f107 0110 	add.w	r1, r7, #16
 8000e76:	2300      	movs	r3, #0
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	2205      	movs	r2, #5
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	f000 f92d 	bl	80010de <sx126x_hal_write>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f000 f8b1 	bl	8001000 <sx126x_convert_freq_in_hz_to_pll_step>
 8000e9e:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 8000ea0:	68f9      	ldr	r1, [r7, #12]
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f805 	bl	8000eb2 <sx126x_set_rf_freq_in_pll_steps>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af02      	add	r7, sp, #8
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000ebc:	2386      	movs	r3, #134	@ 0x86
 8000ebe:	723b      	strb	r3, [r7, #8]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	0e1b      	lsrs	r3, r3, #24
 8000ec4:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000ec6:	727b      	strb	r3, [r7, #9]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	0c1b      	lsrs	r3, r3, #16
 8000ecc:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000ece:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000ed6:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000edc:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 8000ede:	f107 0108 	add.w	r1, r7, #8
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2205      	movs	r2, #5
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f8f7 	bl	80010de <sx126x_hal_write>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af02      	add	r7, sp, #8
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	460b      	mov	r3, r1
 8000f04:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = {
 8000f06:	238a      	movs	r3, #138	@ 0x8a
 8000f08:	733b      	strb	r3, [r7, #12]
 8000f0a:	78fb      	ldrb	r3, [r7, #3]
 8000f0c:	737b      	strb	r3, [r7, #13]
        SX126X_SET_PKT_TYPE,
        ( uint8_t ) pkt_type,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 8000f0e:	f107 010c 	add.w	r1, r7, #12
 8000f12:	2300      	movs	r3, #0
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2300      	movs	r3, #0
 8000f18:	2202      	movs	r2, #2
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f8df 	bl	80010de <sx126x_hal_write>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <sx126x_set_tx_params>:

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_PKT_TYPE, ( uint8_t* ) pkt_type, 1 );
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af02      	add	r7, sp, #8
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	460b      	mov	r3, r1
 8000f34:	70fb      	strb	r3, [r7, #3]
 8000f36:	4613      	mov	r3, r2
 8000f38:	70bb      	strb	r3, [r7, #2]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 8000f3a:	238e      	movs	r3, #142	@ 0x8e
 8000f3c:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX_PARAMS,
        ( uint8_t ) pwr_in_dbm,
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 8000f40:	737b      	strb	r3, [r7, #13]
 8000f42:	78bb      	ldrb	r3, [r7, #2]
 8000f44:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ramp_time,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 8000f46:	f107 010c 	add.w	r1, r7, #12
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	2203      	movs	r2, #3
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f8c3 	bl	80010de <sx126x_hal_write>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <sx126x_set_lora_mod_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_BPSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af02      	add	r7, sp, #8
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 8000f6c:	238b      	movs	r3, #139	@ 0x8b
 8000f6e:	723b      	strb	r3, [r7, #8]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 8000f74:	727b      	strb	r3, [r7, #9]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 8000f7a:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 8000f80:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	78db      	ldrb	r3, [r3, #3]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 8000f8c:	733b      	strb	r3, [r7, #12]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 8000f8e:	f107 0108 	add.w	r1, r7, #8
 8000f92:	2300      	movs	r3, #0
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2300      	movs	r3, #0
 8000f98:	2205      	movs	r2, #5
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 f89f 	bl	80010de <sx126x_hal_write>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d108      	bne.n	8000fbc <sx126x_set_lora_mod_params+0x5a>
    {
        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see datasheet DS_SX1261-2_V1.2 §15.1
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f856 	bl	8001064 <sx126x_tx_modulation_workaround>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
        // WORKAROUND END
    }

    return status;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af02      	add	r7, sp, #8
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	70fb      	strb	r3, [r7, #3]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	70bb      	strb	r3, [r7, #2]
    const uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = {
 8000fd6:	238f      	movs	r3, #143	@ 0x8f
 8000fd8:	733b      	strb	r3, [r7, #12]
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	737b      	strb	r3, [r7, #13]
 8000fde:	78bb      	ldrb	r3, [r7, #2]
 8000fe0:	73bb      	strb	r3, [r7, #14]
        SX126X_SET_BUFFER_BASE_ADDRESS,
        tx_base_address,
        rx_base_address,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 8000fe2:	f107 010c 	add.w	r1, r7, #12
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2300      	movs	r3, #0
 8000fec:	2203      	movs	r2, #3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f875 	bl	80010de <sx126x_hal_write>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a0f      	ldr	r2, [pc, #60]	@ (8001048 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	0b1b      	lsrs	r3, r3, #12
 8001012:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f643 5209 	movw	r2, #15625	@ 0x3d09
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	039b      	lsls	r3, r3, #14
 800102c:	f503 53f4 	add.w	r3, r3, #7808	@ 0x1e80
 8001030:	3304      	adds	r3, #4
 8001032:	4905      	ldr	r1, [pc, #20]	@ (8001048 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 8001034:	fba1 1303 	umull	r1, r3, r1, r3
 8001038:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800103a:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800103c:	4618      	mov	r0, r3
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	431bde83 	.word	0x431bde83

0800104c <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	019b      	lsls	r3, r3, #6
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <sx126x_tx_modulation_workaround>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static sx126x_status_t sx126x_tx_modulation_workaround( const void* context, sx126x_pkt_type_t pkt_type,
                                                        sx126x_lora_bw_t bw )
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
 8001070:	4613      	mov	r3, r2
 8001072:	70bb      	strb	r3, [r7, #2]
    uint8_t reg_value = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	73bb      	strb	r3, [r7, #14]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 8001078:	f107 020e 	add.w	r2, r7, #14
 800107c:	2301      	movs	r3, #1
 800107e:	f640 0189 	movw	r1, #2185	@ 0x889
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff fe60 	bl	8000d48 <sx126x_read_register>
 8001088:	4603      	mov	r3, r0
 800108a:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d120      	bne.n	80010d4 <sx126x_tx_modulation_workaround+0x70>
    {
        if( pkt_type == SX126X_PKT_TYPE_LORA )
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d10e      	bne.n	80010b6 <sx126x_tx_modulation_workaround+0x52>
        {
            if( bw == SX126X_LORA_BW_500 )
 8001098:	78bb      	ldrb	r3, [r7, #2]
 800109a:	2b06      	cmp	r3, #6
 800109c:	d105      	bne.n	80010aa <sx126x_tx_modulation_workaround+0x46>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 if the LoRa BW = 500 kHz
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	f023 0304 	bic.w	r3, r3, #4
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	73bb      	strb	r3, [r7, #14]
 80010a8:	e00a      	b.n	80010c0 <sx126x_tx_modulation_workaround+0x5c>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any other LoRa BW
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	73bb      	strb	r3, [r7, #14]
 80010b4:	e004      	b.n	80010c0 <sx126x_tx_modulation_workaround+0x5c>
            }
        }
        else
        {
            reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any (G)FSK configuration
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	73bb      	strb	r3, [r7, #14]
        }

        status = sx126x_write_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 80010c0:	f107 020e 	add.w	r2, r7, #14
 80010c4:	2301      	movs	r3, #1
 80010c6:	f640 0189 	movw	r1, #2185	@ 0x889
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fe19 	bl	8000d02 <sx126x_write_register>
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <sx126x_hal_write>:
Send the command opcode over SPI.
Send the data buffer over SPI.
Drive the NSS line high.
*/
sx126x_hal_status_t sx126x_hal_write( const void* context, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4613      	mov	r3, r2
 80010ec:	80fb      	strh	r3, [r7, #6]

	// Cast context
	sx126x_context* ctx = (sx126x_context*)context;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	617b      	str	r3, [r7, #20]


	//Poll the tranmsitters busy pin (active high)
	while (HAL_GPIO_ReadPin(ctx->busy_pin_port, ctx->busy_pin) == GPIO_PIN_SET){}
 80010f2:	bf00      	nop
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	899b      	ldrh	r3, [r3, #12]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4610      	mov	r0, r2
 8001100:	f000 fcba 	bl	8001a78 <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
 8001106:	2b01      	cmp	r3, #1
 8001108:	d0f4      	beq.n	80010f4 <sx126x_hal_write+0x16>

	// Activate chip select (active low)
	HAL_GPIO_WritePin(ctx->chip_select_port, ctx->chip_select_pin, GPIO_PIN_RESET);
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	889b      	ldrh	r3, [r3, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	4619      	mov	r1, r3
 8001116:	f000 fcc7 	bl	8001aa8 <HAL_GPIO_WritePin>

	// Transmit command
	HAL_SPI_Transmit(ctx->hspi, (uint8_t*)command, command_length, HAL_MAX_DELAY);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	6998      	ldr	r0, [r3, #24]
 800111e:	88fa      	ldrh	r2, [r7, #6]
 8001120:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	f002 fc24 	bl	8003972 <HAL_SPI_Transmit>

	// Transmit data
	HAL_SPI_Transmit(ctx->hspi, (uint8_t*)data, data_length, HAL_MAX_DELAY);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	6998      	ldr	r0, [r3, #24]
 800112e:	8c3a      	ldrh	r2, [r7, #32]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001134:	6839      	ldr	r1, [r7, #0]
 8001136:	f002 fc1c 	bl	8003972 <HAL_SPI_Transmit>

	// Deactivate chip select
	HAL_GPIO_WritePin(ctx->chip_select_port, ctx->chip_select_pin, GPIO_PIN_SET);
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	889b      	ldrh	r3, [r3, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	4619      	mov	r1, r3
 8001146:	f000 fcaf 	bl	8001aa8 <HAL_GPIO_WritePin>


	return SX126X_HAL_STATUS_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <sx126x_hal_read>:
Send the command opcode over SPI.
Receive the requested data via SPI into the buffer.
Drive the cs line high.
*/
sx126x_hal_status_t sx126x_hal_read( const void* context, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint16_t data_length ){
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	4613      	mov	r3, r2
 8001162:	80fb      	strh	r3, [r7, #6]

	// Cast context to the struct type
	sx126x_context* ctx = (sx126x_context*)context;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	613b      	str	r3, [r7, #16]
    // Activate chip select (active low)
    HAL_GPIO_WritePin(ctx->chip_select_port, ctx->chip_select_pin, GPIO_PIN_RESET);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	889b      	ldrh	r3, [r3, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	f000 fc98 	bl	8001aa8 <HAL_GPIO_WritePin>

    // Transmit command (read request)
    if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*)command, command_length, 1) != HAL_OK) {
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	6998      	ldr	r0, [r3, #24]
 800117c:	88fa      	ldrh	r2, [r7, #6]
 800117e:	2301      	movs	r3, #1
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	f002 fbf6 	bl	8003972 <HAL_SPI_Transmit>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <sx126x_hal_read+0x3c>
        return SX126X_HAL_STATUS_ERROR; // Error if transmission fails
 800118c:	2303      	movs	r3, #3
 800118e:	e02d      	b.n	80011ec <sx126x_hal_read+0x98>
    }

    // Poll the busy line to ensure the device is ready
    uint32_t timeout = 1000; // Timeout limit
 8001190:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001194:	617b      	str	r3, [r7, #20]
    while (HAL_GPIO_ReadPin(ctx->busy_pin_port, ctx->busy_pin) == GPIO_PIN_SET && timeout--) {
 8001196:	e004      	b.n	80011a2 <sx126x_hal_read+0x4e>
        // If timeout occurs, return error
        if (timeout == 0) {
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <sx126x_hal_read+0x4e>
            return SX126X_HAL_STATUS_ERROR;
 800119e:	2303      	movs	r3, #3
 80011a0:	e024      	b.n	80011ec <sx126x_hal_read+0x98>
    while (HAL_GPIO_ReadPin(ctx->busy_pin_port, ctx->busy_pin) == GPIO_PIN_SET && timeout--) {
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	899b      	ldrh	r3, [r3, #12]
 80011aa:	4619      	mov	r1, r3
 80011ac:	4610      	mov	r0, r2
 80011ae:	f000 fc63 	bl	8001a78 <HAL_GPIO_ReadPin>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d104      	bne.n	80011c2 <sx126x_hal_read+0x6e>
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	1e5a      	subs	r2, r3, #1
 80011bc:	617a      	str	r2, [r7, #20]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1ea      	bne.n	8001198 <sx126x_hal_read+0x44>
        }
    }

    // Receive data from SX126x
    if (HAL_SPI_Receive(ctx->hspi, data, data_length, 1) != HAL_OK) {
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	6998      	ldr	r0, [r3, #24]
 80011c6:	8c3a      	ldrh	r2, [r7, #32]
 80011c8:	2301      	movs	r3, #1
 80011ca:	6839      	ldr	r1, [r7, #0]
 80011cc:	f002 fd15 	bl	8003bfa <HAL_SPI_Receive>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <sx126x_hal_read+0x86>
        return SX126X_HAL_STATUS_ERROR; // Error if reception fails
 80011d6:	2303      	movs	r3, #3
 80011d8:	e008      	b.n	80011ec <sx126x_hal_read+0x98>
    }

    // Deactivate chip select (active high)
    HAL_GPIO_WritePin(ctx->chip_select_port, ctx->chip_select_pin, GPIO_PIN_SET);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	889b      	ldrh	r3, [r3, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	4619      	mov	r1, r3
 80011e6:	f000 fc5f 	bl	8001aa8 <HAL_GPIO_WritePin>

    return SX126X_HAL_STATUS_OK;
 80011ea:	2300      	movs	r3, #0

}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <sx126x_hal_reset>:
Operation:
Set the reset pin low.
Wait at least 100 microseconds (according to the SX126X datasheet).
Set the reset pin high.
 */
sx126x_hal_status_t sx126x_hal_reset( const void* context ){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	// Cast context to the actual type
	sx126x_context* ctx = (sx126x_context*)context;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(ctx->reset_pin_port, ctx->reset_pin, GPIO_PIN_RESET);  // Reset pin (optional) active low
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6918      	ldr	r0, [r3, #16]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	8a9b      	ldrh	r3, [r3, #20]
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	f000 fc4c 	bl	8001aa8 <HAL_GPIO_WritePin>
	HAL_Delay(101);  // Wait for reset to complete
 8001210:	2065      	movs	r0, #101	@ 0x65
 8001212:	f000 f8e5 	bl	80013e0 <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_pin_port, ctx->reset_pin, GPIO_PIN_SET);  // Release reset pin
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6918      	ldr	r0, [r3, #16]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	8a9b      	ldrh	r3, [r3, #20]
 800121e:	2201      	movs	r2, #1
 8001220:	4619      	mov	r1, r3
 8001222:	f000 fc41 	bl	8001aa8 <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <sx126x_hal_wakeup>:
Perform a no-op SPI transaction to generate a clock signal.
Drive the NSS line high.
Wait for the busy pin to indicate readiness.
 */

sx126x_hal_status_t sx126x_hal_wakeup( const void* context ){
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	sx126x_context* ctx = (sx126x_context*)context;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	60fb      	str	r3, [r7, #12]
    // Step 1: Pull Chip Select (CS) Low
    HAL_GPIO_WritePin(ctx->chip_select_port, ctx->chip_select_pin, GPIO_PIN_RESET);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	889b      	ldrh	r3, [r3, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	4619      	mov	r1, r3
 8001248:	f000 fc2e 	bl	8001aa8 <HAL_GPIO_WritePin>

    // Step 2: Send a NOP command (0x00) over SPI
    uint8_t nop_cmd = 0x00;
 800124c:	2300      	movs	r3, #0
 800124e:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(ctx->hspi, &nop_cmd, 1, HAL_MAX_DELAY);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6998      	ldr	r0, [r3, #24]
 8001254:	f107 010b 	add.w	r1, r7, #11
 8001258:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800125c:	2201      	movs	r2, #1
 800125e:	f002 fb88 	bl	8003972 <HAL_SPI_Transmit>

    HAL_Delay(3500);
 8001262:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001266:	f000 f8bb 	bl	80013e0 <HAL_Delay>

    // Step 4: Pull Chip Select (CS) High
    HAL_GPIO_WritePin(ctx->chip_select_port, ctx->chip_select_pin, GPIO_PIN_SET);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	889b      	ldrh	r3, [r3, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	4619      	mov	r1, r3
 8001276:	f000 fc17 	bl	8001aa8 <HAL_GPIO_WritePin>



	return SX126X_HAL_STATUS_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <SystemInit+0x20>)
 800128a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800128e:	4a05      	ldr	r2, [pc, #20]	@ (80012a4 <SystemInit+0x20>)
 8001290:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001294:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ac:	f7ff ffea 	bl	8001284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  

  ldr r0, =_sdata
 80012b0:	480c      	ldr	r0, [pc, #48]	@ (80012e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012b2:	490d      	ldr	r1, [pc, #52]	@ (80012e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b4:	4a0d      	ldr	r2, [pc, #52]	@ (80012ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b8:	e002      	b.n	80012c0 <LoopCopyDataInit>

080012ba <CopyDataInit>:


CopyDataInit:
  ldr r4, [r2, r3]
 80012ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012be:	3304      	adds	r3, #4

080012c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c4:	d3f9      	bcc.n	80012ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c8:	4c0a      	ldr	r4, [pc, #40]	@ (80012f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012cc:	e001      	b.n	80012d2 <LoopFillZerobss>

080012ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d0:	3204      	adds	r2, #4

080012d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d4:	d3fb      	bcc.n	80012ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012d6:	f008 fbd3 	bl	8009a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012da:	f7ff f8f5 	bl	80004c8 <main>
  bx  lr    
 80012de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e8:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80012ec:	08009b84 	.word	0x08009b84
  ldr r2, =_sbss
 80012f0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80012f4:	20001e04 	.word	0x20001e04

080012f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <ADC_IRQHandler>
	...

080012fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001300:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <HAL_Init+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0d      	ldr	r2, [pc, #52]	@ (800133c <HAL_Init+0x40>)
 8001306:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800130a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800130c:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <HAL_Init+0x40>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <HAL_Init+0x40>)
 8001312:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001318:	4b08      	ldr	r3, [pc, #32]	@ (800133c <HAL_Init+0x40>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a07      	ldr	r2, [pc, #28]	@ (800133c <HAL_Init+0x40>)
 800131e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001324:	2003      	movs	r0, #3
 8001326:	f000 f94f 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132a:	200f      	movs	r0, #15
 800132c:	f000 f808 	bl	8001340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001330:	f7ff fb28 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023c00 	.word	0x40023c00

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <HAL_InitTick+0x54>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <HAL_InitTick+0x58>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001356:	fbb3 f3f1 	udiv	r3, r3, r1
 800135a:	fbb2 f3f3 	udiv	r3, r2, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f967 	bl	8001632 <HAL_SYSTICK_Config>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e00e      	b.n	800138c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b0f      	cmp	r3, #15
 8001372:	d80a      	bhi.n	800138a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001374:	2200      	movs	r2, #0
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800137c:	f000 f92f 	bl	80015de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001380:	4a06      	ldr	r2, [pc, #24]	@ (800139c <HAL_InitTick+0x5c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000004 	.word	0x20000004
 8001398:	2000000c 	.word	0x2000000c
 800139c:	20000008 	.word	0x20000008

080013a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_IncTick+0x20>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_IncTick+0x24>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a04      	ldr	r2, [pc, #16]	@ (80013c4 <HAL_IncTick+0x24>)
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	2000000c 	.word	0x2000000c
 80013c4:	2000021c 	.word	0x2000021c

080013c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return uwTick;
 80013cc:	4b03      	ldr	r3, [pc, #12]	@ (80013dc <HAL_GetTick+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	2000021c 	.word	0x2000021c

080013e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e8:	f7ff ffee 	bl	80013c8 <HAL_GetTick>
 80013ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013f8:	d005      	beq.n	8001406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <HAL_Delay+0x44>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001406:	bf00      	nop
 8001408:	f7ff ffde 	bl	80013c8 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	d8f7      	bhi.n	8001408 <HAL_Delay+0x28>
  {
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000000c 	.word	0x2000000c

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	@ (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db0b      	blt.n	80014b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 021f 	and.w	r2, r3, #31
 80014a4:	4907      	ldr	r1, [pc, #28]	@ (80014c4 <__NVIC_EnableIRQ+0x38>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa00 f202 	lsl.w	r2, r0, r2
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	@ (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	@ (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	@ 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	@ 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015a8:	f7ff ff8e 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff29 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff3e 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff8e 	bl	800151c <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5d 	bl	80014c8 <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff31 	bl	800148c <__NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffa2 	bl	8001584 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001656:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff feb6 	bl	80013c8 <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d008      	beq.n	800167c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2280      	movs	r2, #128	@ 0x80
 800166e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e052      	b.n	8001722 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0216 	bic.w	r2, r2, #22
 800168a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800169a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d103      	bne.n	80016ac <HAL_DMA_Abort+0x62>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0208 	bic.w	r2, r2, #8
 80016ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016cc:	e013      	b.n	80016f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ce:	f7ff fe7b 	bl	80013c8 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d90c      	bls.n	80016f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2220      	movs	r2, #32
 80016e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2203      	movs	r2, #3
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e015      	b.n	8001722 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1e4      	bne.n	80016ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001708:	223f      	movs	r2, #63	@ 0x3f
 800170a:	409a      	lsls	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d004      	beq.n	8001748 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2280      	movs	r2, #128	@ 0x80
 8001742:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e00c      	b.n	8001762 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2205      	movs	r2, #5
 800174c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0201 	bic.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	@ 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
 800178a:	e159      	b.n	8001a40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800178c:	2201      	movs	r2, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	f040 8148 	bne.w	8001a3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d005      	beq.n	80017c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d130      	bne.n	8001824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	2203      	movs	r2, #3
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f8:	2201      	movs	r2, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 0201 	and.w	r2, r3, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b03      	cmp	r3, #3
 800182e:	d017      	beq.n	8001860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d123      	bne.n	80018b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	08da      	lsrs	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3208      	adds	r2, #8
 8001874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	08da      	lsrs	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3208      	adds	r2, #8
 80018ae:	69b9      	ldr	r1, [r7, #24]
 80018b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0203 	and.w	r2, r3, #3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80a2 	beq.w	8001a3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b57      	ldr	r3, [pc, #348]	@ (8001a58 <HAL_GPIO_Init+0x2e8>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	4a56      	ldr	r2, [pc, #344]	@ (8001a58 <HAL_GPIO_Init+0x2e8>)
 8001900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001904:	6453      	str	r3, [r2, #68]	@ 0x44
 8001906:	4b54      	ldr	r3, [pc, #336]	@ (8001a58 <HAL_GPIO_Init+0x2e8>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001912:	4a52      	ldr	r2, [pc, #328]	@ (8001a5c <HAL_GPIO_Init+0x2ec>)
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	3302      	adds	r3, #2
 800191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	220f      	movs	r2, #15
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a49      	ldr	r2, [pc, #292]	@ (8001a60 <HAL_GPIO_Init+0x2f0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d019      	beq.n	8001972 <HAL_GPIO_Init+0x202>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a48      	ldr	r2, [pc, #288]	@ (8001a64 <HAL_GPIO_Init+0x2f4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0x1fe>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a47      	ldr	r2, [pc, #284]	@ (8001a68 <HAL_GPIO_Init+0x2f8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00d      	beq.n	800196a <HAL_GPIO_Init+0x1fa>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a46      	ldr	r2, [pc, #280]	@ (8001a6c <HAL_GPIO_Init+0x2fc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d007      	beq.n	8001966 <HAL_GPIO_Init+0x1f6>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a45      	ldr	r2, [pc, #276]	@ (8001a70 <HAL_GPIO_Init+0x300>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_GPIO_Init+0x1f2>
 800195e:	2304      	movs	r3, #4
 8001960:	e008      	b.n	8001974 <HAL_GPIO_Init+0x204>
 8001962:	2307      	movs	r3, #7
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x204>
 8001966:	2303      	movs	r3, #3
 8001968:	e004      	b.n	8001974 <HAL_GPIO_Init+0x204>
 800196a:	2302      	movs	r3, #2
 800196c:	e002      	b.n	8001974 <HAL_GPIO_Init+0x204>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_GPIO_Init+0x204>
 8001972:	2300      	movs	r3, #0
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	f002 0203 	and.w	r2, r2, #3
 800197a:	0092      	lsls	r2, r2, #2
 800197c:	4093      	lsls	r3, r2
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001984:	4935      	ldr	r1, [pc, #212]	@ (8001a5c <HAL_GPIO_Init+0x2ec>)
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	3302      	adds	r3, #2
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001992:	4b38      	ldr	r3, [pc, #224]	@ (8001a74 <HAL_GPIO_Init+0x304>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001a74 <HAL_GPIO_Init+0x304>)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a74 <HAL_GPIO_Init+0x304>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e0:	4a24      	ldr	r2, [pc, #144]	@ (8001a74 <HAL_GPIO_Init+0x304>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019e6:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <HAL_GPIO_Init+0x304>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001a74 <HAL_GPIO_Init+0x304>)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a10:	4b18      	ldr	r3, [pc, #96]	@ (8001a74 <HAL_GPIO_Init+0x304>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a34:	4a0f      	ldr	r2, [pc, #60]	@ (8001a74 <HAL_GPIO_Init+0x304>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	2b0f      	cmp	r3, #15
 8001a44:	f67f aea2 	bls.w	800178c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3724      	adds	r7, #36	@ 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40013800 	.word	0x40013800
 8001a60:	40020000 	.word	0x40020000
 8001a64:	40020400 	.word	0x40020400
 8001a68:	40020800 	.word	0x40020800
 8001a6c:	40020c00 	.word	0x40020c00
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40013c00 	.word	0x40013c00

08001a78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e001      	b.n	8001a9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab8:	787b      	ldrb	r3, [r7, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ac4:	e003      	b.n	8001ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	041a      	lsls	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	619a      	str	r2, [r3, #24]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ae6:	4b08      	ldr	r3, [pc, #32]	@ (8001b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001af2:	4a05      	ldr	r2, [pc, #20]	@ (8001b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe ff00 	bl	8000900 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40013c00 	.word	0x40013c00

08001b0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e101      	b.n	8001d22 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d106      	bne.n	8001b3e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f007 fc8f 	bl	800945c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2203      	movs	r2, #3
 8001b42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b4c:	d102      	bne.n	8001b54 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f004 f8dc 	bl	8005d16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7c1a      	ldrb	r2, [r3, #16]
 8001b66:	f88d 2000 	strb.w	r2, [sp]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6e:	f003 ffbb 	bl	8005ae8 <USB_CoreInit>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0ce      	b.n	8001d22 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 f8d4 	bl	8005d38 <USB_SetCurrentMode>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0bf      	b.n	8001d22 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	e04a      	b.n	8001c3e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3315      	adds	r3, #21
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bbc:	7bfa      	ldrb	r2, [r7, #15]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	3314      	adds	r3, #20
 8001bcc:	7bfa      	ldrb	r2, [r7, #15]
 8001bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	b298      	uxth	r0, r3
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	332e      	adds	r3, #46	@ 0x2e
 8001be4:	4602      	mov	r2, r0
 8001be6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3318      	adds	r3, #24
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	331c      	adds	r3, #28
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	3320      	adds	r3, #32
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	3324      	adds	r3, #36	@ 0x24
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	791b      	ldrb	r3, [r3, #4]
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d3af      	bcc.n	8001ba8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e044      	b.n	8001cd8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	791b      	ldrb	r3, [r3, #4]
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d3b5      	bcc.n	8001c4e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7c1a      	ldrb	r2, [r3, #16]
 8001cea:	f88d 2000 	strb.w	r2, [sp]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf2:	f004 f86d 	bl	8005dd0 <USB_DevInit>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e00c      	b.n	8001d22 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f005 f8b7 	bl	8006e8e <USB_DevDisconnect>

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_PCD_Start+0x1c>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e022      	b.n	8001d8c <HAL_PCD_Start+0x62>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d105      	bne.n	8001d6e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d66:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 ffbe 	bl	8005cf4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f005 f865 	bl	8006e4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b08d      	sub	sp, #52	@ 0x34
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f005 f923 	bl	8006ff6 <USB_GetMode>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f040 848c 	bne.w	80026d0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f005 f887 	bl	8006ed0 <USB_ReadInterrupts>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 8482 	beq.w	80026ce <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f005 f874 	bl	8006ed0 <USB_ReadInterrupts>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d107      	bne.n	8001e02 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f002 0202 	and.w	r2, r2, #2
 8001e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f005 f862 	bl	8006ed0 <USB_ReadInterrupts>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d161      	bne.n	8001eda <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699a      	ldr	r2, [r3, #24]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0210 	bic.w	r2, r2, #16
 8001e24:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f003 020f 	and.w	r2, r3, #15
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	0c5b      	lsrs	r3, r3, #17
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d124      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d035      	beq.n	8001eca <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	6a38      	ldr	r0, [r7, #32]
 8001e72:	f004 fe99 	bl	8006ba8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e82:	441a      	add	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e94:	441a      	add	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	615a      	str	r2, [r3, #20]
 8001e9a:	e016      	b.n	8001eca <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	0c5b      	lsrs	r3, r3, #17
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	2b06      	cmp	r3, #6
 8001ea6:	d110      	bne.n	8001eca <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001eae:	2208      	movs	r2, #8
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	6a38      	ldr	r0, [r7, #32]
 8001eb4:	f004 fe78 	bl	8006ba8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	091b      	lsrs	r3, r3, #4
 8001ec0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ec4:	441a      	add	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0210 	orr.w	r2, r2, #16
 8001ed8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 fff6 	bl	8006ed0 <USB_ReadInterrupts>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001eee:	f040 80a7 	bne.w	8002040 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f004 fffb 	bl	8006ef6 <USB_ReadDevAllOutEpInterrupt>
 8001f00:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001f02:	e099      	b.n	8002038 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 808e 	beq.w	800202c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f005 f81f 	bl	8006f5e <USB_ReadDevOutEPInterrupt>
 8001f20:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00c      	beq.n	8001f46 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fea3 	bl	8002c8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00c      	beq.n	8001f6a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2308      	movs	r3, #8
 8001f60:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 ff79 	bl	8002e5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f80:	461a      	mov	r2, r3
 8001f82:	2310      	movs	r3, #16
 8001f84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d030      	beq.n	8001ff2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f98:	2b80      	cmp	r3, #128	@ 0x80
 8001f9a:	d109      	bne.n	8001fb0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fae:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	78db      	ldrb	r3, [r3, #3]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d108      	bne.n	8001fe0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	4619      	mov	r1, r3
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f007 fb3a 	bl	8009654 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fec:	461a      	mov	r2, r3
 8001fee:	2302      	movs	r3, #2
 8001ff0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	4413      	add	r3, r2
 8002004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002008:	461a      	mov	r2, r3
 800200a:	2320      	movs	r3, #32
 800200c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d009      	beq.n	800202c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	4413      	add	r3, r2
 8002020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002024:	461a      	mov	r2, r3
 8002026:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800202a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	3301      	adds	r3, #1
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002034:	085b      	lsrs	r3, r3, #1
 8002036:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800203a:	2b00      	cmp	r3, #0
 800203c:	f47f af62 	bne.w	8001f04 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f004 ff43 	bl	8006ed0 <USB_ReadInterrupts>
 800204a:	4603      	mov	r3, r0
 800204c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002050:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002054:	f040 80db 	bne.w	800220e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f004 ff64 	bl	8006f2a <USB_ReadDevAllInEpInterrupt>
 8002062:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002068:	e0cd      	b.n	8002206 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800206a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80c2 	beq.w	80021fa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f004 ff8a 	bl	8006f9a <USB_ReadDevInEPInterrupt>
 8002086:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d057      	beq.n	8002142 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	2201      	movs	r2, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69f9      	ldr	r1, [r7, #28]
 80020ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80020b2:	4013      	ands	r3, r2
 80020b4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020c2:	461a      	mov	r2, r3
 80020c4:	2301      	movs	r3, #1
 80020c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	799b      	ldrb	r3, [r3, #6]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d132      	bne.n	8002136 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3320      	adds	r3, #32
 80020e0:	6819      	ldr	r1, [r3, #0]
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4403      	add	r3, r0
 80020f0:	331c      	adds	r3, #28
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4419      	add	r1, r3
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4403      	add	r3, r0
 8002104:	3320      	adds	r3, #32
 8002106:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	2b00      	cmp	r3, #0
 800210c:	d113      	bne.n	8002136 <HAL_PCD_IRQHandler+0x3a2>
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3324      	adds	r3, #36	@ 0x24
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d108      	bne.n	8002136 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800212e:	461a      	mov	r2, r3
 8002130:	2101      	movs	r1, #1
 8002132:	f004 ff91 	bl	8007058 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f007 fa0e 	bl	800955e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002158:	461a      	mov	r2, r3
 800215a:	2308      	movs	r3, #8
 800215c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	4413      	add	r3, r2
 8002170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002174:	461a      	mov	r2, r3
 8002176:	2310      	movs	r3, #16
 8002178:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	4413      	add	r3, r2
 800218c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002190:	461a      	mov	r2, r3
 8002192:	2340      	movs	r3, #64	@ 0x40
 8002194:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d023      	beq.n	80021e8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80021a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021a2:	6a38      	ldr	r0, [r7, #32]
 80021a4:	f003 ff78 	bl	8006098 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80021a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	3310      	adds	r3, #16
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	3304      	adds	r3, #4
 80021ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	78db      	ldrb	r3, [r3, #3]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d108      	bne.n	80021d6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2200      	movs	r2, #0
 80021c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	4619      	mov	r1, r3
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f007 fa51 	bl	8009678 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021e2:	461a      	mov	r2, r3
 80021e4:	2302      	movs	r3, #2
 80021e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80021f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fcbd 	bl	8002b74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	3301      	adds	r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002202:	085b      	lsrs	r3, r3, #1
 8002204:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002208:	2b00      	cmp	r3, #0
 800220a:	f47f af2e 	bne.w	800206a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f004 fe5c 	bl	8006ed0 <USB_ReadInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800221e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002222:	d122      	bne.n	800226a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800223e:	2b01      	cmp	r3, #1
 8002240:	d108      	bne.n	8002254 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800224a:	2100      	movs	r1, #0
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fea3 	bl	8002f98 <HAL_PCDEx_LPM_Callback>
 8002252:	e002      	b.n	800225a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f007 f9ef 	bl	8009638 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002268:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f004 fe2e 	bl	8006ed0 <USB_ReadInterrupts>
 8002274:	4603      	mov	r3, r0
 8002276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800227a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800227e:	d112      	bne.n	80022a6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b01      	cmp	r3, #1
 800228e:	d102      	bne.n	8002296 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f007 f9ab 	bl	80095ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80022a4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f004 fe10 	bl	8006ed0 <USB_ReadInterrupts>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ba:	f040 80b7 	bne.w	800242c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2110      	movs	r1, #16
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 fedd 	bl	8006098 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022de:	2300      	movs	r3, #0
 80022e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022e2:	e046      	b.n	8002372 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022f0:	461a      	mov	r2, r3
 80022f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80022f6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002308:	0151      	lsls	r1, r2, #5
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	440a      	add	r2, r1
 800230e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002312:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002316:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002324:	461a      	mov	r2, r3
 8002326:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800232a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800232c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	4413      	add	r3, r2
 8002334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800233c:	0151      	lsls	r1, r2, #5
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	440a      	add	r2, r1
 8002342:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002346:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800234a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800234c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800235c:	0151      	lsls	r1, r2, #5
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	440a      	add	r2, r1
 8002362:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002366:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800236a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800236c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236e:	3301      	adds	r3, #1
 8002370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	791b      	ldrb	r3, [r3, #4]
 8002376:	461a      	mov	r2, r3
 8002378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237a:	4293      	cmp	r3, r2
 800237c:	d3b2      	bcc.n	80022e4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800238c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002390:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	7bdb      	ldrb	r3, [r3, #15]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d016      	beq.n	80023c8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023aa:	f043 030b 	orr.w	r3, r3, #11
 80023ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023c0:	f043 030b 	orr.w	r3, r3, #11
 80023c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023c6:	e015      	b.n	80023f4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023da:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80023de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023ee:	f043 030b 	orr.w	r3, r3, #11
 80023f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002402:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002406:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002416:	461a      	mov	r2, r3
 8002418:	f004 fe1e 	bl	8007058 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800242a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f004 fd4d 	bl	8006ed0 <USB_ReadInterrupts>
 8002436:	4603      	mov	r3, r0
 8002438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800243c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002440:	d123      	bne.n	800248a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f004 fde3 	bl	8007012 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f003 fe9a 	bl	800618a <USB_GetDevSpeed>
 8002456:	4603      	mov	r3, r0
 8002458:	461a      	mov	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681c      	ldr	r4, [r3, #0]
 8002462:	f001 f9c9 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8002466:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800246c:	461a      	mov	r2, r3
 800246e:	4620      	mov	r0, r4
 8002470:	f003 fb9e 	bl	8005bb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f007 f89a 	bl	80095ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002488:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f004 fd1e 	bl	8006ed0 <USB_ReadInterrupts>
 8002494:	4603      	mov	r3, r0
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b08      	cmp	r3, #8
 800249c:	d10a      	bne.n	80024b4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f007 f877 	bl	8009592 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f002 0208 	and.w	r2, r2, #8
 80024b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f004 fd09 	bl	8006ed0 <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c4:	2b80      	cmp	r3, #128	@ 0x80
 80024c6:	d123      	bne.n	8002510 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024d4:	2301      	movs	r3, #1
 80024d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024d8:	e014      	b.n	8002504 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d105      	bne.n	80024fe <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fb0a 	bl	8002b12 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	3301      	adds	r3, #1
 8002502:	627b      	str	r3, [r7, #36]	@ 0x24
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	791b      	ldrb	r3, [r3, #4]
 8002508:	461a      	mov	r2, r3
 800250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250c:	4293      	cmp	r3, r2
 800250e:	d3e4      	bcc.n	80024da <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f004 fcdb 	bl	8006ed0 <USB_ReadInterrupts>
 800251a:	4603      	mov	r3, r0
 800251c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002520:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002524:	d13c      	bne.n	80025a0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002526:	2301      	movs	r3, #1
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
 800252a:	e02b      	b.n	8002584 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	3318      	adds	r3, #24
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d115      	bne.n	800257e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002552:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002554:	2b00      	cmp	r3, #0
 8002556:	da12      	bge.n	800257e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3317      	adds	r3, #23
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002574:	b2db      	uxtb	r3, r3
 8002576:	4619      	mov	r1, r3
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 faca 	bl	8002b12 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	3301      	adds	r3, #1
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	791b      	ldrb	r3, [r3, #4]
 8002588:	461a      	mov	r2, r3
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	4293      	cmp	r3, r2
 800258e:	d3cd      	bcc.n	800252c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800259e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f004 fc93 	bl	8006ed0 <USB_ReadInterrupts>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025b4:	d156      	bne.n	8002664 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025b6:	2301      	movs	r3, #1
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ba:	e045      	b.n	8002648 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d12e      	bne.n	8002642 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	da2b      	bge.n	8002642 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80025f6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d121      	bne.n	8002642 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10a      	bne.n	8002642 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800263a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800263e:	6053      	str	r3, [r2, #4]
            break;
 8002640:	e008      	b.n	8002654 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	3301      	adds	r3, #1
 8002646:	627b      	str	r3, [r7, #36]	@ 0x24
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	791b      	ldrb	r3, [r3, #4]
 800264c:	461a      	mov	r2, r3
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	4293      	cmp	r3, r2
 8002652:	d3b3      	bcc.n	80025bc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002662:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f004 fc31 	bl	8006ed0 <USB_ReadInterrupts>
 800266e:	4603      	mov	r3, r0
 8002670:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002678:	d10a      	bne.n	8002690 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f007 f80e 	bl	800969c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800268e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f004 fc1b 	bl	8006ed0 <USB_ReadInterrupts>
 800269a:	4603      	mov	r3, r0
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d115      	bne.n	80026d0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f006 fffe 	bl	80096b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	e000      	b.n	80026d0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80026ce:	bf00      	nop
    }
  }
}
 80026d0:	3734      	adds	r7, #52	@ 0x34
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd90      	pop	{r4, r7, pc}

080026d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_PCD_SetAddress+0x1a>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e012      	b.n	8002716 <HAL_PCD_SetAddress+0x40>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f004 fb7a 	bl	8006e00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	4608      	mov	r0, r1
 8002728:	4611      	mov	r1, r2
 800272a:	461a      	mov	r2, r3
 800272c:	4603      	mov	r3, r0
 800272e:	70fb      	strb	r3, [r7, #3]
 8002730:	460b      	mov	r3, r1
 8002732:	803b      	strh	r3, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800273c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002740:	2b00      	cmp	r3, #0
 8002742:	da0f      	bge.n	8002764 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	f003 020f 	and.w	r2, r3, #15
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	3310      	adds	r3, #16
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	3304      	adds	r3, #4
 800275a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	705a      	strb	r2, [r3, #1]
 8002762:	e00f      	b.n	8002784 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	f003 020f 	and.w	r2, r3, #15
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	3304      	adds	r3, #4
 800277c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	b2da      	uxtb	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002790:	883b      	ldrh	r3, [r7, #0]
 8002792:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	78ba      	ldrb	r2, [r7, #2]
 800279e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	785b      	ldrb	r3, [r3, #1]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d004      	beq.n	80027b2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027b2:	78bb      	ldrb	r3, [r7, #2]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d102      	bne.n	80027be <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_PCD_EP_Open+0xae>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e00e      	b.n	80027ea <HAL_PCD_EP_Open+0xcc>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68f9      	ldr	r1, [r7, #12]
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 fcfa 	bl	80061d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80027e8:	7afb      	ldrb	r3, [r7, #11]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002802:	2b00      	cmp	r3, #0
 8002804:	da0f      	bge.n	8002826 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	f003 020f 	and.w	r2, r3, #15
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	3310      	adds	r3, #16
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	3304      	adds	r3, #4
 800281c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	705a      	strb	r2, [r3, #1]
 8002824:	e00f      	b.n	8002846 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	f003 020f 	and.w	r2, r3, #15
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	3304      	adds	r3, #4
 800283e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_PCD_EP_Close+0x6e>
 800285c:	2302      	movs	r3, #2
 800285e:	e00e      	b.n	800287e <HAL_PCD_EP_Close+0x8c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68f9      	ldr	r1, [r7, #12]
 800286e:	4618      	mov	r0, r3
 8002870:	f003 fd38 	bl	80062e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	460b      	mov	r3, r1
 8002894:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002896:	7afb      	ldrb	r3, [r7, #11]
 8002898:	f003 020f 	and.w	r2, r3, #15
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	3304      	adds	r3, #4
 80028ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2200      	movs	r2, #0
 80028c0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2200      	movs	r2, #0
 80028c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028c8:	7afb      	ldrb	r3, [r7, #11]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	799b      	ldrb	r3, [r3, #6]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d102      	bne.n	80028e2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	799b      	ldrb	r3, [r3, #6]
 80028ea:	461a      	mov	r2, r3
 80028ec:	6979      	ldr	r1, [r7, #20]
 80028ee:	f003 fdd5 	bl	800649c <USB_EPStartXfer>

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	f003 020f 	and.w	r2, r3, #15
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	460b      	mov	r3, r1
 800293a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800293c:	7afb      	ldrb	r3, [r7, #11]
 800293e:	f003 020f 	and.w	r2, r3, #15
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	3310      	adds	r3, #16
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	3304      	adds	r3, #4
 8002952:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2200      	movs	r2, #0
 8002964:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2201      	movs	r2, #1
 800296a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800296c:	7afb      	ldrb	r3, [r7, #11]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	b2da      	uxtb	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	799b      	ldrb	r3, [r3, #6]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d102      	bne.n	8002986 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	799b      	ldrb	r3, [r3, #6]
 800298e:	461a      	mov	r2, r3
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	f003 fd83 	bl	800649c <USB_EPStartXfer>

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	7912      	ldrb	r2, [r2, #4]
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e04f      	b.n	8002a5e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	da0f      	bge.n	80029e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	f003 020f 	and.w	r2, r3, #15
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	3310      	adds	r3, #16
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	3304      	adds	r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	705a      	strb	r2, [r3, #1]
 80029e4:	e00d      	b.n	8002a02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4413      	add	r3, r2
 80029f8:	3304      	adds	r3, #4
 80029fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_PCD_EP_SetStall+0x82>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e01d      	b.n	8002a5e <HAL_PCD_EP_SetStall+0xbe>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68f9      	ldr	r1, [r7, #12]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f004 f911 	bl	8006c58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7999      	ldrb	r1, [r3, #6]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f004 fb02 	bl	8007058 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	7912      	ldrb	r2, [r2, #4]
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d901      	bls.n	8002a84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e042      	b.n	8002b0a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	da0f      	bge.n	8002aac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	f003 020f 	and.w	r2, r3, #15
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	3310      	adds	r3, #16
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	705a      	strb	r2, [r3, #1]
 8002aaa:	e00f      	b.n	8002acc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	f003 020f 	and.w	r2, r3, #15
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_PCD_EP_ClrStall+0x86>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e00e      	b.n	8002b0a <HAL_PCD_EP_ClrStall+0xa4>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68f9      	ldr	r1, [r7, #12]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f004 f91a 	bl	8006d34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	da0c      	bge.n	8002b40 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	f003 020f 	and.w	r2, r3, #15
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	3310      	adds	r3, #16
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e00c      	b.n	8002b5a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	f003 020f 	and.w	r2, r3, #15
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	3304      	adds	r3, #4
 8002b58:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68f9      	ldr	r1, [r7, #12]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f003 ff39 	bl	80069d8 <USB_EPStopXfer>
 8002b66:	4603      	mov	r3, r0
 8002b68:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b6a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	@ 0x28
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	3310      	adds	r3, #16
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	4413      	add	r3, r2
 8002b98:	3304      	adds	r3, #4
 8002b9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d901      	bls.n	8002bac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e06b      	b.n	8002c84 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d902      	bls.n	8002bc8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3303      	adds	r3, #3
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bd0:	e02a      	b.n	8002c28 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d902      	bls.n	8002bee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3303      	adds	r3, #3
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	68d9      	ldr	r1, [r3, #12]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	4603      	mov	r3, r0
 8002c0a:	6978      	ldr	r0, [r7, #20]
 8002c0c:	f003 ff8e 	bl	8006b2c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	441a      	add	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	441a      	add	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d809      	bhi.n	8002c52 <PCD_WriteEmptyTxFifo+0xde>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d203      	bcs.n	8002c52 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1bf      	bne.n	8002bd2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	691a      	ldr	r2, [r3, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d811      	bhi.n	8002c82 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	2201      	movs	r2, #1
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	6939      	ldr	r1, [r7, #16]
 8002c7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c7e:	4013      	ands	r3, r2
 8002c80:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	333c      	adds	r3, #60	@ 0x3c
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	799b      	ldrb	r3, [r3, #6]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d17b      	bne.n	8002dba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d015      	beq.n	8002cf8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	4a61      	ldr	r2, [pc, #388]	@ (8002e54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	f240 80b9 	bls.w	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80b3 	beq.w	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cf4:	6093      	str	r3, [r2, #8]
 8002cf6:	e0a7      	b.n	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2320      	movs	r3, #32
 8002d12:	6093      	str	r3, [r2, #8]
 8002d14:	e098      	b.n	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f040 8093 	bne.w	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	4a4b      	ldr	r2, [pc, #300]	@ (8002e54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d90f      	bls.n	8002d4a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d40:	461a      	mov	r2, r3
 8002d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d46:	6093      	str	r3, [r2, #8]
 8002d48:	e07e      	b.n	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a1a      	ldr	r2, [r3, #32]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	0159      	lsls	r1, r3, #5
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d76:	1ad2      	subs	r2, r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d114      	bne.n	8002dac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d94:	461a      	mov	r2, r3
 8002d96:	2101      	movs	r1, #1
 8002d98:	f004 f95e 	bl	8007058 <USB_EP0_OutStart>
 8002d9c:	e006      	b.n	8002dac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	441a      	add	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	4619      	mov	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f006 fbb8 	bl	8009528 <HAL_PCD_DataOutStageCallback>
 8002db8:	e046      	b.n	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	4a26      	ldr	r2, [pc, #152]	@ (8002e58 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d124      	bne.n	8002e0c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dde:	6093      	str	r3, [r2, #8]
 8002de0:	e032      	b.n	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f006 fb8f 	bl	8009528 <HAL_PCD_DataOutStageCallback>
 8002e0a:	e01d      	b.n	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d114      	bne.n	8002e3c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d108      	bne.n	8002e3c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e34:	461a      	mov	r2, r3
 8002e36:	2100      	movs	r1, #0
 8002e38:	f004 f90e 	bl	8007058 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	4619      	mov	r1, r3
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f006 fb70 	bl	8009528 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	4f54300a 	.word	0x4f54300a
 8002e58:	4f54310a 	.word	0x4f54310a

08002e5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	333c      	adds	r3, #60	@ 0x3c
 8002e74:	3304      	adds	r3, #4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a15      	ldr	r2, [pc, #84]	@ (8002ee4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d90e      	bls.n	8002eb0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f006 fb27 	bl	8009504 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d90c      	bls.n	8002ed8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	799b      	ldrb	r3, [r3, #6]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d108      	bne.n	8002ed8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	f004 f8c0 	bl	8007058 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	4f54300a 	.word	0x4f54300a

08002ee8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	70fb      	strb	r3, [r7, #3]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f06:	883b      	ldrh	r3, [r7, #0]
 8002f08:	0419      	lsls	r1, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f14:	e028      	b.n	8002f68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	4413      	add	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f24:	2300      	movs	r3, #0
 8002f26:	73fb      	strb	r3, [r7, #15]
 8002f28:	e00d      	b.n	8002f46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	3340      	adds	r3, #64	@ 0x40
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	0c1b      	lsrs	r3, r3, #16
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	3301      	adds	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d3ec      	bcc.n	8002f2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f50:	883b      	ldrh	r3, [r7, #0]
 8002f52:	0418      	lsls	r0, r3, #16
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6819      	ldr	r1, [r3, #0]
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	4302      	orrs	r2, r0
 8002f60:	3340      	adds	r3, #64	@ 0x40
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	887a      	ldrh	r2, [r7, #2]
 8002f88:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e267      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d075      	beq.n	80030ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002fce:	4b88      	ldr	r3, [pc, #544]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d00c      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fda:	4b85      	ldr	r3, [pc, #532]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d112      	bne.n	800300c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe6:	4b82      	ldr	r3, [pc, #520]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ff2:	d10b      	bne.n	800300c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff4:	4b7e      	ldr	r3, [pc, #504]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d05b      	beq.n	80030b8 <HAL_RCC_OscConfig+0x108>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d157      	bne.n	80030b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e242      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003014:	d106      	bne.n	8003024 <HAL_RCC_OscConfig+0x74>
 8003016:	4b76      	ldr	r3, [pc, #472]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a75      	ldr	r2, [pc, #468]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e01d      	b.n	8003060 <HAL_RCC_OscConfig+0xb0>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0x98>
 800302e:	4b70      	ldr	r3, [pc, #448]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a6f      	ldr	r2, [pc, #444]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	4b6d      	ldr	r3, [pc, #436]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a6c      	ldr	r2, [pc, #432]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e00b      	b.n	8003060 <HAL_RCC_OscConfig+0xb0>
 8003048:	4b69      	ldr	r3, [pc, #420]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a68      	ldr	r2, [pc, #416]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 800304e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	4b66      	ldr	r3, [pc, #408]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a65      	ldr	r2, [pc, #404]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 800305a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800305e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d013      	beq.n	8003090 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe f9ae 	bl	80013c8 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003070:	f7fe f9aa 	bl	80013c8 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	@ 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e207      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	4b5b      	ldr	r3, [pc, #364]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0xc0>
 800308e:	e014      	b.n	80030ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003090:	f7fe f99a 	bl	80013c8 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003098:	f7fe f996 	bl	80013c8 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b64      	cmp	r3, #100	@ 0x64
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e1f3      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030aa:	4b51      	ldr	r3, [pc, #324]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0xe8>
 80030b6:	e000      	b.n	80030ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d063      	beq.n	800318e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030c6:	4b4a      	ldr	r3, [pc, #296]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d2:	4b47      	ldr	r3, [pc, #284]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d11c      	bne.n	8003118 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030de:	4b44      	ldr	r3, [pc, #272]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d116      	bne.n	8003118 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ea:	4b41      	ldr	r3, [pc, #260]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_RCC_OscConfig+0x152>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d001      	beq.n	8003102 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e1c7      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003102:	4b3b      	ldr	r3, [pc, #236]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4937      	ldr	r1, [pc, #220]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	e03a      	b.n	800318e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003120:	4b34      	ldr	r3, [pc, #208]	@ (80031f4 <HAL_RCC_OscConfig+0x244>)
 8003122:	2201      	movs	r2, #1
 8003124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7fe f94f 	bl	80013c8 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800312e:	f7fe f94b 	bl	80013c8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e1a8      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003140:	4b2b      	ldr	r3, [pc, #172]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314c:	4b28      	ldr	r3, [pc, #160]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4925      	ldr	r1, [pc, #148]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 800315c:	4313      	orrs	r3, r2
 800315e:	600b      	str	r3, [r1, #0]
 8003160:	e015      	b.n	800318e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003162:	4b24      	ldr	r3, [pc, #144]	@ (80031f4 <HAL_RCC_OscConfig+0x244>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fe f92e 	bl	80013c8 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003170:	f7fe f92a 	bl	80013c8 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e187      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003182:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d036      	beq.n	8003208 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d016      	beq.n	80031d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a2:	4b15      	ldr	r3, [pc, #84]	@ (80031f8 <HAL_RCC_OscConfig+0x248>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fe f90e 	bl	80013c8 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b0:	f7fe f90a 	bl	80013c8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e167      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c2:	4b0b      	ldr	r3, [pc, #44]	@ (80031f0 <HAL_RCC_OscConfig+0x240>)
 80031c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x200>
 80031ce:	e01b      	b.n	8003208 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d0:	4b09      	ldr	r3, [pc, #36]	@ (80031f8 <HAL_RCC_OscConfig+0x248>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d6:	f7fe f8f7 	bl	80013c8 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031dc:	e00e      	b.n	80031fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031de:	f7fe f8f3 	bl	80013c8 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d907      	bls.n	80031fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e150      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
 80031f0:	40023800 	.word	0x40023800
 80031f4:	42470000 	.word	0x42470000
 80031f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fc:	4b88      	ldr	r3, [pc, #544]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 80031fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ea      	bne.n	80031de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8097 	beq.w	8003344 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321a:	4b81      	ldr	r3, [pc, #516]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10f      	bne.n	8003246 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	4b7d      	ldr	r3, [pc, #500]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	4a7c      	ldr	r2, [pc, #496]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 8003230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003234:	6413      	str	r3, [r2, #64]	@ 0x40
 8003236:	4b7a      	ldr	r3, [pc, #488]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003242:	2301      	movs	r3, #1
 8003244:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003246:	4b77      	ldr	r3, [pc, #476]	@ (8003424 <HAL_RCC_OscConfig+0x474>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d118      	bne.n	8003284 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003252:	4b74      	ldr	r3, [pc, #464]	@ (8003424 <HAL_RCC_OscConfig+0x474>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a73      	ldr	r2, [pc, #460]	@ (8003424 <HAL_RCC_OscConfig+0x474>)
 8003258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800325c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325e:	f7fe f8b3 	bl	80013c8 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003266:	f7fe f8af 	bl	80013c8 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e10c      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003278:	4b6a      	ldr	r3, [pc, #424]	@ (8003424 <HAL_RCC_OscConfig+0x474>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d106      	bne.n	800329a <HAL_RCC_OscConfig+0x2ea>
 800328c:	4b64      	ldr	r3, [pc, #400]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003290:	4a63      	ldr	r2, [pc, #396]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	6713      	str	r3, [r2, #112]	@ 0x70
 8003298:	e01c      	b.n	80032d4 <HAL_RCC_OscConfig+0x324>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b05      	cmp	r3, #5
 80032a0:	d10c      	bne.n	80032bc <HAL_RCC_OscConfig+0x30c>
 80032a2:	4b5f      	ldr	r3, [pc, #380]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 80032a8:	f043 0304 	orr.w	r3, r3, #4
 80032ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ba:	e00b      	b.n	80032d4 <HAL_RCC_OscConfig+0x324>
 80032bc:	4b58      	ldr	r3, [pc, #352]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c0:	4a57      	ldr	r2, [pc, #348]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032c8:	4b55      	ldr	r3, [pc, #340]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032cc:	4a54      	ldr	r2, [pc, #336]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 80032ce:	f023 0304 	bic.w	r3, r3, #4
 80032d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d015      	beq.n	8003308 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032dc:	f7fe f874 	bl	80013c8 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7fe f870 	bl	80013c8 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e0cb      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fa:	4b49      	ldr	r3, [pc, #292]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0ee      	beq.n	80032e4 <HAL_RCC_OscConfig+0x334>
 8003306:	e014      	b.n	8003332 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003308:	f7fe f85e 	bl	80013c8 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330e:	e00a      	b.n	8003326 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003310:	f7fe f85a 	bl	80013c8 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e0b5      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003326:	4b3e      	ldr	r3, [pc, #248]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ee      	bne.n	8003310 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003332:	7dfb      	ldrb	r3, [r7, #23]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d105      	bne.n	8003344 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003338:	4b39      	ldr	r3, [pc, #228]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	4a38      	ldr	r2, [pc, #224]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 800333e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003342:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80a1 	beq.w	8003490 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800334e:	4b34      	ldr	r3, [pc, #208]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b08      	cmp	r3, #8
 8003358:	d05c      	beq.n	8003414 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d141      	bne.n	80033e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003362:	4b31      	ldr	r3, [pc, #196]	@ (8003428 <HAL_RCC_OscConfig+0x478>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe f82e 	bl	80013c8 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003370:	f7fe f82a 	bl	80013c8 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e087      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003382:	4b27      	ldr	r3, [pc, #156]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69da      	ldr	r2, [r3, #28]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	019b      	lsls	r3, r3, #6
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	3b01      	subs	r3, #1
 80033a8:	041b      	lsls	r3, r3, #16
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	061b      	lsls	r3, r3, #24
 80033b2:	491b      	ldr	r1, [pc, #108]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003428 <HAL_RCC_OscConfig+0x478>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fe f803 	bl	80013c8 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fd ffff 	bl	80013c8 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e05c      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d8:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x416>
 80033e4:	e054      	b.n	8003490 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e6:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <HAL_RCC_OscConfig+0x478>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fd ffec 	bl	80013c8 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fd ffe8 	bl	80013c8 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e045      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003406:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_RCC_OscConfig+0x470>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x444>
 8003412:	e03d      	b.n	8003490 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d107      	bne.n	800342c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e038      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
 8003420:	40023800 	.word	0x40023800
 8003424:	40007000 	.word	0x40007000
 8003428:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800342c:	4b1b      	ldr	r3, [pc, #108]	@ (800349c <HAL_RCC_OscConfig+0x4ec>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d028      	beq.n	800348c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003444:	429a      	cmp	r2, r3
 8003446:	d121      	bne.n	800348c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d11a      	bne.n	800348c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800345c:	4013      	ands	r3, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003462:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003464:	4293      	cmp	r3, r2
 8003466:	d111      	bne.n	800348c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003472:	085b      	lsrs	r3, r3, #1
 8003474:	3b01      	subs	r3, #1
 8003476:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d107      	bne.n	800348c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003486:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800

080034a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0cc      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b68      	ldr	r3, [pc, #416]	@ (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d90c      	bls.n	80034dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b65      	ldr	r3, [pc, #404]	@ (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b63      	ldr	r3, [pc, #396]	@ (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0b8      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f4:	4b59      	ldr	r3, [pc, #356]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4a58      	ldr	r2, [pc, #352]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800350c:	4b53      	ldr	r3, [pc, #332]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a52      	ldr	r2, [pc, #328]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003516:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003518:	4b50      	ldr	r3, [pc, #320]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	494d      	ldr	r1, [pc, #308]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d044      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353e:	4b47      	ldr	r3, [pc, #284]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d119      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e07f      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d003      	beq.n	800355e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355a:	2b03      	cmp	r3, #3
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b3f      	ldr	r3, [pc, #252]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e06f      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	4b3b      	ldr	r3, [pc, #236]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e067      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357e:	4b37      	ldr	r3, [pc, #220]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f023 0203 	bic.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4934      	ldr	r1, [pc, #208]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003590:	f7fd ff1a 	bl	80013c8 <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	e00a      	b.n	80035ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003598:	f7fd ff16 	bl	80013c8 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e04f      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	4b2b      	ldr	r3, [pc, #172]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 020c 	and.w	r2, r3, #12
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	429a      	cmp	r2, r3
 80035be:	d1eb      	bne.n	8003598 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c0:	4b25      	ldr	r3, [pc, #148]	@ (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d20c      	bcs.n	80035e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b22      	ldr	r3, [pc, #136]	@ (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b20      	ldr	r3, [pc, #128]	@ (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e032      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f4:	4b19      	ldr	r3, [pc, #100]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4916      	ldr	r1, [pc, #88]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003612:	4b12      	ldr	r3, [pc, #72]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	490e      	ldr	r1, [pc, #56]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003626:	f000 f821 	bl	800366c <HAL_RCC_GetSysClockFreq>
 800362a:	4602      	mov	r2, r0
 800362c:	4b0b      	ldr	r3, [pc, #44]	@ (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	490a      	ldr	r1, [pc, #40]	@ (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	5ccb      	ldrb	r3, [r1, r3]
 800363a:	fa22 f303 	lsr.w	r3, r2, r3
 800363e:	4a09      	ldr	r2, [pc, #36]	@ (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003642:	4b09      	ldr	r3, [pc, #36]	@ (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fd fe7a 	bl	8001340 <HAL_InitTick>

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40023c00 	.word	0x40023c00
 800365c:	40023800 	.word	0x40023800
 8003660:	08009b5c 	.word	0x08009b5c
 8003664:	20000004 	.word	0x20000004
 8003668:	20000008 	.word	0x20000008

0800366c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800366c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003670:	b090      	sub	sp, #64	@ 0x40
 8003672:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003684:	4b59      	ldr	r3, [pc, #356]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 030c 	and.w	r3, r3, #12
 800368c:	2b08      	cmp	r3, #8
 800368e:	d00d      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x40>
 8003690:	2b08      	cmp	r3, #8
 8003692:	f200 80a1 	bhi.w	80037d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x34>
 800369a:	2b04      	cmp	r3, #4
 800369c:	d003      	beq.n	80036a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800369e:	e09b      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036a0:	4b53      	ldr	r3, [pc, #332]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80036a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036a4:	e09b      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036a6:	4b53      	ldr	r3, [pc, #332]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80036a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036aa:	e098      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ac:	4b4f      	ldr	r3, [pc, #316]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x180>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b6:	4b4d      	ldr	r3, [pc, #308]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x180>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d028      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c2:	4b4a      	ldr	r3, [pc, #296]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x180>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	099b      	lsrs	r3, r3, #6
 80036c8:	2200      	movs	r2, #0
 80036ca:	623b      	str	r3, [r7, #32]
 80036cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036d4:	2100      	movs	r1, #0
 80036d6:	4b47      	ldr	r3, [pc, #284]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80036d8:	fb03 f201 	mul.w	r2, r3, r1
 80036dc:	2300      	movs	r3, #0
 80036de:	fb00 f303 	mul.w	r3, r0, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	4a43      	ldr	r2, [pc, #268]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80036e6:	fba0 1202 	umull	r1, r2, r0, r2
 80036ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036ec:	460a      	mov	r2, r1
 80036ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80036f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f2:	4413      	add	r3, r2
 80036f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f8:	2200      	movs	r2, #0
 80036fa:	61bb      	str	r3, [r7, #24]
 80036fc:	61fa      	str	r2, [r7, #28]
 80036fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003702:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003706:	f7fc fd67 	bl	80001d8 <__aeabi_uldivmod>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4613      	mov	r3, r2
 8003710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003712:	e053      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003714:	4b35      	ldr	r3, [pc, #212]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	099b      	lsrs	r3, r3, #6
 800371a:	2200      	movs	r2, #0
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	617a      	str	r2, [r7, #20]
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003726:	f04f 0b00 	mov.w	fp, #0
 800372a:	4652      	mov	r2, sl
 800372c:	465b      	mov	r3, fp
 800372e:	f04f 0000 	mov.w	r0, #0
 8003732:	f04f 0100 	mov.w	r1, #0
 8003736:	0159      	lsls	r1, r3, #5
 8003738:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800373c:	0150      	lsls	r0, r2, #5
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	ebb2 080a 	subs.w	r8, r2, sl
 8003746:	eb63 090b 	sbc.w	r9, r3, fp
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003756:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800375a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800375e:	ebb2 0408 	subs.w	r4, r2, r8
 8003762:	eb63 0509 	sbc.w	r5, r3, r9
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	00eb      	lsls	r3, r5, #3
 8003770:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003774:	00e2      	lsls	r2, r4, #3
 8003776:	4614      	mov	r4, r2
 8003778:	461d      	mov	r5, r3
 800377a:	eb14 030a 	adds.w	r3, r4, sl
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	eb45 030b 	adc.w	r3, r5, fp
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003792:	4629      	mov	r1, r5
 8003794:	028b      	lsls	r3, r1, #10
 8003796:	4621      	mov	r1, r4
 8003798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800379c:	4621      	mov	r1, r4
 800379e:	028a      	lsls	r2, r1, #10
 80037a0:	4610      	mov	r0, r2
 80037a2:	4619      	mov	r1, r3
 80037a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a6:	2200      	movs	r2, #0
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	60fa      	str	r2, [r7, #12]
 80037ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037b0:	f7fc fd12 	bl	80001d8 <__aeabi_uldivmod>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4613      	mov	r3, r2
 80037ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037bc:	4b0b      	ldr	r3, [pc, #44]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x180>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	3301      	adds	r3, #1
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80037cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037d6:	e002      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037d8:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80037da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3740      	adds	r7, #64	@ 0x40
 80037e4:	46bd      	mov	sp, r7
 80037e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
 80037f0:	00f42400 	.word	0x00f42400
 80037f4:	017d7840 	.word	0x017d7840

080037f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037fc:	4b03      	ldr	r3, [pc, #12]	@ (800380c <HAL_RCC_GetHCLKFreq+0x14>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	20000004 	.word	0x20000004

08003810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003814:	f7ff fff0 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8003818:	4602      	mov	r2, r0
 800381a:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	0a9b      	lsrs	r3, r3, #10
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	4903      	ldr	r1, [pc, #12]	@ (8003834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003826:	5ccb      	ldrb	r3, [r1, r3]
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40023800 	.word	0x40023800
 8003834:	08009b6c 	.word	0x08009b6c

08003838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800383c:	f7ff ffdc 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8003840:	4602      	mov	r2, r0
 8003842:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	0b5b      	lsrs	r3, r3, #13
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	4903      	ldr	r1, [pc, #12]	@ (800385c <HAL_RCC_GetPCLK2Freq+0x24>)
 800384e:	5ccb      	ldrb	r3, [r1, r3]
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40023800 	.word	0x40023800
 800385c:	08009b6c 	.word	0x08009b6c

08003860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e07b      	b.n	800396a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	d108      	bne.n	800388c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003882:	d009      	beq.n	8003898 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	61da      	str	r2, [r3, #28]
 800388a:	e005      	b.n	8003898 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd f88e 	bl	80009d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800391c:	ea42 0103 	orr.w	r1, r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003924:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	f003 0104 	and.w	r1, r3, #4
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	f003 0210 	and.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003958:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b088      	sub	sp, #32
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	4613      	mov	r3, r2
 8003980:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003982:	f7fd fd21 	bl	80013c8 <HAL_GetTick>
 8003986:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d001      	beq.n	800399c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003998:	2302      	movs	r3, #2
 800399a:	e12a      	b.n	8003bf2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_SPI_Transmit+0x36>
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e122      	b.n	8003bf2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_SPI_Transmit+0x48>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e11b      	b.n	8003bf2 <HAL_SPI_Transmit+0x280>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2203      	movs	r2, #3
 80039c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	88fa      	ldrh	r2, [r7, #6]
 80039da:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a08:	d10f      	bne.n	8003a2a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a34:	2b40      	cmp	r3, #64	@ 0x40
 8003a36:	d007      	beq.n	8003a48 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a50:	d152      	bne.n	8003af8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_SPI_Transmit+0xee>
 8003a5a:	8b7b      	ldrh	r3, [r7, #26]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d145      	bne.n	8003aec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a64:	881a      	ldrh	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a70:	1c9a      	adds	r2, r3, #2
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a84:	e032      	b.n	8003aec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d112      	bne.n	8003aba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	881a      	ldrh	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa4:	1c9a      	adds	r2, r3, #2
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ab8:	e018      	b.n	8003aec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aba:	f7fd fc85 	bl	80013c8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d803      	bhi.n	8003ad2 <HAL_SPI_Transmit+0x160>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ad0:	d102      	bne.n	8003ad8 <HAL_SPI_Transmit+0x166>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e082      	b.n	8003bf2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1c7      	bne.n	8003a86 <HAL_SPI_Transmit+0x114>
 8003af6:	e053      	b.n	8003ba0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_SPI_Transmit+0x194>
 8003b00:	8b7b      	ldrh	r3, [r7, #26]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d147      	bne.n	8003b96 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	7812      	ldrb	r2, [r2, #0]
 8003b12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b2c:	e033      	b.n	8003b96 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d113      	bne.n	8003b64 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	7812      	ldrb	r2, [r2, #0]
 8003b48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b62:	e018      	b.n	8003b96 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b64:	f7fd fc30 	bl	80013c8 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d803      	bhi.n	8003b7c <HAL_SPI_Transmit+0x20a>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b7a:	d102      	bne.n	8003b82 <HAL_SPI_Transmit+0x210>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e02d      	b.n	8003bf2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1c6      	bne.n	8003b2e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	6839      	ldr	r1, [r7, #0]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 ff25 	bl	80049f4 <SPI_EndRxTxTransaction>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
  }
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b088      	sub	sp, #32
 8003bfe:	af02      	add	r7, sp, #8
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d001      	beq.n	8003c1a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003c16:	2302      	movs	r3, #2
 8003c18:	e104      	b.n	8003e24 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c22:	d112      	bne.n	8003c4a <HAL_SPI_Receive+0x50>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10e      	bne.n	8003c4a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2204      	movs	r2, #4
 8003c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c34:	88fa      	ldrh	r2, [r7, #6]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f8f3 	bl	8003e2c <HAL_SPI_TransmitReceive>
 8003c46:	4603      	mov	r3, r0
 8003c48:	e0ec      	b.n	8003e24 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c4a:	f7fd fbbd 	bl	80013c8 <HAL_GetTick>
 8003c4e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_SPI_Receive+0x62>
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0e1      	b.n	8003e24 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_SPI_Receive+0x74>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e0da      	b.n	8003e24 <HAL_SPI_Receive+0x22a>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2204      	movs	r2, #4
 8003c7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	88fa      	ldrh	r2, [r7, #6]
 8003c8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cbc:	d10f      	bne.n	8003cde <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ccc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003cdc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce8:	2b40      	cmp	r3, #64	@ 0x40
 8003cea:	d007      	beq.n	8003cfc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cfa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d170      	bne.n	8003de6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d04:	e035      	b.n	8003d72 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d115      	bne.n	8003d40 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f103 020c 	add.w	r2, r3, #12
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d20:	7812      	ldrb	r2, [r2, #0]
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d3e:	e018      	b.n	8003d72 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d40:	f7fd fb42 	bl	80013c8 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d803      	bhi.n	8003d58 <HAL_SPI_Receive+0x15e>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d56:	d102      	bne.n	8003d5e <HAL_SPI_Receive+0x164>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e058      	b.n	8003e24 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1c4      	bne.n	8003d06 <HAL_SPI_Receive+0x10c>
 8003d7c:	e038      	b.n	8003df0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d113      	bne.n	8003db4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d96:	b292      	uxth	r2, r2
 8003d98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9e:	1c9a      	adds	r2, r3, #2
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003db2:	e018      	b.n	8003de6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003db4:	f7fd fb08 	bl	80013c8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d803      	bhi.n	8003dcc <HAL_SPI_Receive+0x1d2>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dca:	d102      	bne.n	8003dd2 <HAL_SPI_Receive+0x1d8>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e01e      	b.n	8003e24 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1c6      	bne.n	8003d7e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	6839      	ldr	r1, [r7, #0]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fd97 	bl	8004928 <SPI_EndRxTransaction>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003e22:	2300      	movs	r3, #0
  }
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	@ 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e3e:	f7fd fac3 	bl	80013c8 <HAL_GetTick>
 8003e42:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e4a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003e52:	887b      	ldrh	r3, [r7, #2]
 8003e54:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e56:	7ffb      	ldrb	r3, [r7, #31]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d00c      	beq.n	8003e76 <HAL_SPI_TransmitReceive+0x4a>
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e62:	d106      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x46>
 8003e6c:	7ffb      	ldrb	r3, [r7, #31]
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d001      	beq.n	8003e76 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
 8003e74:	e17f      	b.n	8004176 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_SPI_TransmitReceive+0x5c>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_SPI_TransmitReceive+0x5c>
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e174      	b.n	8004176 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_SPI_TransmitReceive+0x6e>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e16d      	b.n	8004176 <HAL_SPI_TransmitReceive+0x34a>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d003      	beq.n	8003eb6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2205      	movs	r2, #5
 8003eb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	887a      	ldrh	r2, [r7, #2]
 8003ec6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	887a      	ldrh	r2, [r7, #2]
 8003ecc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	887a      	ldrh	r2, [r7, #2]
 8003ede:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef6:	2b40      	cmp	r3, #64	@ 0x40
 8003ef8:	d007      	beq.n	8003f0a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f12:	d17e      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0xf6>
 8003f1c:	8afb      	ldrh	r3, [r7, #22]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d16c      	bne.n	8003ffc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f26:	881a      	ldrh	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f32:	1c9a      	adds	r2, r3, #2
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f46:	e059      	b.n	8003ffc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d11b      	bne.n	8003f8e <HAL_SPI_TransmitReceive+0x162>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d016      	beq.n	8003f8e <HAL_SPI_TransmitReceive+0x162>
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d113      	bne.n	8003f8e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6a:	881a      	ldrh	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	1c9a      	adds	r2, r3, #2
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d119      	bne.n	8003fd0 <HAL_SPI_TransmitReceive+0x1a4>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d014      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb0:	b292      	uxth	r2, r2
 8003fb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb8:	1c9a      	adds	r2, r3, #2
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fd0:	f7fd f9fa 	bl	80013c8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d80d      	bhi.n	8003ffc <HAL_SPI_TransmitReceive+0x1d0>
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fe6:	d009      	beq.n	8003ffc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e0bc      	b.n	8004176 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1a0      	bne.n	8003f48 <HAL_SPI_TransmitReceive+0x11c>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d19b      	bne.n	8003f48 <HAL_SPI_TransmitReceive+0x11c>
 8004010:	e082      	b.n	8004118 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x1f4>
 800401a:	8afb      	ldrh	r3, [r7, #22]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d171      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	7812      	ldrb	r2, [r2, #0]
 800402c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004046:	e05d      	b.n	8004104 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d11c      	bne.n	8004090 <HAL_SPI_TransmitReceive+0x264>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d017      	beq.n	8004090 <HAL_SPI_TransmitReceive+0x264>
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	2b01      	cmp	r3, #1
 8004064:	d114      	bne.n	8004090 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	7812      	ldrb	r2, [r2, #0]
 8004072:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b01      	cmp	r3, #1
 800409c:	d119      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x2a6>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d014      	beq.n	80040d2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040ce:	2301      	movs	r3, #1
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040d2:	f7fd f979 	bl	80013c8 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040de:	429a      	cmp	r2, r3
 80040e0:	d803      	bhi.n	80040ea <HAL_SPI_TransmitReceive+0x2be>
 80040e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040e8:	d102      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x2c4>
 80040ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d109      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e038      	b.n	8004176 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d19c      	bne.n	8004048 <HAL_SPI_TransmitReceive+0x21c>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d197      	bne.n	8004048 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004118:	6a3a      	ldr	r2, [r7, #32]
 800411a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fc69 	bl	80049f4 <SPI_EndRxTxTransaction>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e01d      	b.n	8004176 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004142:	2300      	movs	r3, #0
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004174:	2300      	movs	r3, #0
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3728      	adds	r7, #40	@ 0x28
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b01      	cmp	r3, #1
 8004198:	d001      	beq.n	800419e <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800419a:	2302      	movs	r3, #2
 800419c:	e07f      	b.n	800429e <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d110      	bne.n	80041c8 <HAL_SPI_Receive_IT+0x48>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041ae:	d10b      	bne.n	80041c8 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2204      	movs	r2, #4
 80041b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80041b8:	88fb      	ldrh	r3, [r7, #6]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f876 	bl	80042b0 <HAL_SPI_TransmitReceive_IT>
 80041c4:	4603      	mov	r3, r0
 80041c6:	e06a      	b.n	800429e <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_SPI_Receive_IT+0x54>
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e062      	b.n	800429e <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_SPI_Receive_IT+0x66>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e05b      	b.n	800429e <HAL_SPI_Receive_IT+0x11e>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2204      	movs	r2, #4
 80041f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	88fa      	ldrh	r2, [r7, #6]
 8004206:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	88fa      	ldrh	r2, [r7, #6]
 800420c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a1d      	ldr	r2, [pc, #116]	@ (80042a8 <HAL_SPI_Receive_IT+0x128>)
 8004232:	641a      	str	r2, [r3, #64]	@ 0x40
 8004234:	e002      	b.n	800423c <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4a1c      	ldr	r2, [pc, #112]	@ (80042ac <HAL_SPI_Receive_IT+0x12c>)
 800423a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004244:	d10f      	bne.n	8004266 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004254:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004264:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004270:	2b40      	cmp	r3, #64	@ 0x40
 8004272:	d007      	beq.n	8004284 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004282:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800429a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	080047d1 	.word	0x080047d1
 80042ac:	08004787 	.word	0x08004787

080042b0 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042c4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d00c      	beq.n	80042ec <HAL_SPI_TransmitReceive_IT+0x3c>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042d8:	d106      	bne.n	80042e8 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d102      	bne.n	80042e8 <HAL_SPI_TransmitReceive_IT+0x38>
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d001      	beq.n	80042ec <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_BUSY;
 80042e8:	2302      	movs	r3, #2
 80042ea:	e061      	b.n	80043b0 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_SPI_TransmitReceive_IT+0x4e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_SPI_TransmitReceive_IT+0x4e>
 80042f8:	887b      	ldrh	r3, [r7, #2]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e056      	b.n	80043b0 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_SPI_TransmitReceive_IT+0x60>
 800430c:	2302      	movs	r3, #2
 800430e:	e04f      	b.n	80043b0 <HAL_SPI_TransmitReceive_IT+0x100>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b04      	cmp	r3, #4
 8004322:	d003      	beq.n	800432c <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2205      	movs	r2, #5
 8004328:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	887a      	ldrh	r2, [r7, #2]
 800433c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	887a      	ldrh	r2, [r7, #2]
 8004342:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	887a      	ldrh	r2, [r7, #2]
 800434e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	887a      	ldrh	r2, [r7, #2]
 8004354:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d006      	beq.n	800436c <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4a16      	ldr	r2, [pc, #88]	@ (80043bc <HAL_SPI_TransmitReceive_IT+0x10c>)
 8004362:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a16      	ldr	r2, [pc, #88]	@ (80043c0 <HAL_SPI_TransmitReceive_IT+0x110>)
 8004368:	645a      	str	r2, [r3, #68]	@ 0x44
 800436a:	e005      	b.n	8004378 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4a15      	ldr	r2, [pc, #84]	@ (80043c4 <HAL_SPI_TransmitReceive_IT+0x114>)
 8004370:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4a14      	ldr	r2, [pc, #80]	@ (80043c8 <HAL_SPI_TransmitReceive_IT+0x118>)
 8004376:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004382:	2b40      	cmp	r3, #64	@ 0x40
 8004384:	d007      	beq.n	8004396 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004394:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80043ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	080046c9 	.word	0x080046c9
 80043c0:	08004729 	.word	0x08004729
 80043c4:	08004605 	.word	0x08004605
 80043c8:	08004669 	.word	0x08004669

080043cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10e      	bne.n	800440c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d009      	beq.n	800440c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d004      	beq.n	800440c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
    return;
 800440a:	e0ce      	b.n	80045aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <HAL_SPI_IRQHandler+0x5e>
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4798      	blx	r3
    return;
 8004428:	e0bf      	b.n	80045aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <HAL_SPI_IRQHandler+0x7e>
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d105      	bne.n	800444a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80b0 	beq.w	80045aa <HAL_SPI_IRQHandler+0x1de>
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80aa 	beq.w	80045aa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d023      	beq.n	80044a8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b03      	cmp	r3, #3
 800446a:	d011      	beq.n	8004490 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004470:	f043 0204 	orr.w	r2, r3, #4
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	e00b      	b.n	80044a8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	693b      	ldr	r3, [r7, #16]
        return;
 80044a6:	e080      	b.n	80045aa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d014      	beq.n	80044dc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b6:	f043 0201 	orr.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00c      	beq.n	8004500 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ea:	f043 0208 	orr.w	r2, r3, #8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004504:	2b00      	cmp	r3, #0
 8004506:	d04f      	beq.n	80045a8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004516:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <HAL_SPI_IRQHandler+0x168>
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d034      	beq.n	800459e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0203 	bic.w	r2, r2, #3
 8004542:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d011      	beq.n	8004570 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004550:	4a17      	ldr	r2, [pc, #92]	@ (80045b0 <HAL_SPI_IRQHandler+0x1e4>)
 8004552:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004558:	4618      	mov	r0, r3
 800455a:	f7fd f8e6 	bl	800172a <HAL_DMA_Abort_IT>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004568:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004574:	2b00      	cmp	r3, #0
 8004576:	d016      	beq.n	80045a6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800457c:	4a0c      	ldr	r2, [pc, #48]	@ (80045b0 <HAL_SPI_IRQHandler+0x1e4>)
 800457e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004584:	4618      	mov	r0, r3
 8004586:	f7fd f8d0 	bl	800172a <HAL_DMA_Abort_IT>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004594:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800459c:	e003      	b.n	80045a6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f812 	bl	80045c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80045a4:	e000      	b.n	80045a8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80045a6:	bf00      	nop
    return;
 80045a8:	bf00      	nop
  }
}
 80045aa:	3720      	adds	r7, #32
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	080045dd 	.word	0x080045dd

080045b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7ff ffe6 	bl	80045c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f103 020c 	add.w	r2, r3, #12
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	7812      	ldrb	r2, [r2, #0]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10f      	bne.n	8004660 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800464e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fa1e 	bl	8004a9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	330c      	adds	r3, #12
 800467a:	7812      	ldrb	r2, [r2, #0]
 800467c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10f      	bne.n	80046c0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046ae:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d102      	bne.n	80046c0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f9ee 	bl	8004a9c <SPI_CloseRxTx_ISR>
    }
  }
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046da:	b292      	uxth	r2, r2
 80046dc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e2:	1c9a      	adds	r2, r3, #2
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10f      	bne.n	8004720 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800470e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f9be 	bl	8004a9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004734:	881a      	ldrh	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004740:	1c9a      	adds	r2, r3, #2
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10f      	bne.n	800477e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800476c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f98f 	bl	8004a9c <SPI_CloseRxTx_ISR>
    }
  }
}
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f103 020c 	add.w	r2, r3, #12
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479a:	7812      	ldrb	r2, [r2, #0]
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d102      	bne.n	80047c8 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f9de 	bl	8004b84 <SPI_CloseRx_ISR>
  }
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e2:	b292      	uxth	r2, r2
 80047e4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ea:	1c9a      	adds	r2, r3, #2
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d102      	bne.n	800480e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f9bb 	bl	8004b84 <SPI_CloseRx_ISR>
  }
}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	4613      	mov	r3, r2
 8004826:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004828:	f7fc fdce 	bl	80013c8 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	4413      	add	r3, r2
 8004836:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004838:	f7fc fdc6 	bl	80013c8 <HAL_GetTick>
 800483c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800483e:	4b39      	ldr	r3, [pc, #228]	@ (8004924 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	015b      	lsls	r3, r3, #5
 8004844:	0d1b      	lsrs	r3, r3, #20
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	fb02 f303 	mul.w	r3, r2, r3
 800484c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800484e:	e054      	b.n	80048fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004856:	d050      	beq.n	80048fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004858:	f7fc fdb6 	bl	80013c8 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	429a      	cmp	r2, r3
 8004866:	d902      	bls.n	800486e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d13d      	bne.n	80048ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800487c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004886:	d111      	bne.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004890:	d004      	beq.n	800489c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489a:	d107      	bne.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048b4:	d10f      	bne.n	80048d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e017      	b.n	800491a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	429a      	cmp	r2, r3
 8004908:	bf0c      	ite	eq
 800490a:	2301      	moveq	r3, #1
 800490c:	2300      	movne	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	429a      	cmp	r2, r3
 8004916:	d19b      	bne.n	8004850 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000004 	.word	0x20000004

08004928 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800493c:	d111      	bne.n	8004962 <SPI_EndRxTransaction+0x3a>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004946:	d004      	beq.n	8004952 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004950:	d107      	bne.n	8004962 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004960:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800496a:	d12a      	bne.n	80049c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004974:	d012      	beq.n	800499c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2200      	movs	r2, #0
 800497e:	2180      	movs	r1, #128	@ 0x80
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f7ff ff49 	bl	8004818 <SPI_WaitFlagStateUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d02d      	beq.n	80049e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004990:	f043 0220 	orr.w	r2, r3, #32
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e026      	b.n	80049ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2200      	movs	r2, #0
 80049a4:	2101      	movs	r1, #1
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7ff ff36 	bl	8004818 <SPI_WaitFlagStateUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01a      	beq.n	80049e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b6:	f043 0220 	orr.w	r2, r3, #32
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e013      	b.n	80049ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2101      	movs	r1, #1
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f7ff ff23 	bl	8004818 <SPI_WaitFlagStateUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049dc:	f043 0220 	orr.w	r2, r3, #32
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e000      	b.n	80049ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2201      	movs	r2, #1
 8004a08:	2102      	movs	r1, #2
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff ff04 	bl	8004818 <SPI_WaitFlagStateUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e032      	b.n	8004a8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a26:	4b1b      	ldr	r3, [pc, #108]	@ (8004a94 <SPI_EndRxTxTransaction+0xa0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a98 <SPI_EndRxTxTransaction+0xa4>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	0d5b      	lsrs	r3, r3, #21
 8004a32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a36:	fb02 f303 	mul.w	r3, r2, r3
 8004a3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a44:	d112      	bne.n	8004a6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2180      	movs	r1, #128	@ 0x80
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7ff fee1 	bl	8004818 <SPI_WaitFlagStateUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d016      	beq.n	8004a8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a60:	f043 0220 	orr.w	r2, r3, #32
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e00f      	b.n	8004a8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a82:	2b80      	cmp	r3, #128	@ 0x80
 8004a84:	d0f2      	beq.n	8004a6c <SPI_EndRxTxTransaction+0x78>
 8004a86:	e000      	b.n	8004a8a <SPI_EndRxTxTransaction+0x96>
        break;
 8004a88:	bf00      	nop
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000004 	.word	0x20000004
 8004a98:	165e9f81 	.word	0x165e9f81

08004a9c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004aa4:	4b35      	ldr	r3, [pc, #212]	@ (8004b7c <SPI_CloseRxTx_ISR+0xe0>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a35      	ldr	r2, [pc, #212]	@ (8004b80 <SPI_CloseRxTx_ISR+0xe4>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	0a5b      	lsrs	r3, r3, #9
 8004ab0:	2264      	movs	r2, #100	@ 0x64
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ab8:	f7fc fc86 	bl	80013c8 <HAL_GetTick>
 8004abc:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0220 	bic.w	r2, r2, #32
 8004acc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ae0:	e009      	b.n	8004af6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0eb      	beq.n	8004ace <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	2164      	movs	r1, #100	@ 0x64
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff ff7a 	bl	80049f4 <SPI_EndRxTxTransaction>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0a:	f043 0220 	orr.w	r2, r3, #32
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d115      	bne.n	8004b64 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d107      	bne.n	8004b54 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fb feeb 	bl	8000928 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004b52:	e00e      	b.n	8004b72 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fd29 	bl	80045b4 <HAL_SPI_TxRxCpltCallback>
}
 8004b62:	e006      	b.n	8004b72 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff fd2b 	bl	80045c8 <HAL_SPI_ErrorCallback>
}
 8004b72:	bf00      	nop
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000004 	.word	0x20000004
 8004b80:	057619f1 	.word	0x057619f1

08004b84 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b9a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004b9c:	f7fc fc14 	bl	80013c8 <HAL_GetTick>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	2164      	movs	r1, #100	@ 0x64
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff febe 	bl	8004928 <SPI_EndRxTransaction>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb6:	f043 0220 	orr.w	r2, r3, #32
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d103      	bne.n	8004bf4 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7fb fe9b 	bl	8000928 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004bf2:	e002      	b.n	8004bfa <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff fce7 	bl	80045c8 <HAL_SPI_ErrorCallback>
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e042      	b.n	8004c9a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d106      	bne.n	8004c2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7fb ff23 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2224      	movs	r2, #36	@ 0x24
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fcda 	bl	8005600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695a      	ldr	r2, [r3, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	4613      	mov	r3, r2
 8004cae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d112      	bne.n	8004ce2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_UART_Receive_IT+0x26>
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e00b      	b.n	8004ce4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fab9 	bl	8005250 <UART_Start_Receive_IT>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	e000      	b.n	8004ce4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ce2:	2302      	movs	r3, #2
  }
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b0ba      	sub	sp, #232	@ 0xe8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10f      	bne.n	8004d52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <HAL_UART_IRQHandler+0x66>
 8004d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fb99 	bl	8005482 <UART_Receive_IT>
      return;
 8004d50:	e25b      	b.n	800520a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80de 	beq.w	8004f18 <HAL_UART_IRQHandler+0x22c>
 8004d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80d1 	beq.w	8004f18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <HAL_UART_IRQHandler+0xae>
 8004d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d92:	f043 0201 	orr.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00b      	beq.n	8004dbe <HAL_UART_IRQHandler+0xd2>
 8004da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db6:	f043 0202 	orr.w	r2, r3, #2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <HAL_UART_IRQHandler+0xf6>
 8004dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dda:	f043 0204 	orr.w	r2, r3, #4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d011      	beq.n	8004e12 <HAL_UART_IRQHandler+0x126>
 8004dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d105      	bne.n	8004e06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0a:	f043 0208 	orr.w	r2, r3, #8
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 81f2 	beq.w	8005200 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_UART_IRQHandler+0x14e>
 8004e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fb24 	bl	8005482 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e44:	2b40      	cmp	r3, #64	@ 0x40
 8004e46:	bf0c      	ite	eq
 8004e48:	2301      	moveq	r3, #1
 8004e4a:	2300      	movne	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <HAL_UART_IRQHandler+0x17a>
 8004e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d04f      	beq.n	8004f06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fa2c 	bl	80052c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e76:	2b40      	cmp	r3, #64	@ 0x40
 8004e78:	d141      	bne.n	8004efe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3314      	adds	r3, #20
 8004e80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3314      	adds	r3, #20
 8004ea2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ea6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004eb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1d9      	bne.n	8004e7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d013      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed2:	4a7e      	ldr	r2, [pc, #504]	@ (80050cc <HAL_UART_IRQHandler+0x3e0>)
 8004ed4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fc fc25 	bl	800172a <HAL_DMA_Abort_IT>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d016      	beq.n	8004f14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef4:	e00e      	b.n	8004f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f994 	bl	8005224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efc:	e00a      	b.n	8004f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f990 	bl	8005224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f04:	e006      	b.n	8004f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f98c 	bl	8005224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f12:	e175      	b.n	8005200 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f14:	bf00      	nop
    return;
 8004f16:	e173      	b.n	8005200 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	f040 814f 	bne.w	80051c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8148 	beq.w	80051c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8141 	beq.w	80051c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5e:	2b40      	cmp	r3, #64	@ 0x40
 8004f60:	f040 80b6 	bne.w	80050d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8145 	beq.w	8005204 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f82:	429a      	cmp	r2, r3
 8004f84:	f080 813e 	bcs.w	8005204 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f9a:	f000 8088 	beq.w	80050ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	330c      	adds	r3, #12
 8004fa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004fca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004fd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004fda:	e841 2300 	strex	r3, r2, [r1]
 8004fde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1d9      	bne.n	8004f9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3314      	adds	r3, #20
 8004ff0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ffa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ffc:	f023 0301 	bic.w	r3, r3, #1
 8005000:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3314      	adds	r3, #20
 800500a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800500e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005012:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005016:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005020:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e1      	bne.n	8004fea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3314      	adds	r3, #20
 800502c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005038:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800503c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3314      	adds	r3, #20
 8005046:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800504a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800504c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005050:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005058:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e3      	bne.n	8005026 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800507c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800507e:	f023 0310 	bic.w	r3, r3, #16
 8005082:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005090:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005092:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005096:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800509e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e3      	bne.n	800506c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fc face 	bl	800164a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050bc:	b29b      	uxth	r3, r3
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f8b7 	bl	8005238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050ca:	e09b      	b.n	8005204 <HAL_UART_IRQHandler+0x518>
 80050cc:	0800538b 	.word	0x0800538b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050d8:	b29b      	uxth	r3, r3
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 808e 	beq.w	8005208 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8089 	beq.w	8005208 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	330c      	adds	r3, #12
 80050fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800510c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800511a:	647a      	str	r2, [r7, #68]	@ 0x44
 800511c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005120:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e3      	bne.n	80050f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3314      	adds	r3, #20
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	623b      	str	r3, [r7, #32]
   return(result);
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005152:	633a      	str	r2, [r7, #48]	@ 0x30
 8005154:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005156:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1e3      	bne.n	800512e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	60fb      	str	r3, [r7, #12]
   return(result);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0310 	bic.w	r3, r3, #16
 800518a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005198:	61fa      	str	r2, [r7, #28]
 800519a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	69b9      	ldr	r1, [r7, #24]
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	e841 2300 	strex	r3, r2, [r1]
 80051a4:	617b      	str	r3, [r7, #20]
   return(result);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1e3      	bne.n	8005174 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f83d 	bl	8005238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051be:	e023      	b.n	8005208 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d009      	beq.n	80051e0 <HAL_UART_IRQHandler+0x4f4>
 80051cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f8ea 	bl	80053b2 <UART_Transmit_IT>
    return;
 80051de:	e014      	b.n	800520a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00e      	beq.n	800520a <HAL_UART_IRQHandler+0x51e>
 80051ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f92a 	bl	8005452 <UART_EndTransmit_IT>
    return;
 80051fe:	e004      	b.n	800520a <HAL_UART_IRQHandler+0x51e>
    return;
 8005200:	bf00      	nop
 8005202:	e002      	b.n	800520a <HAL_UART_IRQHandler+0x51e>
      return;
 8005204:	bf00      	nop
 8005206:	e000      	b.n	800520a <HAL_UART_IRQHandler+0x51e>
      return;
 8005208:	bf00      	nop
  }
}
 800520a:	37e8      	adds	r7, #232	@ 0xe8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	88fa      	ldrh	r2, [r7, #6]
 8005268:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	88fa      	ldrh	r2, [r7, #6]
 800526e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2222      	movs	r2, #34	@ 0x22
 800527a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005294:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695a      	ldr	r2, [r3, #20]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0220 	orr.w	r2, r2, #32
 80052b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b095      	sub	sp, #84	@ 0x54
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	330c      	adds	r3, #12
 80052ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80052ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e5      	bne.n	80052cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3314      	adds	r3, #20
 8005306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f023 0301 	bic.w	r3, r3, #1
 8005316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3314      	adds	r3, #20
 800531e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005320:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005322:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e5      	bne.n	8005300 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005338:	2b01      	cmp	r3, #1
 800533a:	d119      	bne.n	8005370 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	330c      	adds	r3, #12
 8005342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	60bb      	str	r3, [r7, #8]
   return(result);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f023 0310 	bic.w	r3, r3, #16
 8005352:	647b      	str	r3, [r7, #68]	@ 0x44
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	330c      	adds	r3, #12
 800535a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800535c:	61ba      	str	r2, [r7, #24]
 800535e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6979      	ldr	r1, [r7, #20]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	613b      	str	r3, [r7, #16]
   return(result);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e5      	bne.n	800533c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800537e:	bf00      	nop
 8005380:	3754      	adds	r7, #84	@ 0x54
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005396:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff ff3d 	bl	8005224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b21      	cmp	r3, #33	@ 0x21
 80053c4:	d13e      	bne.n	8005444 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ce:	d114      	bne.n	80053fa <UART_Transmit_IT+0x48>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d110      	bne.n	80053fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	1c9a      	adds	r2, r3, #2
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	621a      	str	r2, [r3, #32]
 80053f8:	e008      	b.n	800540c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	1c59      	adds	r1, r3, #1
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6211      	str	r1, [r2, #32]
 8005404:	781a      	ldrb	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29b      	uxth	r3, r3
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	4619      	mov	r1, r3
 800541a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10f      	bne.n	8005440 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800542e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800543e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	e000      	b.n	8005446 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005444:	2302      	movs	r3, #2
  }
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005468:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff fecc 	bl	8005210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b08c      	sub	sp, #48	@ 0x30
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b22      	cmp	r3, #34	@ 0x22
 8005494:	f040 80ae 	bne.w	80055f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054a0:	d117      	bne.n	80054d2 <UART_Receive_IT+0x50>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d113      	bne.n	80054d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ca:	1c9a      	adds	r2, r3, #2
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80054d0:	e026      	b.n	8005520 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054e4:	d007      	beq.n	80054f6 <UART_Receive_IT+0x74>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <UART_Receive_IT+0x82>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	e008      	b.n	8005516 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005510:	b2da      	uxtb	r2, r3
 8005512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005514:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	b29b      	uxth	r3, r3
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4619      	mov	r1, r3
 800552e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005530:	2b00      	cmp	r3, #0
 8005532:	d15d      	bne.n	80055f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0220 	bic.w	r2, r2, #32
 8005542:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005552:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695a      	ldr	r2, [r3, #20]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	2b01      	cmp	r3, #1
 8005578:	d135      	bne.n	80055e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	330c      	adds	r3, #12
 8005586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	613b      	str	r3, [r7, #16]
   return(result);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f023 0310 	bic.w	r3, r3, #16
 8005596:	627b      	str	r3, [r7, #36]	@ 0x24
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a0:	623a      	str	r2, [r7, #32]
 80055a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	69f9      	ldr	r1, [r7, #28]
 80055a6:	6a3a      	ldr	r2, [r7, #32]
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e5      	bne.n	8005580 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2b10      	cmp	r3, #16
 80055c0:	d10a      	bne.n	80055d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055dc:	4619      	mov	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff fe2a 	bl	8005238 <HAL_UARTEx_RxEventCallback>
 80055e4:	e002      	b.n	80055ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fb f9b0 	bl	800094c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e002      	b.n	80055f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	e000      	b.n	80055f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80055f4:	2302      	movs	r3, #2
  }
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3730      	adds	r7, #48	@ 0x30
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005604:	b0c0      	sub	sp, #256	@ 0x100
 8005606:	af00      	add	r7, sp, #0
 8005608:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561c:	68d9      	ldr	r1, [r3, #12]
 800561e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	ea40 0301 	orr.w	r3, r0, r1
 8005628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	431a      	orrs	r2, r3
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	431a      	orrs	r2, r3
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005658:	f021 010c 	bic.w	r1, r1, #12
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005666:	430b      	orrs	r3, r1
 8005668:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567a:	6999      	ldr	r1, [r3, #24]
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	ea40 0301 	orr.w	r3, r0, r1
 8005686:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b8f      	ldr	r3, [pc, #572]	@ (80058cc <UART_SetConfig+0x2cc>)
 8005690:	429a      	cmp	r2, r3
 8005692:	d005      	beq.n	80056a0 <UART_SetConfig+0xa0>
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4b8d      	ldr	r3, [pc, #564]	@ (80058d0 <UART_SetConfig+0x2d0>)
 800569c:	429a      	cmp	r2, r3
 800569e:	d104      	bne.n	80056aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056a0:	f7fe f8ca 	bl	8003838 <HAL_RCC_GetPCLK2Freq>
 80056a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056a8:	e003      	b.n	80056b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056aa:	f7fe f8b1 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 80056ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056bc:	f040 810c 	bne.w	80058d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056d2:	4622      	mov	r2, r4
 80056d4:	462b      	mov	r3, r5
 80056d6:	1891      	adds	r1, r2, r2
 80056d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056da:	415b      	adcs	r3, r3
 80056dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056e2:	4621      	mov	r1, r4
 80056e4:	eb12 0801 	adds.w	r8, r2, r1
 80056e8:	4629      	mov	r1, r5
 80056ea:	eb43 0901 	adc.w	r9, r3, r1
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005702:	4690      	mov	r8, r2
 8005704:	4699      	mov	r9, r3
 8005706:	4623      	mov	r3, r4
 8005708:	eb18 0303 	adds.w	r3, r8, r3
 800570c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005710:	462b      	mov	r3, r5
 8005712:	eb49 0303 	adc.w	r3, r9, r3
 8005716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005726:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800572a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800572e:	460b      	mov	r3, r1
 8005730:	18db      	adds	r3, r3, r3
 8005732:	653b      	str	r3, [r7, #80]	@ 0x50
 8005734:	4613      	mov	r3, r2
 8005736:	eb42 0303 	adc.w	r3, r2, r3
 800573a:	657b      	str	r3, [r7, #84]	@ 0x54
 800573c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005740:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005744:	f7fa fd48 	bl	80001d8 <__aeabi_uldivmod>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4b61      	ldr	r3, [pc, #388]	@ (80058d4 <UART_SetConfig+0x2d4>)
 800574e:	fba3 2302 	umull	r2, r3, r3, r2
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	011c      	lsls	r4, r3, #4
 8005756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800575a:	2200      	movs	r2, #0
 800575c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005760:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005764:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005768:	4642      	mov	r2, r8
 800576a:	464b      	mov	r3, r9
 800576c:	1891      	adds	r1, r2, r2
 800576e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005770:	415b      	adcs	r3, r3
 8005772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005774:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005778:	4641      	mov	r1, r8
 800577a:	eb12 0a01 	adds.w	sl, r2, r1
 800577e:	4649      	mov	r1, r9
 8005780:	eb43 0b01 	adc.w	fp, r3, r1
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005790:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005798:	4692      	mov	sl, r2
 800579a:	469b      	mov	fp, r3
 800579c:	4643      	mov	r3, r8
 800579e:	eb1a 0303 	adds.w	r3, sl, r3
 80057a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057a6:	464b      	mov	r3, r9
 80057a8:	eb4b 0303 	adc.w	r3, fp, r3
 80057ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80057c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057c4:	460b      	mov	r3, r1
 80057c6:	18db      	adds	r3, r3, r3
 80057c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80057ca:	4613      	mov	r3, r2
 80057cc:	eb42 0303 	adc.w	r3, r2, r3
 80057d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80057d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057da:	f7fa fcfd 	bl	80001d8 <__aeabi_uldivmod>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4611      	mov	r1, r2
 80057e4:	4b3b      	ldr	r3, [pc, #236]	@ (80058d4 <UART_SetConfig+0x2d4>)
 80057e6:	fba3 2301 	umull	r2, r3, r3, r1
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	2264      	movs	r2, #100	@ 0x64
 80057ee:	fb02 f303 	mul.w	r3, r2, r3
 80057f2:	1acb      	subs	r3, r1, r3
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057fa:	4b36      	ldr	r3, [pc, #216]	@ (80058d4 <UART_SetConfig+0x2d4>)
 80057fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005808:	441c      	add	r4, r3
 800580a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800580e:	2200      	movs	r2, #0
 8005810:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005814:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005818:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800581c:	4642      	mov	r2, r8
 800581e:	464b      	mov	r3, r9
 8005820:	1891      	adds	r1, r2, r2
 8005822:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005824:	415b      	adcs	r3, r3
 8005826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800582c:	4641      	mov	r1, r8
 800582e:	1851      	adds	r1, r2, r1
 8005830:	6339      	str	r1, [r7, #48]	@ 0x30
 8005832:	4649      	mov	r1, r9
 8005834:	414b      	adcs	r3, r1
 8005836:	637b      	str	r3, [r7, #52]	@ 0x34
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005844:	4659      	mov	r1, fp
 8005846:	00cb      	lsls	r3, r1, #3
 8005848:	4651      	mov	r1, sl
 800584a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800584e:	4651      	mov	r1, sl
 8005850:	00ca      	lsls	r2, r1, #3
 8005852:	4610      	mov	r0, r2
 8005854:	4619      	mov	r1, r3
 8005856:	4603      	mov	r3, r0
 8005858:	4642      	mov	r2, r8
 800585a:	189b      	adds	r3, r3, r2
 800585c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005860:	464b      	mov	r3, r9
 8005862:	460a      	mov	r2, r1
 8005864:	eb42 0303 	adc.w	r3, r2, r3
 8005868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005878:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800587c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005880:	460b      	mov	r3, r1
 8005882:	18db      	adds	r3, r3, r3
 8005884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005886:	4613      	mov	r3, r2
 8005888:	eb42 0303 	adc.w	r3, r2, r3
 800588c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800588e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005892:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005896:	f7fa fc9f 	bl	80001d8 <__aeabi_uldivmod>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <UART_SetConfig+0x2d4>)
 80058a0:	fba3 1302 	umull	r1, r3, r3, r2
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	2164      	movs	r1, #100	@ 0x64
 80058a8:	fb01 f303 	mul.w	r3, r1, r3
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	3332      	adds	r3, #50	@ 0x32
 80058b2:	4a08      	ldr	r2, [pc, #32]	@ (80058d4 <UART_SetConfig+0x2d4>)
 80058b4:	fba2 2303 	umull	r2, r3, r2, r3
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	f003 0207 	and.w	r2, r3, #7
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4422      	add	r2, r4
 80058c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058c8:	e106      	b.n	8005ad8 <UART_SetConfig+0x4d8>
 80058ca:	bf00      	nop
 80058cc:	40011000 	.word	0x40011000
 80058d0:	40011400 	.word	0x40011400
 80058d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058ea:	4642      	mov	r2, r8
 80058ec:	464b      	mov	r3, r9
 80058ee:	1891      	adds	r1, r2, r2
 80058f0:	6239      	str	r1, [r7, #32]
 80058f2:	415b      	adcs	r3, r3
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058fa:	4641      	mov	r1, r8
 80058fc:	1854      	adds	r4, r2, r1
 80058fe:	4649      	mov	r1, r9
 8005900:	eb43 0501 	adc.w	r5, r3, r1
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	00eb      	lsls	r3, r5, #3
 800590e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005912:	00e2      	lsls	r2, r4, #3
 8005914:	4614      	mov	r4, r2
 8005916:	461d      	mov	r5, r3
 8005918:	4643      	mov	r3, r8
 800591a:	18e3      	adds	r3, r4, r3
 800591c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005920:	464b      	mov	r3, r9
 8005922:	eb45 0303 	adc.w	r3, r5, r3
 8005926:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005936:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005946:	4629      	mov	r1, r5
 8005948:	008b      	lsls	r3, r1, #2
 800594a:	4621      	mov	r1, r4
 800594c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005950:	4621      	mov	r1, r4
 8005952:	008a      	lsls	r2, r1, #2
 8005954:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005958:	f7fa fc3e 	bl	80001d8 <__aeabi_uldivmod>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4b60      	ldr	r3, [pc, #384]	@ (8005ae4 <UART_SetConfig+0x4e4>)
 8005962:	fba3 2302 	umull	r2, r3, r3, r2
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	011c      	lsls	r4, r3, #4
 800596a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800596e:	2200      	movs	r2, #0
 8005970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005974:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005978:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800597c:	4642      	mov	r2, r8
 800597e:	464b      	mov	r3, r9
 8005980:	1891      	adds	r1, r2, r2
 8005982:	61b9      	str	r1, [r7, #24]
 8005984:	415b      	adcs	r3, r3
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800598c:	4641      	mov	r1, r8
 800598e:	1851      	adds	r1, r2, r1
 8005990:	6139      	str	r1, [r7, #16]
 8005992:	4649      	mov	r1, r9
 8005994:	414b      	adcs	r3, r1
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059a4:	4659      	mov	r1, fp
 80059a6:	00cb      	lsls	r3, r1, #3
 80059a8:	4651      	mov	r1, sl
 80059aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ae:	4651      	mov	r1, sl
 80059b0:	00ca      	lsls	r2, r1, #3
 80059b2:	4610      	mov	r0, r2
 80059b4:	4619      	mov	r1, r3
 80059b6:	4603      	mov	r3, r0
 80059b8:	4642      	mov	r2, r8
 80059ba:	189b      	adds	r3, r3, r2
 80059bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059c0:	464b      	mov	r3, r9
 80059c2:	460a      	mov	r2, r1
 80059c4:	eb42 0303 	adc.w	r3, r2, r3
 80059c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059e4:	4649      	mov	r1, r9
 80059e6:	008b      	lsls	r3, r1, #2
 80059e8:	4641      	mov	r1, r8
 80059ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ee:	4641      	mov	r1, r8
 80059f0:	008a      	lsls	r2, r1, #2
 80059f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059f6:	f7fa fbef 	bl	80001d8 <__aeabi_uldivmod>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4611      	mov	r1, r2
 8005a00:	4b38      	ldr	r3, [pc, #224]	@ (8005ae4 <UART_SetConfig+0x4e4>)
 8005a02:	fba3 2301 	umull	r2, r3, r3, r1
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	2264      	movs	r2, #100	@ 0x64
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	1acb      	subs	r3, r1, r3
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	3332      	adds	r3, #50	@ 0x32
 8005a14:	4a33      	ldr	r2, [pc, #204]	@ (8005ae4 <UART_SetConfig+0x4e4>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a20:	441c      	add	r4, r3
 8005a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a26:	2200      	movs	r2, #0
 8005a28:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a30:	4642      	mov	r2, r8
 8005a32:	464b      	mov	r3, r9
 8005a34:	1891      	adds	r1, r2, r2
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	415b      	adcs	r3, r3
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a40:	4641      	mov	r1, r8
 8005a42:	1851      	adds	r1, r2, r1
 8005a44:	6039      	str	r1, [r7, #0]
 8005a46:	4649      	mov	r1, r9
 8005a48:	414b      	adcs	r3, r1
 8005a4a:	607b      	str	r3, [r7, #4]
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a58:	4659      	mov	r1, fp
 8005a5a:	00cb      	lsls	r3, r1, #3
 8005a5c:	4651      	mov	r1, sl
 8005a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a62:	4651      	mov	r1, sl
 8005a64:	00ca      	lsls	r2, r1, #3
 8005a66:	4610      	mov	r0, r2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	189b      	adds	r3, r3, r2
 8005a70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a72:	464b      	mov	r3, r9
 8005a74:	460a      	mov	r2, r1
 8005a76:	eb42 0303 	adc.w	r3, r2, r3
 8005a7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a86:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a94:	4649      	mov	r1, r9
 8005a96:	008b      	lsls	r3, r1, #2
 8005a98:	4641      	mov	r1, r8
 8005a9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a9e:	4641      	mov	r1, r8
 8005aa0:	008a      	lsls	r2, r1, #2
 8005aa2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005aa6:	f7fa fb97 	bl	80001d8 <__aeabi_uldivmod>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae4 <UART_SetConfig+0x4e4>)
 8005ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	2164      	movs	r1, #100	@ 0x64
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	3332      	adds	r3, #50	@ 0x32
 8005ac2:	4a08      	ldr	r2, [pc, #32]	@ (8005ae4 <UART_SetConfig+0x4e4>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	f003 020f 	and.w	r2, r3, #15
 8005ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4422      	add	r2, r4
 8005ad6:	609a      	str	r2, [r3, #8]
}
 8005ad8:	bf00      	nop
 8005ada:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ae4:	51eb851f 	.word	0x51eb851f

08005ae8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ae8:	b084      	sub	sp, #16
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	f107 001c 	add.w	r0, r7, #28
 8005af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005afa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d123      	bne.n	8005b4a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005b16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d105      	bne.n	8005b3e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f001 fae8 	bl	8007114 <USB_CoreReset>
 8005b44:	4603      	mov	r3, r0
 8005b46:	73fb      	strb	r3, [r7, #15]
 8005b48:	e01b      	b.n	8005b82 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f001 fadc 	bl	8007114 <USB_CoreReset>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d106      	bne.n	8005b76 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b74:	e005      	b.n	8005b82 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b82:	7fbb      	ldrb	r3, [r7, #30]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d10b      	bne.n	8005ba0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f043 0206 	orr.w	r2, r3, #6
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f043 0220 	orr.w	r2, r3, #32
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bac:	b004      	add	sp, #16
 8005bae:	4770      	bx	lr

08005bb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d165      	bne.n	8005c90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4a41      	ldr	r2, [pc, #260]	@ (8005ccc <USB_SetTurnaroundTime+0x11c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d906      	bls.n	8005bda <USB_SetTurnaroundTime+0x2a>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4a40      	ldr	r2, [pc, #256]	@ (8005cd0 <USB_SetTurnaroundTime+0x120>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d202      	bcs.n	8005bda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005bd4:	230f      	movs	r3, #15
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	e062      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4a3c      	ldr	r2, [pc, #240]	@ (8005cd0 <USB_SetTurnaroundTime+0x120>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d306      	bcc.n	8005bf0 <USB_SetTurnaroundTime+0x40>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4a3b      	ldr	r2, [pc, #236]	@ (8005cd4 <USB_SetTurnaroundTime+0x124>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d202      	bcs.n	8005bf0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005bea:	230e      	movs	r3, #14
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	e057      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4a38      	ldr	r2, [pc, #224]	@ (8005cd4 <USB_SetTurnaroundTime+0x124>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d306      	bcc.n	8005c06 <USB_SetTurnaroundTime+0x56>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4a37      	ldr	r2, [pc, #220]	@ (8005cd8 <USB_SetTurnaroundTime+0x128>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d202      	bcs.n	8005c06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c00:	230d      	movs	r3, #13
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	e04c      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	4a33      	ldr	r2, [pc, #204]	@ (8005cd8 <USB_SetTurnaroundTime+0x128>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d306      	bcc.n	8005c1c <USB_SetTurnaroundTime+0x6c>
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4a32      	ldr	r2, [pc, #200]	@ (8005cdc <USB_SetTurnaroundTime+0x12c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d802      	bhi.n	8005c1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c16:	230c      	movs	r3, #12
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	e041      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8005cdc <USB_SetTurnaroundTime+0x12c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d906      	bls.n	8005c32 <USB_SetTurnaroundTime+0x82>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4a2e      	ldr	r2, [pc, #184]	@ (8005ce0 <USB_SetTurnaroundTime+0x130>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d802      	bhi.n	8005c32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c2c:	230b      	movs	r3, #11
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	e036      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	4a2a      	ldr	r2, [pc, #168]	@ (8005ce0 <USB_SetTurnaroundTime+0x130>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d906      	bls.n	8005c48 <USB_SetTurnaroundTime+0x98>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	4a29      	ldr	r2, [pc, #164]	@ (8005ce4 <USB_SetTurnaroundTime+0x134>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d802      	bhi.n	8005c48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c42:	230a      	movs	r3, #10
 8005c44:	617b      	str	r3, [r7, #20]
 8005c46:	e02b      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4a26      	ldr	r2, [pc, #152]	@ (8005ce4 <USB_SetTurnaroundTime+0x134>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d906      	bls.n	8005c5e <USB_SetTurnaroundTime+0xae>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4a25      	ldr	r2, [pc, #148]	@ (8005ce8 <USB_SetTurnaroundTime+0x138>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d202      	bcs.n	8005c5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c58:	2309      	movs	r3, #9
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	e020      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4a21      	ldr	r2, [pc, #132]	@ (8005ce8 <USB_SetTurnaroundTime+0x138>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d306      	bcc.n	8005c74 <USB_SetTurnaroundTime+0xc4>
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	4a20      	ldr	r2, [pc, #128]	@ (8005cec <USB_SetTurnaroundTime+0x13c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d802      	bhi.n	8005c74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c6e:	2308      	movs	r3, #8
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e015      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4a1d      	ldr	r2, [pc, #116]	@ (8005cec <USB_SetTurnaroundTime+0x13c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d906      	bls.n	8005c8a <USB_SetTurnaroundTime+0xda>
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf0 <USB_SetTurnaroundTime+0x140>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d202      	bcs.n	8005c8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005c84:	2307      	movs	r3, #7
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e00a      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005c8a:	2306      	movs	r3, #6
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e007      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005c96:	2309      	movs	r3, #9
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e001      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005c9c:	2309      	movs	r3, #9
 8005c9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	029b      	lsls	r3, r3, #10
 8005cb4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	00d8acbf 	.word	0x00d8acbf
 8005cd0:	00e4e1c0 	.word	0x00e4e1c0
 8005cd4:	00f42400 	.word	0x00f42400
 8005cd8:	01067380 	.word	0x01067380
 8005cdc:	011a499f 	.word	0x011a499f
 8005ce0:	01312cff 	.word	0x01312cff
 8005ce4:	014ca43f 	.word	0x014ca43f
 8005ce8:	016e3600 	.word	0x016e3600
 8005cec:	01a6ab1f 	.word	0x01a6ab1f
 8005cf0:	01e84800 	.word	0x01e84800

08005cf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f043 0201 	orr.w	r2, r3, #1
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f023 0201 	bic.w	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d115      	bne.n	8005d86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d66:	200a      	movs	r0, #10
 8005d68:	f7fb fb3a 	bl	80013e0 <HAL_Delay>
      ms += 10U;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	330a      	adds	r3, #10
 8005d70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f001 f93f 	bl	8006ff6 <USB_GetMode>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d01e      	beq.n	8005dbc <USB_SetCurrentMode+0x84>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d82:	d9f0      	bls.n	8005d66 <USB_SetCurrentMode+0x2e>
 8005d84:	e01a      	b.n	8005dbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d86:	78fb      	ldrb	r3, [r7, #3]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d115      	bne.n	8005db8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d98:	200a      	movs	r0, #10
 8005d9a:	f7fb fb21 	bl	80013e0 <HAL_Delay>
      ms += 10U;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	330a      	adds	r3, #10
 8005da2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 f926 	bl	8006ff6 <USB_GetMode>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <USB_SetCurrentMode+0x84>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2bc7      	cmp	r3, #199	@ 0xc7
 8005db4:	d9f0      	bls.n	8005d98 <USB_SetCurrentMode+0x60>
 8005db6:	e001      	b.n	8005dbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e005      	b.n	8005dc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2bc8      	cmp	r3, #200	@ 0xc8
 8005dc0:	d101      	bne.n	8005dc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b086      	sub	sp, #24
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005dea:	2300      	movs	r3, #0
 8005dec:	613b      	str	r3, [r7, #16]
 8005dee:	e009      	b.n	8005e04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	3340      	adds	r3, #64	@ 0x40
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	3301      	adds	r3, #1
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2b0e      	cmp	r3, #14
 8005e08:	d9f2      	bls.n	8005df0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d11c      	bne.n	8005e4c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e20:	f043 0302 	orr.w	r3, r3, #2
 8005e24:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e36:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e42:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e4a:	e00b      	b.n	8005e64 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e50:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e70:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d10d      	bne.n	8005e94 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d104      	bne.n	8005e8a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e80:	2100      	movs	r1, #0
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f968 	bl	8006158 <USB_SetDevSpeed>
 8005e88:	e008      	b.n	8005e9c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f963 	bl	8006158 <USB_SetDevSpeed>
 8005e92:	e003      	b.n	8005e9c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e94:	2103      	movs	r1, #3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f95e 	bl	8006158 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e9c:	2110      	movs	r1, #16
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f8fa 	bl	8006098 <USB_FlushTxFifo>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f924 	bl	80060fc <USB_FlushRxFifo>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005edc:	461a      	mov	r2, r3
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	e043      	b.n	8005f70 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005efe:	d118      	bne.n	8005f32 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f12:	461a      	mov	r2, r3
 8005f14:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	e013      	b.n	8005f44 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	e008      	b.n	8005f44 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2300      	movs	r3, #0
 8005f42:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f50:	461a      	mov	r2, r3
 8005f52:	2300      	movs	r3, #0
 8005f54:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f62:	461a      	mov	r2, r3
 8005f64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	613b      	str	r3, [r7, #16]
 8005f70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f74:	461a      	mov	r2, r3
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d3b5      	bcc.n	8005ee8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	e043      	b.n	800600a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f98:	d118      	bne.n	8005fcc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fac:	461a      	mov	r2, r3
 8005fae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	e013      	b.n	8005fde <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	e008      	b.n	8005fde <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd8:	461a      	mov	r2, r3
 8005fda:	2300      	movs	r3, #0
 8005fdc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fea:	461a      	mov	r2, r3
 8005fec:	2300      	movs	r3, #0
 8005fee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006002:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	3301      	adds	r3, #1
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800600e:	461a      	mov	r2, r3
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4293      	cmp	r3, r2
 8006014:	d3b5      	bcc.n	8005f82 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006028:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006036:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006038:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800603c:	2b00      	cmp	r3, #0
 800603e:	d105      	bne.n	800604c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f043 0210 	orr.w	r2, r3, #16
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699a      	ldr	r2, [r3, #24]
 8006050:	4b10      	ldr	r3, [pc, #64]	@ (8006094 <USB_DevInit+0x2c4>)
 8006052:	4313      	orrs	r3, r2
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006058:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f043 0208 	orr.w	r2, r3, #8
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800606c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006070:	2b01      	cmp	r3, #1
 8006072:	d107      	bne.n	8006084 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800607c:	f043 0304 	orr.w	r3, r3, #4
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006084:	7dfb      	ldrb	r3, [r7, #23]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006090:	b004      	add	sp, #16
 8006092:	4770      	bx	lr
 8006094:	803c3800 	.word	0x803c3800

08006098 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3301      	adds	r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060b2:	d901      	bls.n	80060b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e01b      	b.n	80060f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	daf2      	bge.n	80060a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	019b      	lsls	r3, r3, #6
 80060c8:	f043 0220 	orr.w	r2, r3, #32
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3301      	adds	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060dc:	d901      	bls.n	80060e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e006      	b.n	80060f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d0f0      	beq.n	80060d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3301      	adds	r3, #1
 800610c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006114:	d901      	bls.n	800611a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e018      	b.n	800614c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	daf2      	bge.n	8006108 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2210      	movs	r2, #16
 800612a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3301      	adds	r3, #1
 8006130:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006138:	d901      	bls.n	800613e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e006      	b.n	800614c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0310 	and.w	r3, r3, #16
 8006146:	2b10      	cmp	r3, #16
 8006148:	d0f0      	beq.n	800612c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	68f9      	ldr	r1, [r7, #12]
 8006174:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006178:	4313      	orrs	r3, r2
 800617a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800618a:	b480      	push	{r7}
 800618c:	b087      	sub	sp, #28
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 0306 	and.w	r3, r3, #6
 80061a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d102      	bne.n	80061b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80061aa:	2300      	movs	r3, #0
 80061ac:	75fb      	strb	r3, [r7, #23]
 80061ae:	e00a      	b.n	80061c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d002      	beq.n	80061bc <USB_GetDevSpeed+0x32>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b06      	cmp	r3, #6
 80061ba:	d102      	bne.n	80061c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80061bc:	2302      	movs	r3, #2
 80061be:	75fb      	strb	r3, [r7, #23]
 80061c0:	e001      	b.n	80061c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80061c2:	230f      	movs	r3, #15
 80061c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80061c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d13a      	bne.n	8006266 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	2101      	movs	r1, #1
 8006202:	fa01 f303 	lsl.w	r3, r1, r3
 8006206:	b29b      	uxth	r3, r3
 8006208:	68f9      	ldr	r1, [r7, #12]
 800620a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800620e:	4313      	orrs	r3, r2
 8006210:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d155      	bne.n	80062d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	791b      	ldrb	r3, [r3, #4]
 8006242:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006244:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	059b      	lsls	r3, r3, #22
 800624a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800624c:	4313      	orrs	r3, r2
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	0151      	lsls	r1, r2, #5
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	440a      	add	r2, r1
 8006256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800625a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800625e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	e036      	b.n	80062d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800626c:	69da      	ldr	r2, [r3, #28]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	f003 030f 	and.w	r3, r3, #15
 8006276:	2101      	movs	r1, #1
 8006278:	fa01 f303 	lsl.w	r3, r1, r3
 800627c:	041b      	lsls	r3, r3, #16
 800627e:	68f9      	ldr	r1, [r7, #12]
 8006280:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006284:	4313      	orrs	r3, r2
 8006286:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d11a      	bne.n	80062d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	791b      	ldrb	r3, [r3, #4]
 80062b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062ba:	430b      	orrs	r3, r1
 80062bc:	4313      	orrs	r3, r2
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	0151      	lsls	r1, r2, #5
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	440a      	add	r2, r1
 80062c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d161      	bne.n	80063c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006312:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006316:	d11f      	bne.n	8006358 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	0151      	lsls	r1, r2, #5
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	440a      	add	r2, r1
 800632e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006332:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006336:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	440a      	add	r2, r1
 800634e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006352:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006356:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800635e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	f003 030f 	and.w	r3, r3, #15
 8006368:	2101      	movs	r1, #1
 800636a:	fa01 f303 	lsl.w	r3, r1, r3
 800636e:	b29b      	uxth	r3, r3
 8006370:	43db      	mvns	r3, r3
 8006372:	68f9      	ldr	r1, [r7, #12]
 8006374:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006378:	4013      	ands	r3, r2
 800637a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	f003 030f 	and.w	r3, r3, #15
 800638c:	2101      	movs	r1, #1
 800638e:	fa01 f303 	lsl.w	r3, r1, r3
 8006392:	b29b      	uxth	r3, r3
 8006394:	43db      	mvns	r3, r3
 8006396:	68f9      	ldr	r1, [r7, #12]
 8006398:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800639c:	4013      	ands	r3, r2
 800639e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	0159      	lsls	r1, r3, #5
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	440b      	add	r3, r1
 80063b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ba:	4619      	mov	r1, r3
 80063bc:	4b35      	ldr	r3, [pc, #212]	@ (8006494 <USB_DeactivateEndpoint+0x1b0>)
 80063be:	4013      	ands	r3, r2
 80063c0:	600b      	str	r3, [r1, #0]
 80063c2:	e060      	b.n	8006486 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063da:	d11f      	bne.n	800641c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	0151      	lsls	r1, r2, #5
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	440a      	add	r2, r1
 80063f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	0151      	lsls	r1, r2, #5
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	440a      	add	r2, r1
 8006412:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006416:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800641a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006422:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	2101      	movs	r1, #1
 800642e:	fa01 f303 	lsl.w	r3, r1, r3
 8006432:	041b      	lsls	r3, r3, #16
 8006434:	43db      	mvns	r3, r3
 8006436:	68f9      	ldr	r1, [r7, #12]
 8006438:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800643c:	4013      	ands	r3, r2
 800643e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006446:	69da      	ldr	r2, [r3, #28]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	2101      	movs	r1, #1
 8006452:	fa01 f303 	lsl.w	r3, r1, r3
 8006456:	041b      	lsls	r3, r3, #16
 8006458:	43db      	mvns	r3, r3
 800645a:	68f9      	ldr	r1, [r7, #12]
 800645c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006460:	4013      	ands	r3, r2
 8006462:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	0159      	lsls	r1, r3, #5
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	440b      	add	r3, r1
 800647a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800647e:	4619      	mov	r1, r3
 8006480:	4b05      	ldr	r3, [pc, #20]	@ (8006498 <USB_DeactivateEndpoint+0x1b4>)
 8006482:	4013      	ands	r3, r2
 8006484:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	ec337800 	.word	0xec337800
 8006498:	eff37800 	.word	0xeff37800

0800649c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08a      	sub	sp, #40	@ 0x28
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	4613      	mov	r3, r2
 80064a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	785b      	ldrb	r3, [r3, #1]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	f040 817f 	bne.w	80067bc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d132      	bne.n	800652c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	0151      	lsls	r1, r2, #5
 80064d8:	69fa      	ldr	r2, [r7, #28]
 80064da:	440a      	add	r2, r1
 80064dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064e0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80064e4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80064e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006504:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006508:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	440a      	add	r2, r1
 8006520:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006524:	0cdb      	lsrs	r3, r3, #19
 8006526:	04db      	lsls	r3, r3, #19
 8006528:	6113      	str	r3, [r2, #16]
 800652a:	e097      	b.n	800665c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	69fa      	ldr	r2, [r7, #28]
 8006540:	440a      	add	r2, r1
 8006542:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006546:	0cdb      	lsrs	r3, r3, #19
 8006548:	04db      	lsls	r3, r3, #19
 800654a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	440a      	add	r2, r1
 8006562:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006566:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800656a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800656e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d11a      	bne.n	80065ac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	429a      	cmp	r2, r3
 8006580:	d903      	bls.n	800658a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	689a      	ldr	r2, [r3, #8]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	69fa      	ldr	r2, [r7, #28]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065a8:	6113      	str	r3, [r2, #16]
 80065aa:	e044      	b.n	8006636 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	4413      	add	r3, r2
 80065b6:	1e5a      	subs	r2, r3, #1
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	8afb      	ldrh	r3, [r7, #22]
 80065d2:	04d9      	lsls	r1, r3, #19
 80065d4:	4ba4      	ldr	r3, [pc, #656]	@ (8006868 <USB_EPStartXfer+0x3cc>)
 80065d6:	400b      	ands	r3, r1
 80065d8:	69b9      	ldr	r1, [r7, #24]
 80065da:	0148      	lsls	r0, r1, #5
 80065dc:	69f9      	ldr	r1, [r7, #28]
 80065de:	4401      	add	r1, r0
 80065e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80065e4:	4313      	orrs	r3, r2
 80065e6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	791b      	ldrb	r3, [r3, #4]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d122      	bne.n	8006636 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	440a      	add	r2, r1
 8006606:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800660a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800660e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661c:	691a      	ldr	r2, [r3, #16]
 800661e:	8afb      	ldrh	r3, [r7, #22]
 8006620:	075b      	lsls	r3, r3, #29
 8006622:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006626:	69b9      	ldr	r1, [r7, #24]
 8006628:	0148      	lsls	r0, r1, #5
 800662a:	69f9      	ldr	r1, [r7, #28]
 800662c:	4401      	add	r1, r0
 800662e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006632:	4313      	orrs	r3, r2
 8006634:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800664c:	69b9      	ldr	r1, [r7, #24]
 800664e:	0148      	lsls	r0, r1, #5
 8006650:	69f9      	ldr	r1, [r7, #28]
 8006652:	4401      	add	r1, r0
 8006654:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006658:	4313      	orrs	r3, r2
 800665a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800665c:	79fb      	ldrb	r3, [r7, #7]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d14b      	bne.n	80066fa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d009      	beq.n	800667e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006676:	461a      	mov	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	791b      	ldrb	r3, [r3, #4]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d128      	bne.n	80066d8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006692:	2b00      	cmp	r3, #0
 8006694:	d110      	bne.n	80066b8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	69fa      	ldr	r2, [r7, #28]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	e00f      	b.n	80066d8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066d6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	69fa      	ldr	r2, [r7, #28]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	e166      	b.n	80069c8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	0151      	lsls	r1, r2, #5
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	440a      	add	r2, r1
 8006710:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006714:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006718:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	791b      	ldrb	r3, [r3, #4]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d015      	beq.n	800674e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 814e 	beq.w	80069c8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	f003 030f 	and.w	r3, r3, #15
 800673c:	2101      	movs	r1, #1
 800673e:	fa01 f303 	lsl.w	r3, r1, r3
 8006742:	69f9      	ldr	r1, [r7, #28]
 8006744:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006748:	4313      	orrs	r3, r2
 800674a:	634b      	str	r3, [r1, #52]	@ 0x34
 800674c:	e13c      	b.n	80069c8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800675a:	2b00      	cmp	r3, #0
 800675c:	d110      	bne.n	8006780 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	0151      	lsls	r1, r2, #5
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	440a      	add	r2, r1
 8006774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006778:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	e00f      	b.n	80067a0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	440a      	add	r2, r1
 8006796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800679a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800679e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	68d9      	ldr	r1, [r3, #12]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	781a      	ldrb	r2, [r3, #0]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	b298      	uxth	r0, r3
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	4603      	mov	r3, r0
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f9b9 	bl	8006b2c <USB_WritePacket>
 80067ba:	e105      	b.n	80069c8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	0151      	lsls	r1, r2, #5
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	440a      	add	r2, r1
 80067d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067d6:	0cdb      	lsrs	r3, r3, #19
 80067d8:	04db      	lsls	r3, r3, #19
 80067da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	0151      	lsls	r1, r2, #5
 80067ee:	69fa      	ldr	r2, [r7, #28]
 80067f0:	440a      	add	r2, r1
 80067f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80067fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80067fe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d132      	bne.n	800686c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	689a      	ldr	r2, [r3, #8]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006834:	69b9      	ldr	r1, [r7, #24]
 8006836:	0148      	lsls	r0, r1, #5
 8006838:	69f9      	ldr	r1, [r7, #28]
 800683a:	4401      	add	r1, r0
 800683c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006840:	4313      	orrs	r3, r2
 8006842:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	0151      	lsls	r1, r2, #5
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	440a      	add	r2, r1
 800685a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800685e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006862:	6113      	str	r3, [r2, #16]
 8006864:	e062      	b.n	800692c <USB_EPStartXfer+0x490>
 8006866:	bf00      	nop
 8006868:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d123      	bne.n	80068bc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006880:	691a      	ldr	r2, [r3, #16]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800688a:	69b9      	ldr	r1, [r7, #24]
 800688c:	0148      	lsls	r0, r1, #5
 800688e:	69f9      	ldr	r1, [r7, #28]
 8006890:	4401      	add	r1, r0
 8006892:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006896:	4313      	orrs	r3, r2
 8006898:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068b8:	6113      	str	r3, [r2, #16]
 80068ba:	e037      	b.n	800692c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	691a      	ldr	r2, [r3, #16]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	4413      	add	r3, r2
 80068c6:	1e5a      	subs	r2, r3, #1
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	8afa      	ldrh	r2, [r7, #22]
 80068d8:	fb03 f202 	mul.w	r2, r3, r2
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ec:	691a      	ldr	r2, [r3, #16]
 80068ee:	8afb      	ldrh	r3, [r7, #22]
 80068f0:	04d9      	lsls	r1, r3, #19
 80068f2:	4b38      	ldr	r3, [pc, #224]	@ (80069d4 <USB_EPStartXfer+0x538>)
 80068f4:	400b      	ands	r3, r1
 80068f6:	69b9      	ldr	r1, [r7, #24]
 80068f8:	0148      	lsls	r0, r1, #5
 80068fa:	69f9      	ldr	r1, [r7, #28]
 80068fc:	4401      	add	r1, r0
 80068fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006902:	4313      	orrs	r3, r2
 8006904:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800691c:	69b9      	ldr	r1, [r7, #24]
 800691e:	0148      	lsls	r0, r1, #5
 8006920:	69f9      	ldr	r1, [r7, #28]
 8006922:	4401      	add	r1, r0
 8006924:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006928:	4313      	orrs	r3, r2
 800692a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800692c:	79fb      	ldrb	r3, [r7, #7]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d10d      	bne.n	800694e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d009      	beq.n	800694e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	68d9      	ldr	r1, [r3, #12]
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800694a:	460a      	mov	r2, r1
 800694c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	791b      	ldrb	r3, [r3, #4]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d128      	bne.n	80069a8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006962:	2b00      	cmp	r3, #0
 8006964:	d110      	bne.n	8006988 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	0151      	lsls	r1, r2, #5
 8006978:	69fa      	ldr	r2, [r7, #28]
 800697a:	440a      	add	r2, r1
 800697c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006980:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	e00f      	b.n	80069a8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	0151      	lsls	r1, r2, #5
 800699a:	69fa      	ldr	r2, [r7, #28]
 800699c:	440a      	add	r2, r1
 800699e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	0151      	lsls	r1, r2, #5
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	440a      	add	r2, r1
 80069be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3720      	adds	r7, #32
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	1ff80000 	.word	0x1ff80000

080069d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	785b      	ldrb	r3, [r3, #1]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d14a      	bne.n	8006a8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a0e:	f040 8086 	bne.w	8006b1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	7812      	ldrb	r2, [r2, #0]
 8006a26:	0151      	lsls	r1, r2, #5
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	440a      	add	r2, r1
 8006a2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	7812      	ldrb	r2, [r2, #0]
 8006a4a:	0151      	lsls	r1, r2, #5
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	440a      	add	r2, r1
 8006a50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d902      	bls.n	8006a70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a6e:	e056      	b.n	8006b1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a88:	d0e7      	beq.n	8006a5a <USB_EPStopXfer+0x82>
 8006a8a:	e048      	b.n	8006b1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006aa4:	d13b      	bne.n	8006b1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	7812      	ldrb	r2, [r2, #0]
 8006aba:	0151      	lsls	r1, r2, #5
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	440a      	add	r2, r1
 8006ac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ac4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ac8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	7812      	ldrb	r2, [r2, #0]
 8006ade:	0151      	lsls	r1, r2, #5
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	440a      	add	r2, r1
 8006ae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ae8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006aec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3301      	adds	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d902      	bls.n	8006b04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	75fb      	strb	r3, [r7, #23]
          break;
 8006b02:	e00c      	b.n	8006b1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b1c:	d0e7      	beq.n	8006aee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	371c      	adds	r7, #28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b089      	sub	sp, #36	@ 0x24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	4611      	mov	r1, r2
 8006b38:	461a      	mov	r2, r3
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	71fb      	strb	r3, [r7, #7]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006b4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d123      	bne.n	8006b9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b52:	88bb      	ldrh	r3, [r7, #4]
 8006b54:	3303      	adds	r3, #3
 8006b56:	089b      	lsrs	r3, r3, #2
 8006b58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61bb      	str	r3, [r7, #24]
 8006b5e:	e018      	b.n	8006b92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	031a      	lsls	r2, r3, #12
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	3301      	adds	r3, #1
 8006b78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	3301      	adds	r3, #1
 8006b84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d3e2      	bcc.n	8006b60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3724      	adds	r7, #36	@ 0x24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b08b      	sub	sp, #44	@ 0x2c
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	089b      	lsrs	r3, r3, #2
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	f003 0303 	and.w	r3, r3, #3
 8006bcc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006bce:	2300      	movs	r3, #0
 8006bd0:	623b      	str	r3, [r7, #32]
 8006bd2:	e014      	b.n	8006bfe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	601a      	str	r2, [r3, #0]
    pDest++;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	3301      	adds	r3, #1
 8006be4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	3301      	adds	r3, #1
 8006bea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bee:	3301      	adds	r3, #1
 8006bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	623b      	str	r3, [r7, #32]
 8006bfe:	6a3a      	ldr	r2, [r7, #32]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d3e6      	bcc.n	8006bd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c06:	8bfb      	ldrh	r3, [r7, #30]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01e      	beq.n	8006c4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c16:	461a      	mov	r2, r3
 8006c18:	f107 0310 	add.w	r3, r7, #16
 8006c1c:	6812      	ldr	r2, [r2, #0]
 8006c1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	701a      	strb	r2, [r3, #0]
      i++;
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	3301      	adds	r3, #1
 8006c36:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006c3e:	8bfb      	ldrh	r3, [r7, #30]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c44:	8bfb      	ldrh	r3, [r7, #30]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1ea      	bne.n	8006c20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	372c      	adds	r7, #44	@ 0x2c
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d12c      	bne.n	8006cce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	db12      	blt.n	8006cac <USB_EPSetStall+0x54>
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00f      	beq.n	8006cac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ca6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006caa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	0151      	lsls	r1, r2, #5
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	e02b      	b.n	8006d26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	db12      	blt.n	8006d06 <USB_EPSetStall+0xae>
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00f      	beq.n	8006d06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	0151      	lsls	r1, r2, #5
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	785b      	ldrb	r3, [r3, #1]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d128      	bne.n	8006da2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	791b      	ldrb	r3, [r3, #4]
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d003      	beq.n	8006d80 <USB_EPClearStall+0x4c>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	791b      	ldrb	r3, [r3, #4]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d138      	bne.n	8006df2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	0151      	lsls	r1, r2, #5
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	440a      	add	r2, r1
 8006d96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	e027      	b.n	8006df2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dbc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006dc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	791b      	ldrb	r3, [r3, #4]
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d003      	beq.n	8006dd2 <USB_EPClearStall+0x9e>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	791b      	ldrb	r3, [r3, #4]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d10f      	bne.n	8006df2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	0151      	lsls	r1, r2, #5
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	440a      	add	r2, r1
 8006de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006df0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006e22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	78fb      	ldrb	r3, [r7, #3]
 8006e2e:	011b      	lsls	r3, r3, #4
 8006e30:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006e34:	68f9      	ldr	r1, [r7, #12]
 8006e36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e7a:	f023 0302 	bic.w	r3, r3, #2
 8006e7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ea8:	f023 0303 	bic.w	r3, r3, #3
 8006eac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ebc:	f043 0302 	orr.w	r3, r3, #2
 8006ec0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	4013      	ands	r3, r2
 8006f18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	0c1b      	lsrs	r3, r3, #16
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	b29b      	uxth	r3, r3
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b085      	sub	sp, #20
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	460b      	mov	r3, r1
 8006f68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f6e:	78fb      	ldrb	r3, [r7, #3]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	4013      	ands	r3, r2
 8006f8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b087      	sub	sp, #28
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006fbe:	78fb      	ldrb	r3, [r7, #3]
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fca:	01db      	lsls	r3, r3, #7
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006fd4:	78fb      	ldrb	r3, [r7, #3]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	371c      	adds	r7, #28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	f003 0301 	and.w	r3, r3, #1
}
 8007006:	4618      	mov	r0, r3
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800702c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007030:	f023 0307 	bic.w	r3, r3, #7
 8007034:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007048:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	460b      	mov	r3, r1
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	333c      	adds	r3, #60	@ 0x3c
 800706e:	3304      	adds	r3, #4
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	4a26      	ldr	r2, [pc, #152]	@ (8007110 <USB_EP0_OutStart+0xb8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d90a      	bls.n	8007092 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007088:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800708c:	d101      	bne.n	8007092 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	e037      	b.n	8007102 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007098:	461a      	mov	r2, r3
 800709a:	2300      	movs	r3, #0
 800709c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070c0:	f043 0318 	orr.w	r3, r3, #24
 80070c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070d4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80070d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80070da:	7afb      	ldrb	r3, [r7, #11]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d10f      	bne.n	8007100 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e6:	461a      	mov	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070fa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80070fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	4f54300a 	.word	0x4f54300a

08007114 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3301      	adds	r3, #1
 8007124:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800712c:	d901      	bls.n	8007132 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e01b      	b.n	800716a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	daf2      	bge.n	8007120 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f043 0201 	orr.w	r2, r3, #1
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3301      	adds	r3, #1
 800714e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007156:	d901      	bls.n	800715c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e006      	b.n	800716a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b01      	cmp	r3, #1
 8007166:	d0f0      	beq.n	800714a <USB_CoreReset+0x36>

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007184:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007188:	f002 fc2e 	bl	80099e8 <USBD_static_malloc>
 800718c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d109      	bne.n	80071a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	32b0      	adds	r2, #176	@ 0xb0
 800719e:	2100      	movs	r1, #0
 80071a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80071a4:	2302      	movs	r3, #2
 80071a6:	e0d4      	b.n	8007352 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80071a8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80071ac:	2100      	movs	r1, #0
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f002 fc5e 	bl	8009a70 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	32b0      	adds	r2, #176	@ 0xb0
 80071be:	68f9      	ldr	r1, [r7, #12]
 80071c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	32b0      	adds	r2, #176	@ 0xb0
 80071ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7c1b      	ldrb	r3, [r3, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d138      	bne.n	8007252 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80071e0:	4b5e      	ldr	r3, [pc, #376]	@ (800735c <USBD_CDC_Init+0x1e4>)
 80071e2:	7819      	ldrb	r1, [r3, #0]
 80071e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071e8:	2202      	movs	r2, #2
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f002 fad9 	bl	80097a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80071f0:	4b5a      	ldr	r3, [pc, #360]	@ (800735c <USBD_CDC_Init+0x1e4>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	f003 020f 	and.w	r2, r3, #15
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	3324      	adds	r3, #36	@ 0x24
 8007206:	2201      	movs	r2, #1
 8007208:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800720a:	4b55      	ldr	r3, [pc, #340]	@ (8007360 <USBD_CDC_Init+0x1e8>)
 800720c:	7819      	ldrb	r1, [r3, #0]
 800720e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007212:	2202      	movs	r2, #2
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f002 fac4 	bl	80097a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800721a:	4b51      	ldr	r3, [pc, #324]	@ (8007360 <USBD_CDC_Init+0x1e8>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	f003 020f 	and.w	r2, r3, #15
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	4613      	mov	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007232:	2201      	movs	r2, #1
 8007234:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007236:	4b4b      	ldr	r3, [pc, #300]	@ (8007364 <USBD_CDC_Init+0x1ec>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	f003 020f 	and.w	r2, r3, #15
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	440b      	add	r3, r1
 800724a:	3326      	adds	r3, #38	@ 0x26
 800724c:	2210      	movs	r2, #16
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	e035      	b.n	80072be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007252:	4b42      	ldr	r3, [pc, #264]	@ (800735c <USBD_CDC_Init+0x1e4>)
 8007254:	7819      	ldrb	r1, [r3, #0]
 8007256:	2340      	movs	r3, #64	@ 0x40
 8007258:	2202      	movs	r2, #2
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f002 faa1 	bl	80097a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007260:	4b3e      	ldr	r3, [pc, #248]	@ (800735c <USBD_CDC_Init+0x1e4>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	f003 020f 	and.w	r2, r3, #15
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	4613      	mov	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	440b      	add	r3, r1
 8007274:	3324      	adds	r3, #36	@ 0x24
 8007276:	2201      	movs	r2, #1
 8007278:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800727a:	4b39      	ldr	r3, [pc, #228]	@ (8007360 <USBD_CDC_Init+0x1e8>)
 800727c:	7819      	ldrb	r1, [r3, #0]
 800727e:	2340      	movs	r3, #64	@ 0x40
 8007280:	2202      	movs	r2, #2
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f002 fa8d 	bl	80097a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007288:	4b35      	ldr	r3, [pc, #212]	@ (8007360 <USBD_CDC_Init+0x1e8>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	f003 020f 	and.w	r2, r3, #15
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	440b      	add	r3, r1
 800729c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80072a0:	2201      	movs	r2, #1
 80072a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80072a4:	4b2f      	ldr	r3, [pc, #188]	@ (8007364 <USBD_CDC_Init+0x1ec>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	f003 020f 	and.w	r2, r3, #15
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	440b      	add	r3, r1
 80072b8:	3326      	adds	r3, #38	@ 0x26
 80072ba:	2210      	movs	r2, #16
 80072bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80072be:	4b29      	ldr	r3, [pc, #164]	@ (8007364 <USBD_CDC_Init+0x1ec>)
 80072c0:	7819      	ldrb	r1, [r3, #0]
 80072c2:	2308      	movs	r3, #8
 80072c4:	2203      	movs	r2, #3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f002 fa6b 	bl	80097a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80072cc:	4b25      	ldr	r3, [pc, #148]	@ (8007364 <USBD_CDC_Init+0x1ec>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	f003 020f 	and.w	r2, r3, #15
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	4613      	mov	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	440b      	add	r3, r1
 80072e0:	3324      	adds	r3, #36	@ 0x24
 80072e2:	2201      	movs	r2, #1
 80072e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	33b0      	adds	r3, #176	@ 0xb0
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800731c:	2302      	movs	r3, #2
 800731e:	e018      	b.n	8007352 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	7c1b      	ldrb	r3, [r3, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007328:	4b0d      	ldr	r3, [pc, #52]	@ (8007360 <USBD_CDC_Init+0x1e8>)
 800732a:	7819      	ldrb	r1, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007332:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f002 fb22 	bl	8009980 <USBD_LL_PrepareReceive>
 800733c:	e008      	b.n	8007350 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800733e:	4b08      	ldr	r3, [pc, #32]	@ (8007360 <USBD_CDC_Init+0x1e8>)
 8007340:	7819      	ldrb	r1, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007348:	2340      	movs	r3, #64	@ 0x40
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f002 fb18 	bl	8009980 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	20000097 	.word	0x20000097
 8007360:	20000098 	.word	0x20000098
 8007364:	20000099 	.word	0x20000099

08007368 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007374:	4b3a      	ldr	r3, [pc, #232]	@ (8007460 <USBD_CDC_DeInit+0xf8>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f002 fa37 	bl	80097ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007380:	4b37      	ldr	r3, [pc, #220]	@ (8007460 <USBD_CDC_DeInit+0xf8>)
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	f003 020f 	and.w	r2, r3, #15
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	440b      	add	r3, r1
 8007394:	3324      	adds	r3, #36	@ 0x24
 8007396:	2200      	movs	r2, #0
 8007398:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800739a:	4b32      	ldr	r3, [pc, #200]	@ (8007464 <USBD_CDC_DeInit+0xfc>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f002 fa24 	bl	80097ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80073a6:	4b2f      	ldr	r3, [pc, #188]	@ (8007464 <USBD_CDC_DeInit+0xfc>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f003 020f 	and.w	r2, r3, #15
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	440b      	add	r3, r1
 80073ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80073be:	2200      	movs	r2, #0
 80073c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80073c2:	4b29      	ldr	r3, [pc, #164]	@ (8007468 <USBD_CDC_DeInit+0x100>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f002 fa10 	bl	80097ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80073ce:	4b26      	ldr	r3, [pc, #152]	@ (8007468 <USBD_CDC_DeInit+0x100>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	f003 020f 	and.w	r2, r3, #15
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	4613      	mov	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	440b      	add	r3, r1
 80073e2:	3324      	adds	r3, #36	@ 0x24
 80073e4:	2200      	movs	r2, #0
 80073e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80073e8:	4b1f      	ldr	r3, [pc, #124]	@ (8007468 <USBD_CDC_DeInit+0x100>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	f003 020f 	and.w	r2, r3, #15
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	440b      	add	r3, r1
 80073fc:	3326      	adds	r3, #38	@ 0x26
 80073fe:	2200      	movs	r2, #0
 8007400:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	32b0      	adds	r2, #176	@ 0xb0
 800740c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01f      	beq.n	8007454 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	33b0      	adds	r3, #176	@ 0xb0
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	32b0      	adds	r2, #176	@ 0xb0
 8007432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007436:	4618      	mov	r0, r3
 8007438:	f002 fae4 	bl	8009a04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	32b0      	adds	r2, #176	@ 0xb0
 8007446:	2100      	movs	r1, #0
 8007448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	20000097 	.word	0x20000097
 8007464:	20000098 	.word	0x20000098
 8007468:	20000099 	.word	0x20000099

0800746c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	32b0      	adds	r2, #176	@ 0xb0
 8007480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007484:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007486:	2300      	movs	r3, #0
 8007488:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007498:	2303      	movs	r3, #3
 800749a:	e0bf      	b.n	800761c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d050      	beq.n	800754a <USBD_CDC_Setup+0xde>
 80074a8:	2b20      	cmp	r3, #32
 80074aa:	f040 80af 	bne.w	800760c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	88db      	ldrh	r3, [r3, #6]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d03a      	beq.n	800752c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	b25b      	sxtb	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	da1b      	bge.n	80074f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	33b0      	adds	r3, #176	@ 0xb0
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80074d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	88d2      	ldrh	r2, [r2, #6]
 80074dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	88db      	ldrh	r3, [r3, #6]
 80074e2:	2b07      	cmp	r3, #7
 80074e4:	bf28      	it	cs
 80074e6:	2307      	movcs	r3, #7
 80074e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	89fa      	ldrh	r2, [r7, #14]
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 fd53 	bl	8008f9c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80074f6:	e090      	b.n	800761a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	785a      	ldrb	r2, [r3, #1]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	88db      	ldrh	r3, [r3, #6]
 8007506:	2b3f      	cmp	r3, #63	@ 0x3f
 8007508:	d803      	bhi.n	8007512 <USBD_CDC_Setup+0xa6>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	88db      	ldrh	r3, [r3, #6]
 800750e:	b2da      	uxtb	r2, r3
 8007510:	e000      	b.n	8007514 <USBD_CDC_Setup+0xa8>
 8007512:	2240      	movs	r2, #64	@ 0x40
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800751a:	6939      	ldr	r1, [r7, #16]
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007522:	461a      	mov	r2, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 fd65 	bl	8008ff4 <USBD_CtlPrepareRx>
      break;
 800752a:	e076      	b.n	800761a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	33b0      	adds	r3, #176	@ 0xb0
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	7850      	ldrb	r0, [r2, #1]
 8007542:	2200      	movs	r2, #0
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	4798      	blx	r3
      break;
 8007548:	e067      	b.n	800761a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	785b      	ldrb	r3, [r3, #1]
 800754e:	2b0b      	cmp	r3, #11
 8007550:	d851      	bhi.n	80075f6 <USBD_CDC_Setup+0x18a>
 8007552:	a201      	add	r2, pc, #4	@ (adr r2, 8007558 <USBD_CDC_Setup+0xec>)
 8007554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007558:	08007589 	.word	0x08007589
 800755c:	08007605 	.word	0x08007605
 8007560:	080075f7 	.word	0x080075f7
 8007564:	080075f7 	.word	0x080075f7
 8007568:	080075f7 	.word	0x080075f7
 800756c:	080075f7 	.word	0x080075f7
 8007570:	080075f7 	.word	0x080075f7
 8007574:	080075f7 	.word	0x080075f7
 8007578:	080075f7 	.word	0x080075f7
 800757c:	080075f7 	.word	0x080075f7
 8007580:	080075b3 	.word	0x080075b3
 8007584:	080075dd 	.word	0x080075dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b03      	cmp	r3, #3
 8007592:	d107      	bne.n	80075a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007594:	f107 030a 	add.w	r3, r7, #10
 8007598:	2202      	movs	r2, #2
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fcfd 	bl	8008f9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075a2:	e032      	b.n	800760a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 fc7b 	bl	8008ea2 <USBD_CtlError>
            ret = USBD_FAIL;
 80075ac:	2303      	movs	r3, #3
 80075ae:	75fb      	strb	r3, [r7, #23]
          break;
 80075b0:	e02b      	b.n	800760a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d107      	bne.n	80075ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80075be:	f107 030d 	add.w	r3, r7, #13
 80075c2:	2201      	movs	r2, #1
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 fce8 	bl	8008f9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075cc:	e01d      	b.n	800760a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 fc66 	bl	8008ea2 <USBD_CtlError>
            ret = USBD_FAIL;
 80075d6:	2303      	movs	r3, #3
 80075d8:	75fb      	strb	r3, [r7, #23]
          break;
 80075da:	e016      	b.n	800760a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d00f      	beq.n	8007608 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 fc59 	bl	8008ea2 <USBD_CtlError>
            ret = USBD_FAIL;
 80075f0:	2303      	movs	r3, #3
 80075f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80075f4:	e008      	b.n	8007608 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 fc52 	bl	8008ea2 <USBD_CtlError>
          ret = USBD_FAIL;
 80075fe:	2303      	movs	r3, #3
 8007600:	75fb      	strb	r3, [r7, #23]
          break;
 8007602:	e002      	b.n	800760a <USBD_CDC_Setup+0x19e>
          break;
 8007604:	bf00      	nop
 8007606:	e008      	b.n	800761a <USBD_CDC_Setup+0x1ae>
          break;
 8007608:	bf00      	nop
      }
      break;
 800760a:	e006      	b.n	800761a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 fc47 	bl	8008ea2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007614:	2303      	movs	r3, #3
 8007616:	75fb      	strb	r3, [r7, #23]
      break;
 8007618:	bf00      	nop
  }

  return (uint8_t)ret;
 800761a:	7dfb      	ldrb	r3, [r7, #23]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007636:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	32b0      	adds	r2, #176	@ 0xb0
 8007642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800764a:	2303      	movs	r3, #3
 800764c:	e065      	b.n	800771a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	32b0      	adds	r2, #176	@ 0xb0
 8007658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800765e:	78fb      	ldrb	r3, [r7, #3]
 8007660:	f003 020f 	and.w	r2, r3, #15
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	4613      	mov	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	440b      	add	r3, r1
 8007670:	3318      	adds	r3, #24
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d02f      	beq.n	80076d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	f003 020f 	and.w	r2, r3, #15
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	440b      	add	r3, r1
 800768a:	3318      	adds	r3, #24
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	78fb      	ldrb	r3, [r7, #3]
 8007690:	f003 010f 	and.w	r1, r3, #15
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	460b      	mov	r3, r1
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	440b      	add	r3, r1
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4403      	add	r3, r0
 80076a0:	331c      	adds	r3, #28
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80076a8:	fb01 f303 	mul.w	r3, r1, r3
 80076ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d112      	bne.n	80076d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80076b2:	78fb      	ldrb	r3, [r7, #3]
 80076b4:	f003 020f 	and.w	r2, r3, #15
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	440b      	add	r3, r1
 80076c4:	3318      	adds	r3, #24
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80076ca:	78f9      	ldrb	r1, [r7, #3]
 80076cc:	2300      	movs	r3, #0
 80076ce:	2200      	movs	r2, #0
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f002 f934 	bl	800993e <USBD_LL_Transmit>
 80076d6:	e01f      	b.n	8007718 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	33b0      	adds	r3, #176	@ 0xb0
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d010      	beq.n	8007718 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	33b0      	adds	r3, #176	@ 0xb0
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007714:	78fa      	ldrb	r2, [r7, #3]
 8007716:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	460b      	mov	r3, r1
 800772c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	32b0      	adds	r2, #176	@ 0xb0
 8007738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	32b0      	adds	r2, #176	@ 0xb0
 8007748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007750:	2303      	movs	r3, #3
 8007752:	e01a      	b.n	800778a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007754:	78fb      	ldrb	r3, [r7, #3]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f002 f932 	bl	80099c2 <USBD_LL_GetRxDataSize>
 800775e:	4602      	mov	r2, r0
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	33b0      	adds	r3, #176	@ 0xb0
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007784:	4611      	mov	r1, r2
 8007786:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	32b0      	adds	r2, #176	@ 0xb0
 80077a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e024      	b.n	80077fe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	33b0      	adds	r3, #176	@ 0xb0
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d019      	beq.n	80077fc <USBD_CDC_EP0_RxReady+0x6a>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80077ce:	2bff      	cmp	r3, #255	@ 0xff
 80077d0:	d014      	beq.n	80077fc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	33b0      	adds	r3, #176	@ 0xb0
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80077ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80077f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	22ff      	movs	r2, #255	@ 0xff
 80077f8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007810:	2182      	movs	r1, #130	@ 0x82
 8007812:	4818      	ldr	r0, [pc, #96]	@ (8007874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007814:	f000 fd0f 	bl	8008236 <USBD_GetEpDesc>
 8007818:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800781a:	2101      	movs	r1, #1
 800781c:	4815      	ldr	r0, [pc, #84]	@ (8007874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800781e:	f000 fd0a 	bl	8008236 <USBD_GetEpDesc>
 8007822:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007824:	2181      	movs	r1, #129	@ 0x81
 8007826:	4813      	ldr	r0, [pc, #76]	@ (8007874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007828:	f000 fd05 	bl	8008236 <USBD_GetEpDesc>
 800782c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2210      	movs	r2, #16
 8007838:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d006      	beq.n	800784e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	2200      	movs	r2, #0
 8007844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007848:	711a      	strb	r2, [r3, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d006      	beq.n	8007862 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800785c:	711a      	strb	r2, [r3, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2243      	movs	r2, #67	@ 0x43
 8007866:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007868:	4b02      	ldr	r3, [pc, #8]	@ (8007874 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800786a:	4618      	mov	r0, r3
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	20000054 	.word	0x20000054

08007878 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007880:	2182      	movs	r1, #130	@ 0x82
 8007882:	4818      	ldr	r0, [pc, #96]	@ (80078e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007884:	f000 fcd7 	bl	8008236 <USBD_GetEpDesc>
 8007888:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800788a:	2101      	movs	r1, #1
 800788c:	4815      	ldr	r0, [pc, #84]	@ (80078e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800788e:	f000 fcd2 	bl	8008236 <USBD_GetEpDesc>
 8007892:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007894:	2181      	movs	r1, #129	@ 0x81
 8007896:	4813      	ldr	r0, [pc, #76]	@ (80078e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007898:	f000 fccd 	bl	8008236 <USBD_GetEpDesc>
 800789c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	2210      	movs	r2, #16
 80078a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d006      	beq.n	80078be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	2200      	movs	r2, #0
 80078b4:	711a      	strb	r2, [r3, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f042 0202 	orr.w	r2, r2, #2
 80078bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d006      	beq.n	80078d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	711a      	strb	r2, [r3, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f042 0202 	orr.w	r2, r2, #2
 80078d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2243      	movs	r2, #67	@ 0x43
 80078d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078d8:	4b02      	ldr	r3, [pc, #8]	@ (80078e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3718      	adds	r7, #24
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20000054 	.word	0x20000054

080078e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078f0:	2182      	movs	r1, #130	@ 0x82
 80078f2:	4818      	ldr	r0, [pc, #96]	@ (8007954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078f4:	f000 fc9f 	bl	8008236 <USBD_GetEpDesc>
 80078f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078fa:	2101      	movs	r1, #1
 80078fc:	4815      	ldr	r0, [pc, #84]	@ (8007954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078fe:	f000 fc9a 	bl	8008236 <USBD_GetEpDesc>
 8007902:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007904:	2181      	movs	r1, #129	@ 0x81
 8007906:	4813      	ldr	r0, [pc, #76]	@ (8007954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007908:	f000 fc95 	bl	8008236 <USBD_GetEpDesc>
 800790c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2210      	movs	r2, #16
 8007918:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d006      	beq.n	800792e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	2200      	movs	r2, #0
 8007924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007928:	711a      	strb	r2, [r3, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d006      	beq.n	8007942 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800793c:	711a      	strb	r2, [r3, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2243      	movs	r2, #67	@ 0x43
 8007946:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007948:	4b02      	ldr	r3, [pc, #8]	@ (8007954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20000054 	.word	0x20000054

08007958 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	220a      	movs	r2, #10
 8007964:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007966:	4b03      	ldr	r3, [pc, #12]	@ (8007974 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007968:	4618      	mov	r0, r3
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	20000010 	.word	0x20000010

08007978 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007988:	2303      	movs	r3, #3
 800798a:	e009      	b.n	80079a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	33b0      	adds	r3, #176	@ 0xb0
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	32b0      	adds	r2, #176	@ 0xb0
 80079c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e008      	b.n	80079e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	371c      	adds	r7, #28
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	32b0      	adds	r2, #176	@ 0xb0
 8007a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e004      	b.n	8007a1e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
	...

08007a2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	32b0      	adds	r2, #176	@ 0xb0
 8007a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a42:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	32b0      	adds	r2, #176	@ 0xb0
 8007a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e018      	b.n	8007a8c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	7c1b      	ldrb	r3, [r3, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10a      	bne.n	8007a78 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a62:	4b0c      	ldr	r3, [pc, #48]	@ (8007a94 <USBD_CDC_ReceivePacket+0x68>)
 8007a64:	7819      	ldrb	r1, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 ff85 	bl	8009980 <USBD_LL_PrepareReceive>
 8007a76:	e008      	b.n	8007a8a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a78:	4b06      	ldr	r3, [pc, #24]	@ (8007a94 <USBD_CDC_ReceivePacket+0x68>)
 8007a7a:	7819      	ldrb	r1, [r3, #0]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a82:	2340      	movs	r3, #64	@ 0x40
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 ff7b 	bl	8009980 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20000098 	.word	0x20000098

08007a98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e01f      	b.n	8007af0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	79fa      	ldrb	r2, [r7, #7]
 8007ae2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f001 fdf5 	bl	80096d4 <USBD_LL_Init>
 8007aea:	4603      	mov	r3, r0
 8007aec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e025      	b.n	8007b5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	32ae      	adds	r2, #174	@ 0xae
 8007b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00f      	beq.n	8007b4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	32ae      	adds	r2, #174	@ 0xae
 8007b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3c:	f107 020e 	add.w	r2, r7, #14
 8007b40:	4610      	mov	r0, r2
 8007b42:	4798      	blx	r3
 8007b44:	4602      	mov	r2, r0
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007b52:	1c5a      	adds	r2, r3, #1
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 fdfd 	bl	800976c <USBD_LL_Start>
 8007b72:	4603      	mov	r3, r0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b084      	sub	sp, #16
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d009      	beq.n	8007bc0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	78fa      	ldrb	r2, [r7, #3]
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	78fa      	ldrb	r2, [r7, #3]
 8007be4:	4611      	mov	r1, r2
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	4798      	blx	r3
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f001 f90c 	bl	8008e2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007c24:	461a      	mov	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c32:	f003 031f 	and.w	r3, r3, #31
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d01a      	beq.n	8007c70 <USBD_LL_SetupStage+0x72>
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d822      	bhi.n	8007c84 <USBD_LL_SetupStage+0x86>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <USBD_LL_SetupStage+0x4a>
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d00a      	beq.n	8007c5c <USBD_LL_SetupStage+0x5e>
 8007c46:	e01d      	b.n	8007c84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fb63 	bl	800831c <USBD_StdDevReq>
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]
      break;
 8007c5a:	e020      	b.n	8007c9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fbcb 	bl	8008400 <USBD_StdItfReq>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c6e:	e016      	b.n	8007c9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fc2d 	bl	80084d8 <USBD_StdEPReq>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73fb      	strb	r3, [r7, #15]
      break;
 8007c82:	e00c      	b.n	8007c9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	4619      	mov	r1, r3
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f001 fdca 	bl	800982c <USBD_LL_StallEP>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c9c:	bf00      	nop
  }

  return ret;
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007cba:	7afb      	ldrb	r3, [r7, #11]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d16e      	bne.n	8007d9e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007cc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	f040 8098 	bne.w	8007e04 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d913      	bls.n	8007d08 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	689a      	ldr	r2, [r3, #8]
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	1ad2      	subs	r2, r2, r3
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	bf28      	it	cs
 8007cfa:	4613      	movcs	r3, r2
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f001 f994 	bl	800902e <USBD_CtlContinueRx>
 8007d06:	e07d      	b.n	8007e04 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d0e:	f003 031f 	and.w	r3, r3, #31
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d014      	beq.n	8007d40 <USBD_LL_DataOutStage+0x98>
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d81d      	bhi.n	8007d56 <USBD_LL_DataOutStage+0xae>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <USBD_LL_DataOutStage+0x7c>
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d003      	beq.n	8007d2a <USBD_LL_DataOutStage+0x82>
 8007d22:	e018      	b.n	8007d56 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	75bb      	strb	r3, [r7, #22]
            break;
 8007d28:	e018      	b.n	8007d5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	4619      	mov	r1, r3
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 fa64 	bl	8008202 <USBD_CoreFindIF>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	75bb      	strb	r3, [r7, #22]
            break;
 8007d3e:	e00d      	b.n	8007d5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	4619      	mov	r1, r3
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 fa66 	bl	800821c <USBD_CoreFindEP>
 8007d50:	4603      	mov	r3, r0
 8007d52:	75bb      	strb	r3, [r7, #22]
            break;
 8007d54:	e002      	b.n	8007d5c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75bb      	strb	r3, [r7, #22]
            break;
 8007d5a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d5c:	7dbb      	ldrb	r3, [r7, #22]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d119      	bne.n	8007d96 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d113      	bne.n	8007d96 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d6e:	7dba      	ldrb	r2, [r7, #22]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	32ae      	adds	r2, #174	@ 0xae
 8007d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00b      	beq.n	8007d96 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007d7e:	7dba      	ldrb	r2, [r7, #22]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007d86:	7dba      	ldrb	r2, [r7, #22]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	32ae      	adds	r2, #174	@ 0xae
 8007d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f001 f95a 	bl	8009050 <USBD_CtlSendStatus>
 8007d9c:	e032      	b.n	8007e04 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007d9e:	7afb      	ldrb	r3, [r7, #11]
 8007da0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	4619      	mov	r1, r3
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 fa37 	bl	800821c <USBD_CoreFindEP>
 8007dae:	4603      	mov	r3, r0
 8007db0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007db2:	7dbb      	ldrb	r3, [r7, #22]
 8007db4:	2bff      	cmp	r3, #255	@ 0xff
 8007db6:	d025      	beq.n	8007e04 <USBD_LL_DataOutStage+0x15c>
 8007db8:	7dbb      	ldrb	r3, [r7, #22]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d122      	bne.n	8007e04 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d117      	bne.n	8007dfa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007dca:	7dba      	ldrb	r2, [r7, #22]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	32ae      	adds	r2, #174	@ 0xae
 8007dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00f      	beq.n	8007dfa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007dda:	7dba      	ldrb	r2, [r7, #22]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007de2:	7dba      	ldrb	r2, [r7, #22]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	32ae      	adds	r2, #174	@ 0xae
 8007de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	7afa      	ldrb	r2, [r7, #11]
 8007df0:	4611      	mov	r1, r2
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	4798      	blx	r3
 8007df6:	4603      	mov	r3, r0
 8007df8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
 8007e02:	e000      	b.n	8007e06 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b086      	sub	sp, #24
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	460b      	mov	r3, r1
 8007e18:	607a      	str	r2, [r7, #4]
 8007e1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d16f      	bne.n	8007f02 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	3314      	adds	r3, #20
 8007e26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d15a      	bne.n	8007ee8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d914      	bls.n	8007e68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	689a      	ldr	r2, [r3, #8]
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	1ad2      	subs	r2, r2, r3
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	461a      	mov	r2, r3
 8007e52:	6879      	ldr	r1, [r7, #4]
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f001 f8bc 	bl	8008fd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	2100      	movs	r1, #0
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f001 fd8d 	bl	8009980 <USBD_LL_PrepareReceive>
 8007e66:	e03f      	b.n	8007ee8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d11c      	bne.n	8007eae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d316      	bcc.n	8007eae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d20f      	bcs.n	8007eae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2100      	movs	r1, #0
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f001 f89d 	bl	8008fd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f001 fd6a 	bl	8009980 <USBD_LL_PrepareReceive>
 8007eac:	e01c      	b.n	8007ee8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d10f      	bne.n	8007eda <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d009      	beq.n	8007eda <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eda:	2180      	movs	r1, #128	@ 0x80
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f001 fca5 	bl	800982c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f001 f8c7 	bl	8009076 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d03a      	beq.n	8007f68 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f7ff fe42 	bl	8007b7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007f00:	e032      	b.n	8007f68 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f02:	7afb      	ldrb	r3, [r7, #11]
 8007f04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f985 	bl	800821c <USBD_CoreFindEP>
 8007f12:	4603      	mov	r3, r0
 8007f14:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
 8007f18:	2bff      	cmp	r3, #255	@ 0xff
 8007f1a:	d025      	beq.n	8007f68 <USBD_LL_DataInStage+0x15a>
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d122      	bne.n	8007f68 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d11c      	bne.n	8007f68 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f2e:	7dfa      	ldrb	r2, [r7, #23]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	32ae      	adds	r2, #174	@ 0xae
 8007f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d014      	beq.n	8007f68 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f3e:	7dfa      	ldrb	r2, [r7, #23]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f46:	7dfa      	ldrb	r2, [r7, #23]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	32ae      	adds	r2, #174	@ 0xae
 8007f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	7afa      	ldrb	r2, [r7, #11]
 8007f54:	4611      	mov	r1, r2
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	4798      	blx	r3
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f5e:	7dbb      	ldrb	r3, [r7, #22]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d001      	beq.n	8007f68 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007f64:	7dbb      	ldrb	r3, [r7, #22]
 8007f66:	e000      	b.n	8007f6a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d014      	beq.n	8007fd8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00e      	beq.n	8007fd8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6852      	ldr	r2, [r2, #4]
 8007fc6:	b2d2      	uxtb	r2, r2
 8007fc8:	4611      	mov	r1, r2
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	4798      	blx	r3
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fd8:	2340      	movs	r3, #64	@ 0x40
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2100      	movs	r1, #0
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 fbdf 	bl	80097a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2240      	movs	r2, #64	@ 0x40
 8007ff0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ff4:	2340      	movs	r3, #64	@ 0x40
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2180      	movs	r1, #128	@ 0x80
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 fbd1 	bl	80097a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2240      	movs	r2, #64	@ 0x40
 800800a:	621a      	str	r2, [r3, #32]

  return ret;
 800800c:	7bfb      	ldrb	r3, [r7, #15]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	460b      	mov	r3, r1
 8008020:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	78fa      	ldrb	r2, [r7, #3]
 8008026:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b04      	cmp	r3, #4
 8008048:	d006      	beq.n	8008058 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008050:	b2da      	uxtb	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2204      	movs	r2, #4
 800805c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b04      	cmp	r3, #4
 8008080:	d106      	bne.n	8008090 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008088:	b2da      	uxtb	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d110      	bne.n	80080d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00b      	beq.n	80080d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d005      	beq.n	80080d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	460b      	mov	r3, r1
 80080e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	32ae      	adds	r2, #174	@ 0xae
 80080f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e01c      	b.n	800813a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b03      	cmp	r3, #3
 800810a:	d115      	bne.n	8008138 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	32ae      	adds	r2, #174	@ 0xae
 8008116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00b      	beq.n	8008138 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	32ae      	adds	r2, #174	@ 0xae
 800812a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	78fa      	ldrb	r2, [r7, #3]
 8008132:	4611      	mov	r1, r2
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b082      	sub	sp, #8
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	32ae      	adds	r2, #174	@ 0xae
 8008158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008160:	2303      	movs	r3, #3
 8008162:	e01c      	b.n	800819e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b03      	cmp	r3, #3
 800816e:	d115      	bne.n	800819c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	32ae      	adds	r2, #174	@ 0xae
 800817a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800817e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00b      	beq.n	800819c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	32ae      	adds	r2, #174	@ 0xae
 800818e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008194:	78fa      	ldrb	r2, [r7, #3]
 8008196:	4611      	mov	r1, r2
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00e      	beq.n	80081f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	6852      	ldr	r2, [r2, #4]
 80081e6:	b2d2      	uxtb	r2, r2
 80081e8:	4611      	mov	r1, r2
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80081f4:	2303      	movs	r3, #3
 80081f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	460b      	mov	r3, r1
 800820c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800820e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008210:	4618      	mov	r0, r3
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008228:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b086      	sub	sp, #24
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800824a:	2300      	movs	r3, #0
 800824c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	885b      	ldrh	r3, [r3, #2]
 8008252:	b29b      	uxth	r3, r3
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	7812      	ldrb	r2, [r2, #0]
 8008258:	4293      	cmp	r3, r2
 800825a:	d91f      	bls.n	800829c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008262:	e013      	b.n	800828c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008264:	f107 030a 	add.w	r3, r7, #10
 8008268:	4619      	mov	r1, r3
 800826a:	6978      	ldr	r0, [r7, #20]
 800826c:	f000 f81b 	bl	80082a6 <USBD_GetNextDesc>
 8008270:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	785b      	ldrb	r3, [r3, #1]
 8008276:	2b05      	cmp	r3, #5
 8008278:	d108      	bne.n	800828c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	789b      	ldrb	r3, [r3, #2]
 8008282:	78fa      	ldrb	r2, [r7, #3]
 8008284:	429a      	cmp	r2, r3
 8008286:	d008      	beq.n	800829a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008288:	2300      	movs	r3, #0
 800828a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	885b      	ldrh	r3, [r3, #2]
 8008290:	b29a      	uxth	r2, r3
 8008292:	897b      	ldrh	r3, [r7, #10]
 8008294:	429a      	cmp	r2, r3
 8008296:	d8e5      	bhi.n	8008264 <USBD_GetEpDesc+0x2e>
 8008298:	e000      	b.n	800829c <USBD_GetEpDesc+0x66>
          break;
 800829a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800829c:	693b      	ldr	r3, [r7, #16]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b085      	sub	sp, #20
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	7812      	ldrb	r2, [r2, #0]
 80082bc:	4413      	add	r3, r2
 80082be:	b29a      	uxth	r2, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80082d0:	68fb      	ldr	r3, [r7, #12]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80082de:	b480      	push	{r7}
 80082e0:	b087      	sub	sp, #28
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	3301      	adds	r3, #1
 80082f4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80082fc:	8a3b      	ldrh	r3, [r7, #16]
 80082fe:	021b      	lsls	r3, r3, #8
 8008300:	b21a      	sxth	r2, r3
 8008302:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008306:	4313      	orrs	r3, r2
 8008308:	b21b      	sxth	r3, r3
 800830a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800830c:	89fb      	ldrh	r3, [r7, #14]
}
 800830e:	4618      	mov	r0, r3
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
	...

0800831c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008332:	2b40      	cmp	r3, #64	@ 0x40
 8008334:	d005      	beq.n	8008342 <USBD_StdDevReq+0x26>
 8008336:	2b40      	cmp	r3, #64	@ 0x40
 8008338:	d857      	bhi.n	80083ea <USBD_StdDevReq+0xce>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00f      	beq.n	800835e <USBD_StdDevReq+0x42>
 800833e:	2b20      	cmp	r3, #32
 8008340:	d153      	bne.n	80083ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	32ae      	adds	r2, #174	@ 0xae
 800834c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	4798      	blx	r3
 8008358:	4603      	mov	r3, r0
 800835a:	73fb      	strb	r3, [r7, #15]
      break;
 800835c:	e04a      	b.n	80083f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	785b      	ldrb	r3, [r3, #1]
 8008362:	2b09      	cmp	r3, #9
 8008364:	d83b      	bhi.n	80083de <USBD_StdDevReq+0xc2>
 8008366:	a201      	add	r2, pc, #4	@ (adr r2, 800836c <USBD_StdDevReq+0x50>)
 8008368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836c:	080083c1 	.word	0x080083c1
 8008370:	080083d5 	.word	0x080083d5
 8008374:	080083df 	.word	0x080083df
 8008378:	080083cb 	.word	0x080083cb
 800837c:	080083df 	.word	0x080083df
 8008380:	0800839f 	.word	0x0800839f
 8008384:	08008395 	.word	0x08008395
 8008388:	080083df 	.word	0x080083df
 800838c:	080083b7 	.word	0x080083b7
 8008390:	080083a9 	.word	0x080083a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa3c 	bl	8008814 <USBD_GetDescriptor>
          break;
 800839c:	e024      	b.n	80083e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fba1 	bl	8008ae8 <USBD_SetAddress>
          break;
 80083a6:	e01f      	b.n	80083e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fbe0 	bl	8008b70 <USBD_SetConfig>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73fb      	strb	r3, [r7, #15]
          break;
 80083b4:	e018      	b.n	80083e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fc83 	bl	8008cc4 <USBD_GetConfig>
          break;
 80083be:	e013      	b.n	80083e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fcb4 	bl	8008d30 <USBD_GetStatus>
          break;
 80083c8:	e00e      	b.n	80083e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fce3 	bl	8008d98 <USBD_SetFeature>
          break;
 80083d2:	e009      	b.n	80083e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fd07 	bl	8008dea <USBD_ClrFeature>
          break;
 80083dc:	e004      	b.n	80083e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fd5e 	bl	8008ea2 <USBD_CtlError>
          break;
 80083e6:	bf00      	nop
      }
      break;
 80083e8:	e004      	b.n	80083f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fd58 	bl	8008ea2 <USBD_CtlError>
      break;
 80083f2:	bf00      	nop
  }

  return ret;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop

08008400 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008416:	2b40      	cmp	r3, #64	@ 0x40
 8008418:	d005      	beq.n	8008426 <USBD_StdItfReq+0x26>
 800841a:	2b40      	cmp	r3, #64	@ 0x40
 800841c:	d852      	bhi.n	80084c4 <USBD_StdItfReq+0xc4>
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <USBD_StdItfReq+0x26>
 8008422:	2b20      	cmp	r3, #32
 8008424:	d14e      	bne.n	80084c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800842c:	b2db      	uxtb	r3, r3
 800842e:	3b01      	subs	r3, #1
 8008430:	2b02      	cmp	r3, #2
 8008432:	d840      	bhi.n	80084b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	889b      	ldrh	r3, [r3, #4]
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b01      	cmp	r3, #1
 800843c:	d836      	bhi.n	80084ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	889b      	ldrh	r3, [r3, #4]
 8008442:	b2db      	uxtb	r3, r3
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7ff fedb 	bl	8008202 <USBD_CoreFindIF>
 800844c:	4603      	mov	r3, r0
 800844e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2bff      	cmp	r3, #255	@ 0xff
 8008454:	d01d      	beq.n	8008492 <USBD_StdItfReq+0x92>
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d11a      	bne.n	8008492 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800845c:	7bba      	ldrb	r2, [r7, #14]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	32ae      	adds	r2, #174	@ 0xae
 8008462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00f      	beq.n	800848c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800846c:	7bba      	ldrb	r2, [r7, #14]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008474:	7bba      	ldrb	r2, [r7, #14]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	32ae      	adds	r2, #174	@ 0xae
 800847a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	4798      	blx	r3
 8008486:	4603      	mov	r3, r0
 8008488:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800848a:	e004      	b.n	8008496 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800848c:	2303      	movs	r3, #3
 800848e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008490:	e001      	b.n	8008496 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008492:	2303      	movs	r3, #3
 8008494:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	88db      	ldrh	r3, [r3, #6]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d110      	bne.n	80084c0 <USBD_StdItfReq+0xc0>
 800849e:	7bfb      	ldrb	r3, [r7, #15]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10d      	bne.n	80084c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fdd3 	bl	8009050 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084aa:	e009      	b.n	80084c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fcf7 	bl	8008ea2 <USBD_CtlError>
          break;
 80084b4:	e004      	b.n	80084c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fcf2 	bl	8008ea2 <USBD_CtlError>
          break;
 80084be:	e000      	b.n	80084c2 <USBD_StdItfReq+0xc2>
          break;
 80084c0:	bf00      	nop
      }
      break;
 80084c2:	e004      	b.n	80084ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fceb 	bl	8008ea2 <USBD_CtlError>
      break;
 80084cc:	bf00      	nop
  }

  return ret;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	889b      	ldrh	r3, [r3, #4]
 80084ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084f4:	2b40      	cmp	r3, #64	@ 0x40
 80084f6:	d007      	beq.n	8008508 <USBD_StdEPReq+0x30>
 80084f8:	2b40      	cmp	r3, #64	@ 0x40
 80084fa:	f200 817f 	bhi.w	80087fc <USBD_StdEPReq+0x324>
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d02a      	beq.n	8008558 <USBD_StdEPReq+0x80>
 8008502:	2b20      	cmp	r3, #32
 8008504:	f040 817a 	bne.w	80087fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008508:	7bbb      	ldrb	r3, [r7, #14]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff fe85 	bl	800821c <USBD_CoreFindEP>
 8008512:	4603      	mov	r3, r0
 8008514:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008516:	7b7b      	ldrb	r3, [r7, #13]
 8008518:	2bff      	cmp	r3, #255	@ 0xff
 800851a:	f000 8174 	beq.w	8008806 <USBD_StdEPReq+0x32e>
 800851e:	7b7b      	ldrb	r3, [r7, #13]
 8008520:	2b00      	cmp	r3, #0
 8008522:	f040 8170 	bne.w	8008806 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008526:	7b7a      	ldrb	r2, [r7, #13]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800852e:	7b7a      	ldrb	r2, [r7, #13]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	32ae      	adds	r2, #174	@ 0xae
 8008534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 8163 	beq.w	8008806 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008540:	7b7a      	ldrb	r2, [r7, #13]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	32ae      	adds	r2, #174	@ 0xae
 8008546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	4798      	blx	r3
 8008552:	4603      	mov	r3, r0
 8008554:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008556:	e156      	b.n	8008806 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	2b03      	cmp	r3, #3
 800855e:	d008      	beq.n	8008572 <USBD_StdEPReq+0x9a>
 8008560:	2b03      	cmp	r3, #3
 8008562:	f300 8145 	bgt.w	80087f0 <USBD_StdEPReq+0x318>
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 809b 	beq.w	80086a2 <USBD_StdEPReq+0x1ca>
 800856c:	2b01      	cmp	r3, #1
 800856e:	d03c      	beq.n	80085ea <USBD_StdEPReq+0x112>
 8008570:	e13e      	b.n	80087f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b02      	cmp	r3, #2
 800857c:	d002      	beq.n	8008584 <USBD_StdEPReq+0xac>
 800857e:	2b03      	cmp	r3, #3
 8008580:	d016      	beq.n	80085b0 <USBD_StdEPReq+0xd8>
 8008582:	e02c      	b.n	80085de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00d      	beq.n	80085a6 <USBD_StdEPReq+0xce>
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	2b80      	cmp	r3, #128	@ 0x80
 800858e:	d00a      	beq.n	80085a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008590:	7bbb      	ldrb	r3, [r7, #14]
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 f949 	bl	800982c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800859a:	2180      	movs	r1, #128	@ 0x80
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f001 f945 	bl	800982c <USBD_LL_StallEP>
 80085a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085a4:	e020      	b.n	80085e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fc7a 	bl	8008ea2 <USBD_CtlError>
              break;
 80085ae:	e01b      	b.n	80085e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	885b      	ldrh	r3, [r3, #2]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10e      	bne.n	80085d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00b      	beq.n	80085d6 <USBD_StdEPReq+0xfe>
 80085be:	7bbb      	ldrb	r3, [r7, #14]
 80085c0:	2b80      	cmp	r3, #128	@ 0x80
 80085c2:	d008      	beq.n	80085d6 <USBD_StdEPReq+0xfe>
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	88db      	ldrh	r3, [r3, #6]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d104      	bne.n	80085d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 f92b 	bl	800982c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fd3a 	bl	8009050 <USBD_CtlSendStatus>

              break;
 80085dc:	e004      	b.n	80085e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80085de:	6839      	ldr	r1, [r7, #0]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fc5e 	bl	8008ea2 <USBD_CtlError>
              break;
 80085e6:	bf00      	nop
          }
          break;
 80085e8:	e107      	b.n	80087fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d002      	beq.n	80085fc <USBD_StdEPReq+0x124>
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d016      	beq.n	8008628 <USBD_StdEPReq+0x150>
 80085fa:	e04b      	b.n	8008694 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00d      	beq.n	800861e <USBD_StdEPReq+0x146>
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	2b80      	cmp	r3, #128	@ 0x80
 8008606:	d00a      	beq.n	800861e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008608:	7bbb      	ldrb	r3, [r7, #14]
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f90d 	bl	800982c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008612:	2180      	movs	r1, #128	@ 0x80
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 f909 	bl	800982c <USBD_LL_StallEP>
 800861a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800861c:	e040      	b.n	80086a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fc3e 	bl	8008ea2 <USBD_CtlError>
              break;
 8008626:	e03b      	b.n	80086a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	885b      	ldrh	r3, [r3, #2]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d136      	bne.n	800869e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008630:	7bbb      	ldrb	r3, [r7, #14]
 8008632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008636:	2b00      	cmp	r3, #0
 8008638:	d004      	beq.n	8008644 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f001 f913 	bl	800986a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fd03 	bl	8009050 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7ff fde4 	bl	800821c <USBD_CoreFindEP>
 8008654:	4603      	mov	r3, r0
 8008656:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008658:	7b7b      	ldrb	r3, [r7, #13]
 800865a:	2bff      	cmp	r3, #255	@ 0xff
 800865c:	d01f      	beq.n	800869e <USBD_StdEPReq+0x1c6>
 800865e:	7b7b      	ldrb	r3, [r7, #13]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d11c      	bne.n	800869e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008664:	7b7a      	ldrb	r2, [r7, #13]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800866c:	7b7a      	ldrb	r2, [r7, #13]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	32ae      	adds	r2, #174	@ 0xae
 8008672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d010      	beq.n	800869e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800867c:	7b7a      	ldrb	r2, [r7, #13]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	32ae      	adds	r2, #174	@ 0xae
 8008682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	4798      	blx	r3
 800868e:	4603      	mov	r3, r0
 8008690:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008692:	e004      	b.n	800869e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fc03 	bl	8008ea2 <USBD_CtlError>
              break;
 800869c:	e000      	b.n	80086a0 <USBD_StdEPReq+0x1c8>
              break;
 800869e:	bf00      	nop
          }
          break;
 80086a0:	e0ab      	b.n	80087fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d002      	beq.n	80086b4 <USBD_StdEPReq+0x1dc>
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d032      	beq.n	8008718 <USBD_StdEPReq+0x240>
 80086b2:	e097      	b.n	80087e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d007      	beq.n	80086ca <USBD_StdEPReq+0x1f2>
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	2b80      	cmp	r3, #128	@ 0x80
 80086be:	d004      	beq.n	80086ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fbed 	bl	8008ea2 <USBD_CtlError>
                break;
 80086c8:	e091      	b.n	80087ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	da0b      	bge.n	80086ea <USBD_StdEPReq+0x212>
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086d8:	4613      	mov	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	3310      	adds	r3, #16
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	4413      	add	r3, r2
 80086e6:	3304      	adds	r3, #4
 80086e8:	e00b      	b.n	8008702 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	4413      	add	r3, r2
 8008700:	3304      	adds	r3, #4
 8008702:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2200      	movs	r2, #0
 8008708:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2202      	movs	r2, #2
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fc43 	bl	8008f9c <USBD_CtlSendData>
              break;
 8008716:	e06a      	b.n	80087ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800871c:	2b00      	cmp	r3, #0
 800871e:	da11      	bge.n	8008744 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	f003 020f 	and.w	r2, r3, #15
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	4613      	mov	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	440b      	add	r3, r1
 8008732:	3324      	adds	r3, #36	@ 0x24
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d117      	bne.n	800876a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fbb0 	bl	8008ea2 <USBD_CtlError>
                  break;
 8008742:	e054      	b.n	80087ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	f003 020f 	and.w	r2, r3, #15
 800874a:	6879      	ldr	r1, [r7, #4]
 800874c:	4613      	mov	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	440b      	add	r3, r1
 8008756:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d104      	bne.n	800876a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fb9d 	bl	8008ea2 <USBD_CtlError>
                  break;
 8008768:	e041      	b.n	80087ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800876a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800876e:	2b00      	cmp	r3, #0
 8008770:	da0b      	bge.n	800878a <USBD_StdEPReq+0x2b2>
 8008772:	7bbb      	ldrb	r3, [r7, #14]
 8008774:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008778:	4613      	mov	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	3310      	adds	r3, #16
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	4413      	add	r3, r2
 8008786:	3304      	adds	r3, #4
 8008788:	e00b      	b.n	80087a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800878a:	7bbb      	ldrb	r3, [r7, #14]
 800878c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	4413      	add	r3, r2
 80087a0:	3304      	adds	r3, #4
 80087a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <USBD_StdEPReq+0x2d8>
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	2b80      	cmp	r3, #128	@ 0x80
 80087ae:	d103      	bne.n	80087b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2200      	movs	r2, #0
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	e00e      	b.n	80087d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 f873 	bl	80098a8 <USBD_LL_IsStallEP>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d003      	beq.n	80087d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2201      	movs	r2, #1
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	e002      	b.n	80087d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2202      	movs	r2, #2
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fbdd 	bl	8008f9c <USBD_CtlSendData>
              break;
 80087e2:	e004      	b.n	80087ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fb5b 	bl	8008ea2 <USBD_CtlError>
              break;
 80087ec:	bf00      	nop
          }
          break;
 80087ee:	e004      	b.n	80087fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fb55 	bl	8008ea2 <USBD_CtlError>
          break;
 80087f8:	bf00      	nop
      }
      break;
 80087fa:	e005      	b.n	8008808 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fb4f 	bl	8008ea2 <USBD_CtlError>
      break;
 8008804:	e000      	b.n	8008808 <USBD_StdEPReq+0x330>
      break;
 8008806:	bf00      	nop
  }

  return ret;
 8008808:	7bfb      	ldrb	r3, [r7, #15]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	885b      	ldrh	r3, [r3, #2]
 800882e:	0a1b      	lsrs	r3, r3, #8
 8008830:	b29b      	uxth	r3, r3
 8008832:	3b01      	subs	r3, #1
 8008834:	2b06      	cmp	r3, #6
 8008836:	f200 8128 	bhi.w	8008a8a <USBD_GetDescriptor+0x276>
 800883a:	a201      	add	r2, pc, #4	@ (adr r2, 8008840 <USBD_GetDescriptor+0x2c>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	0800885d 	.word	0x0800885d
 8008844:	08008875 	.word	0x08008875
 8008848:	080088b5 	.word	0x080088b5
 800884c:	08008a8b 	.word	0x08008a8b
 8008850:	08008a8b 	.word	0x08008a8b
 8008854:	08008a2b 	.word	0x08008a2b
 8008858:	08008a57 	.word	0x08008a57
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	7c12      	ldrb	r2, [r2, #16]
 8008868:	f107 0108 	add.w	r1, r7, #8
 800886c:	4610      	mov	r0, r2
 800886e:	4798      	blx	r3
 8008870:	60f8      	str	r0, [r7, #12]
      break;
 8008872:	e112      	b.n	8008a9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	7c1b      	ldrb	r3, [r3, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10d      	bne.n	8008898 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008884:	f107 0208 	add.w	r2, r7, #8
 8008888:	4610      	mov	r0, r2
 800888a:	4798      	blx	r3
 800888c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3301      	adds	r3, #1
 8008892:	2202      	movs	r2, #2
 8008894:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008896:	e100      	b.n	8008a9a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800889e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a0:	f107 0208 	add.w	r2, r7, #8
 80088a4:	4610      	mov	r0, r2
 80088a6:	4798      	blx	r3
 80088a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3301      	adds	r3, #1
 80088ae:	2202      	movs	r2, #2
 80088b0:	701a      	strb	r2, [r3, #0]
      break;
 80088b2:	e0f2      	b.n	8008a9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	885b      	ldrh	r3, [r3, #2]
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b05      	cmp	r3, #5
 80088bc:	f200 80ac 	bhi.w	8008a18 <USBD_GetDescriptor+0x204>
 80088c0:	a201      	add	r2, pc, #4	@ (adr r2, 80088c8 <USBD_GetDescriptor+0xb4>)
 80088c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c6:	bf00      	nop
 80088c8:	080088e1 	.word	0x080088e1
 80088cc:	08008915 	.word	0x08008915
 80088d0:	08008949 	.word	0x08008949
 80088d4:	0800897d 	.word	0x0800897d
 80088d8:	080089b1 	.word	0x080089b1
 80088dc:	080089e5 	.word	0x080089e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00b      	beq.n	8008904 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	7c12      	ldrb	r2, [r2, #16]
 80088f8:	f107 0108 	add.w	r1, r7, #8
 80088fc:	4610      	mov	r0, r2
 80088fe:	4798      	blx	r3
 8008900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008902:	e091      	b.n	8008a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 facb 	bl	8008ea2 <USBD_CtlError>
            err++;
 800890c:	7afb      	ldrb	r3, [r7, #11]
 800890e:	3301      	adds	r3, #1
 8008910:	72fb      	strb	r3, [r7, #11]
          break;
 8008912:	e089      	b.n	8008a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00b      	beq.n	8008938 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	7c12      	ldrb	r2, [r2, #16]
 800892c:	f107 0108 	add.w	r1, r7, #8
 8008930:	4610      	mov	r0, r2
 8008932:	4798      	blx	r3
 8008934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008936:	e077      	b.n	8008a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fab1 	bl	8008ea2 <USBD_CtlError>
            err++;
 8008940:	7afb      	ldrb	r3, [r7, #11]
 8008942:	3301      	adds	r3, #1
 8008944:	72fb      	strb	r3, [r7, #11]
          break;
 8008946:	e06f      	b.n	8008a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00b      	beq.n	800896c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	7c12      	ldrb	r2, [r2, #16]
 8008960:	f107 0108 	add.w	r1, r7, #8
 8008964:	4610      	mov	r0, r2
 8008966:	4798      	blx	r3
 8008968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800896a:	e05d      	b.n	8008a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fa97 	bl	8008ea2 <USBD_CtlError>
            err++;
 8008974:	7afb      	ldrb	r3, [r7, #11]
 8008976:	3301      	adds	r3, #1
 8008978:	72fb      	strb	r3, [r7, #11]
          break;
 800897a:	e055      	b.n	8008a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00b      	beq.n	80089a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	7c12      	ldrb	r2, [r2, #16]
 8008994:	f107 0108 	add.w	r1, r7, #8
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
 800899c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800899e:	e043      	b.n	8008a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fa7d 	bl	8008ea2 <USBD_CtlError>
            err++;
 80089a8:	7afb      	ldrb	r3, [r7, #11]
 80089aa:	3301      	adds	r3, #1
 80089ac:	72fb      	strb	r3, [r7, #11]
          break;
 80089ae:	e03b      	b.n	8008a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00b      	beq.n	80089d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	7c12      	ldrb	r2, [r2, #16]
 80089c8:	f107 0108 	add.w	r1, r7, #8
 80089cc:	4610      	mov	r0, r2
 80089ce:	4798      	blx	r3
 80089d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089d2:	e029      	b.n	8008a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fa63 	bl	8008ea2 <USBD_CtlError>
            err++;
 80089dc:	7afb      	ldrb	r3, [r7, #11]
 80089de:	3301      	adds	r3, #1
 80089e0:	72fb      	strb	r3, [r7, #11]
          break;
 80089e2:	e021      	b.n	8008a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00b      	beq.n	8008a08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	7c12      	ldrb	r2, [r2, #16]
 80089fc:	f107 0108 	add.w	r1, r7, #8
 8008a00:	4610      	mov	r0, r2
 8008a02:	4798      	blx	r3
 8008a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a06:	e00f      	b.n	8008a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fa49 	bl	8008ea2 <USBD_CtlError>
            err++;
 8008a10:	7afb      	ldrb	r3, [r7, #11]
 8008a12:	3301      	adds	r3, #1
 8008a14:	72fb      	strb	r3, [r7, #11]
          break;
 8008a16:	e007      	b.n	8008a28 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa41 	bl	8008ea2 <USBD_CtlError>
          err++;
 8008a20:	7afb      	ldrb	r3, [r7, #11]
 8008a22:	3301      	adds	r3, #1
 8008a24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a26:	bf00      	nop
      }
      break;
 8008a28:	e037      	b.n	8008a9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	7c1b      	ldrb	r3, [r3, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d109      	bne.n	8008a46 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a3a:	f107 0208 	add.w	r2, r7, #8
 8008a3e:	4610      	mov	r0, r2
 8008a40:	4798      	blx	r3
 8008a42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a44:	e029      	b.n	8008a9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fa2a 	bl	8008ea2 <USBD_CtlError>
        err++;
 8008a4e:	7afb      	ldrb	r3, [r7, #11]
 8008a50:	3301      	adds	r3, #1
 8008a52:	72fb      	strb	r3, [r7, #11]
      break;
 8008a54:	e021      	b.n	8008a9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	7c1b      	ldrb	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10d      	bne.n	8008a7a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a66:	f107 0208 	add.w	r2, r7, #8
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	4798      	blx	r3
 8008a6e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3301      	adds	r3, #1
 8008a74:	2207      	movs	r2, #7
 8008a76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a78:	e00f      	b.n	8008a9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fa10 	bl	8008ea2 <USBD_CtlError>
        err++;
 8008a82:	7afb      	ldrb	r3, [r7, #11]
 8008a84:	3301      	adds	r3, #1
 8008a86:	72fb      	strb	r3, [r7, #11]
      break;
 8008a88:	e007      	b.n	8008a9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fa08 	bl	8008ea2 <USBD_CtlError>
      err++;
 8008a92:	7afb      	ldrb	r3, [r7, #11]
 8008a94:	3301      	adds	r3, #1
 8008a96:	72fb      	strb	r3, [r7, #11]
      break;
 8008a98:	bf00      	nop
  }

  if (err != 0U)
 8008a9a:	7afb      	ldrb	r3, [r7, #11]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d11e      	bne.n	8008ade <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	88db      	ldrh	r3, [r3, #6]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d016      	beq.n	8008ad6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008aa8:	893b      	ldrh	r3, [r7, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00e      	beq.n	8008acc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	88da      	ldrh	r2, [r3, #6]
 8008ab2:	893b      	ldrh	r3, [r7, #8]
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	bf28      	it	cs
 8008ab8:	4613      	movcs	r3, r2
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008abe:	893b      	ldrh	r3, [r7, #8]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	68f9      	ldr	r1, [r7, #12]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fa69 	bl	8008f9c <USBD_CtlSendData>
 8008aca:	e009      	b.n	8008ae0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f9e7 	bl	8008ea2 <USBD_CtlError>
 8008ad4:	e004      	b.n	8008ae0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 faba 	bl	8009050 <USBD_CtlSendStatus>
 8008adc:	e000      	b.n	8008ae0 <USBD_GetDescriptor+0x2cc>
    return;
 8008ade:	bf00      	nop
  }
}
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop

08008ae8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	889b      	ldrh	r3, [r3, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d131      	bne.n	8008b5e <USBD_SetAddress+0x76>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	88db      	ldrh	r3, [r3, #6]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d12d      	bne.n	8008b5e <USBD_SetAddress+0x76>
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	885b      	ldrh	r3, [r3, #2]
 8008b06:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b08:	d829      	bhi.n	8008b5e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	885b      	ldrh	r3, [r3, #2]
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d104      	bne.n	8008b2c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f9bc 	bl	8008ea2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b2a:	e01d      	b.n	8008b68 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	7bfa      	ldrb	r2, [r7, #15]
 8008b30:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fee1 	bl	8009900 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fa86 	bl	8009050 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d004      	beq.n	8008b54 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2202      	movs	r2, #2
 8008b4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b52:	e009      	b.n	8008b68 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5c:	e004      	b.n	8008b68 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f99e 	bl	8008ea2 <USBD_CtlError>
  }
}
 8008b66:	bf00      	nop
 8008b68:	bf00      	nop
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	885b      	ldrh	r3, [r3, #2]
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	4b4e      	ldr	r3, [pc, #312]	@ (8008cc0 <USBD_SetConfig+0x150>)
 8008b86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b88:	4b4d      	ldr	r3, [pc, #308]	@ (8008cc0 <USBD_SetConfig+0x150>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d905      	bls.n	8008b9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f985 	bl	8008ea2 <USBD_CtlError>
    return USBD_FAIL;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e08c      	b.n	8008cb6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d002      	beq.n	8008bae <USBD_SetConfig+0x3e>
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d029      	beq.n	8008c00 <USBD_SetConfig+0x90>
 8008bac:	e075      	b.n	8008c9a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bae:	4b44      	ldr	r3, [pc, #272]	@ (8008cc0 <USBD_SetConfig+0x150>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d020      	beq.n	8008bf8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008bb6:	4b42      	ldr	r3, [pc, #264]	@ (8008cc0 <USBD_SetConfig+0x150>)
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8008cc0 <USBD_SetConfig+0x150>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7fe ffe3 	bl	8007b92 <USBD_SetClassConfig>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d008      	beq.n	8008be8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f962 	bl	8008ea2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2202      	movs	r2, #2
 8008be2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008be6:	e065      	b.n	8008cb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fa31 	bl	8009050 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2203      	movs	r2, #3
 8008bf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008bf6:	e05d      	b.n	8008cb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fa29 	bl	8009050 <USBD_CtlSendStatus>
      break;
 8008bfe:	e059      	b.n	8008cb4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c00:	4b2f      	ldr	r3, [pc, #188]	@ (8008cc0 <USBD_SetConfig+0x150>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d112      	bne.n	8008c2e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008c10:	4b2b      	ldr	r3, [pc, #172]	@ (8008cc0 <USBD_SetConfig+0x150>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	461a      	mov	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c1a:	4b29      	ldr	r3, [pc, #164]	@ (8008cc0 <USBD_SetConfig+0x150>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7fe ffd2 	bl	8007bca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fa12 	bl	8009050 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c2c:	e042      	b.n	8008cb4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c2e:	4b24      	ldr	r3, [pc, #144]	@ (8008cc0 <USBD_SetConfig+0x150>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d02a      	beq.n	8008c92 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7fe ffc0 	bl	8007bca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8008cc0 <USBD_SetConfig+0x150>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c54:	4b1a      	ldr	r3, [pc, #104]	@ (8008cc0 <USBD_SetConfig+0x150>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7fe ff99 	bl	8007b92 <USBD_SetClassConfig>
 8008c60:	4603      	mov	r3, r0
 8008c62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00f      	beq.n	8008c8a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f918 	bl	8008ea2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7fe ffa5 	bl	8007bca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c88:	e014      	b.n	8008cb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f9e0 	bl	8009050 <USBD_CtlSendStatus>
      break;
 8008c90:	e010      	b.n	8008cb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f9dc 	bl	8009050 <USBD_CtlSendStatus>
      break;
 8008c98:	e00c      	b.n	8008cb4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f900 	bl	8008ea2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ca2:	4b07      	ldr	r3, [pc, #28]	@ (8008cc0 <USBD_SetConfig+0x150>)
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7fe ff8e 	bl	8007bca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb2:	bf00      	nop
  }

  return ret;
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000220 	.word	0x20000220

08008cc4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	88db      	ldrh	r3, [r3, #6]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d004      	beq.n	8008ce0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f8e2 	bl	8008ea2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008cde:	e023      	b.n	8008d28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	dc02      	bgt.n	8008cf2 <USBD_GetConfig+0x2e>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dc03      	bgt.n	8008cf8 <USBD_GetConfig+0x34>
 8008cf0:	e015      	b.n	8008d1e <USBD_GetConfig+0x5a>
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d00b      	beq.n	8008d0e <USBD_GetConfig+0x4a>
 8008cf6:	e012      	b.n	8008d1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3308      	adds	r3, #8
 8008d02:	2201      	movs	r2, #1
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f948 	bl	8008f9c <USBD_CtlSendData>
        break;
 8008d0c:	e00c      	b.n	8008d28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	3304      	adds	r3, #4
 8008d12:	2201      	movs	r2, #1
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f940 	bl	8008f9c <USBD_CtlSendData>
        break;
 8008d1c:	e004      	b.n	8008d28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f8be 	bl	8008ea2 <USBD_CtlError>
        break;
 8008d26:	bf00      	nop
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	3b01      	subs	r3, #1
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d81e      	bhi.n	8008d86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	88db      	ldrh	r3, [r3, #6]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d004      	beq.n	8008d5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f8a5 	bl	8008ea2 <USBD_CtlError>
        break;
 8008d58:	e01a      	b.n	8008d90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d005      	beq.n	8008d76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f043 0202 	orr.w	r2, r3, #2
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	330c      	adds	r3, #12
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f90c 	bl	8008f9c <USBD_CtlSendData>
      break;
 8008d84:	e004      	b.n	8008d90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f88a 	bl	8008ea2 <USBD_CtlError>
      break;
 8008d8e:	bf00      	nop
  }
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	885b      	ldrh	r3, [r3, #2]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d107      	bne.n	8008dba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f94c 	bl	8009050 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008db8:	e013      	b.n	8008de2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	885b      	ldrh	r3, [r3, #2]
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d10b      	bne.n	8008dda <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	889b      	ldrh	r3, [r3, #4]
 8008dc6:	0a1b      	lsrs	r3, r3, #8
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f93c 	bl	8009050 <USBD_CtlSendStatus>
}
 8008dd8:	e003      	b.n	8008de2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f860 	bl	8008ea2 <USBD_CtlError>
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d80b      	bhi.n	8008e1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	885b      	ldrh	r3, [r3, #2]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d10c      	bne.n	8008e24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f91c 	bl	8009050 <USBD_CtlSendStatus>
      }
      break;
 8008e18:	e004      	b.n	8008e24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f840 	bl	8008ea2 <USBD_CtlError>
      break;
 8008e22:	e000      	b.n	8008e26 <USBD_ClrFeature+0x3c>
      break;
 8008e24:	bf00      	nop
  }
}
 8008e26:	bf00      	nop
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b084      	sub	sp, #16
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	781a      	ldrb	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3301      	adds	r3, #1
 8008e48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	781a      	ldrb	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3301      	adds	r3, #1
 8008e56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f7ff fa40 	bl	80082de <SWAPBYTE>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	461a      	mov	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f7ff fa33 	bl	80082de <SWAPBYTE>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3301      	adds	r3, #1
 8008e84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f7ff fa26 	bl	80082de <SWAPBYTE>
 8008e92:	4603      	mov	r3, r0
 8008e94:	461a      	mov	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	80da      	strh	r2, [r3, #6]
}
 8008e9a:	bf00      	nop
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b082      	sub	sp, #8
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eac:	2180      	movs	r1, #128	@ 0x80
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fcbc 	bl	800982c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fcb8 	bl	800982c <USBD_LL_StallEP>
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d042      	beq.n	8008f60 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008ede:	6938      	ldr	r0, [r7, #16]
 8008ee0:	f000 f842 	bl	8008f68 <USBD_GetLen>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eee:	d808      	bhi.n	8008f02 <USBD_GetString+0x3e>
 8008ef0:	6938      	ldr	r0, [r7, #16]
 8008ef2:	f000 f839 	bl	8008f68 <USBD_GetLen>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	3301      	adds	r3, #1
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	e001      	b.n	8008f06 <USBD_GetString+0x42>
 8008f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	4413      	add	r3, r2
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	7812      	ldrb	r2, [r2, #0]
 8008f14:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	4413      	add	r3, r2
 8008f22:	2203      	movs	r2, #3
 8008f24:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f2c:	e013      	b.n	8008f56 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	4413      	add	r3, r2
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	7812      	ldrb	r2, [r2, #0]
 8008f38:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	613b      	str	r3, [r7, #16]
    idx++;
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	3301      	adds	r3, #1
 8008f44:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	3301      	adds	r3, #1
 8008f54:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1e7      	bne.n	8008f2e <USBD_GetString+0x6a>
 8008f5e:	e000      	b.n	8008f62 <USBD_GetString+0x9e>
    return;
 8008f60:	bf00      	nop
  }
}
 8008f62:	3718      	adds	r7, #24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f78:	e005      	b.n	8008f86 <USBD_GetLen+0x1e>
  {
    len++;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	3301      	adds	r3, #1
 8008f84:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1f5      	bne.n	8008f7a <USBD_GetLen+0x12>
  }

  return len;
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f000 fcbb 	bl	800993e <USBD_LL_Transmit>

  return USBD_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b084      	sub	sp, #16
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	60b9      	str	r1, [r7, #8]
 8008fdc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 fcaa 	bl	800993e <USBD_LL_Transmit>

  return USBD_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2203      	movs	r2, #3
 8009004:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	2100      	movs	r1, #0
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 fcae 	bl	8009980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	60f8      	str	r0, [r7, #12]
 8009036:	60b9      	str	r1, [r7, #8]
 8009038:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	2100      	movs	r1, #0
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 fc9d 	bl	8009980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2204      	movs	r2, #4
 800905c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009060:	2300      	movs	r3, #0
 8009062:	2200      	movs	r2, #0
 8009064:	2100      	movs	r1, #0
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fc69 	bl	800993e <USBD_LL_Transmit>

  return USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b082      	sub	sp, #8
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2205      	movs	r2, #5
 8009082:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009086:	2300      	movs	r3, #0
 8009088:	2200      	movs	r2, #0
 800908a:	2100      	movs	r1, #0
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fc77 	bl	8009980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090a0:	2200      	movs	r2, #0
 80090a2:	4912      	ldr	r1, [pc, #72]	@ (80090ec <MX_USB_DEVICE_Init+0x50>)
 80090a4:	4812      	ldr	r0, [pc, #72]	@ (80090f0 <MX_USB_DEVICE_Init+0x54>)
 80090a6:	f7fe fcf7 	bl	8007a98 <USBD_Init>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090b0:	f7f7 fc62 	bl	8000978 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090b4:	490f      	ldr	r1, [pc, #60]	@ (80090f4 <MX_USB_DEVICE_Init+0x58>)
 80090b6:	480e      	ldr	r0, [pc, #56]	@ (80090f0 <MX_USB_DEVICE_Init+0x54>)
 80090b8:	f7fe fd1e 	bl	8007af8 <USBD_RegisterClass>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090c2:	f7f7 fc59 	bl	8000978 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090c6:	490c      	ldr	r1, [pc, #48]	@ (80090f8 <MX_USB_DEVICE_Init+0x5c>)
 80090c8:	4809      	ldr	r0, [pc, #36]	@ (80090f0 <MX_USB_DEVICE_Init+0x54>)
 80090ca:	f7fe fc55 	bl	8007978 <USBD_CDC_RegisterInterface>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090d4:	f7f7 fc50 	bl	8000978 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090d8:	4805      	ldr	r0, [pc, #20]	@ (80090f0 <MX_USB_DEVICE_Init+0x54>)
 80090da:	f7fe fd43 	bl	8007b64 <USBD_Start>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090e4:	f7f7 fc48 	bl	8000978 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090e8:	bf00      	nop
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	200000b0 	.word	0x200000b0
 80090f0:	20000224 	.word	0x20000224
 80090f4:	2000001c 	.word	0x2000001c
 80090f8:	2000009c 	.word	0x2000009c

080090fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009100:	2200      	movs	r2, #0
 8009102:	4905      	ldr	r1, [pc, #20]	@ (8009118 <CDC_Init_FS+0x1c>)
 8009104:	4805      	ldr	r0, [pc, #20]	@ (800911c <CDC_Init_FS+0x20>)
 8009106:	f7fe fc51 	bl	80079ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800910a:	4905      	ldr	r1, [pc, #20]	@ (8009120 <CDC_Init_FS+0x24>)
 800910c:	4803      	ldr	r0, [pc, #12]	@ (800911c <CDC_Init_FS+0x20>)
 800910e:	f7fe fc6f 	bl	80079f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009112:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009114:	4618      	mov	r0, r3
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20000d00 	.word	0x20000d00
 800911c:	20000224 	.word	0x20000224
 8009120:	20000500 	.word	0x20000500

08009124 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009124:	b480      	push	{r7}
 8009126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009128:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800912a:	4618      	mov	r0, r3
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	6039      	str	r1, [r7, #0]
 800913e:	71fb      	strb	r3, [r7, #7]
 8009140:	4613      	mov	r3, r2
 8009142:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009144:	79fb      	ldrb	r3, [r7, #7]
 8009146:	2b23      	cmp	r3, #35	@ 0x23
 8009148:	d84a      	bhi.n	80091e0 <CDC_Control_FS+0xac>
 800914a:	a201      	add	r2, pc, #4	@ (adr r2, 8009150 <CDC_Control_FS+0x1c>)
 800914c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009150:	080091e1 	.word	0x080091e1
 8009154:	080091e1 	.word	0x080091e1
 8009158:	080091e1 	.word	0x080091e1
 800915c:	080091e1 	.word	0x080091e1
 8009160:	080091e1 	.word	0x080091e1
 8009164:	080091e1 	.word	0x080091e1
 8009168:	080091e1 	.word	0x080091e1
 800916c:	080091e1 	.word	0x080091e1
 8009170:	080091e1 	.word	0x080091e1
 8009174:	080091e1 	.word	0x080091e1
 8009178:	080091e1 	.word	0x080091e1
 800917c:	080091e1 	.word	0x080091e1
 8009180:	080091e1 	.word	0x080091e1
 8009184:	080091e1 	.word	0x080091e1
 8009188:	080091e1 	.word	0x080091e1
 800918c:	080091e1 	.word	0x080091e1
 8009190:	080091e1 	.word	0x080091e1
 8009194:	080091e1 	.word	0x080091e1
 8009198:	080091e1 	.word	0x080091e1
 800919c:	080091e1 	.word	0x080091e1
 80091a0:	080091e1 	.word	0x080091e1
 80091a4:	080091e1 	.word	0x080091e1
 80091a8:	080091e1 	.word	0x080091e1
 80091ac:	080091e1 	.word	0x080091e1
 80091b0:	080091e1 	.word	0x080091e1
 80091b4:	080091e1 	.word	0x080091e1
 80091b8:	080091e1 	.word	0x080091e1
 80091bc:	080091e1 	.word	0x080091e1
 80091c0:	080091e1 	.word	0x080091e1
 80091c4:	080091e1 	.word	0x080091e1
 80091c8:	080091e1 	.word	0x080091e1
 80091cc:	080091e1 	.word	0x080091e1
 80091d0:	080091e1 	.word	0x080091e1
 80091d4:	080091e1 	.word	0x080091e1
 80091d8:	080091e1 	.word	0x080091e1
 80091dc:	080091e1 	.word	0x080091e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091e0:	bf00      	nop
  }

  return (USBD_OK);
 80091e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091fa:	6879      	ldr	r1, [r7, #4]
 80091fc:	4805      	ldr	r0, [pc, #20]	@ (8009214 <CDC_Receive_FS+0x24>)
 80091fe:	f7fe fbf7 	bl	80079f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009202:	4804      	ldr	r0, [pc, #16]	@ (8009214 <CDC_Receive_FS+0x24>)
 8009204:	f7fe fc12 	bl	8007a2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009208:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	20000224 	.word	0x20000224

08009218 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	4613      	mov	r3, r2
 8009224:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800922a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800922e:	4618      	mov	r0, r3
 8009230:	371c      	adds	r7, #28
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
	...

0800923c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	6039      	str	r1, [r7, #0]
 8009246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2212      	movs	r2, #18
 800924c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800924e:	4b03      	ldr	r3, [pc, #12]	@ (800925c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009250:	4618      	mov	r0, r3
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	200000cc 	.word	0x200000cc

08009260 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	6039      	str	r1, [r7, #0]
 800926a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2204      	movs	r2, #4
 8009270:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009272:	4b03      	ldr	r3, [pc, #12]	@ (8009280 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	200000e0 	.word	0x200000e0

08009284 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	6039      	str	r1, [r7, #0]
 800928e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009290:	79fb      	ldrb	r3, [r7, #7]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d105      	bne.n	80092a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	4907      	ldr	r1, [pc, #28]	@ (80092b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800929a:	4808      	ldr	r0, [pc, #32]	@ (80092bc <USBD_FS_ProductStrDescriptor+0x38>)
 800929c:	f7ff fe12 	bl	8008ec4 <USBD_GetString>
 80092a0:	e004      	b.n	80092ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	4904      	ldr	r1, [pc, #16]	@ (80092b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80092a6:	4805      	ldr	r0, [pc, #20]	@ (80092bc <USBD_FS_ProductStrDescriptor+0x38>)
 80092a8:	f7ff fe0c 	bl	8008ec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092ac:	4b02      	ldr	r3, [pc, #8]	@ (80092b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	20001500 	.word	0x20001500
 80092bc:	08009b14 	.word	0x08009b14

080092c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	4603      	mov	r3, r0
 80092c8:	6039      	str	r1, [r7, #0]
 80092ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	4904      	ldr	r1, [pc, #16]	@ (80092e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092d0:	4804      	ldr	r0, [pc, #16]	@ (80092e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092d2:	f7ff fdf7 	bl	8008ec4 <USBD_GetString>
  return USBD_StrDesc;
 80092d6:	4b02      	ldr	r3, [pc, #8]	@ (80092e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	20001500 	.word	0x20001500
 80092e4:	08009b2c 	.word	0x08009b2c

080092e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	6039      	str	r1, [r7, #0]
 80092f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	221a      	movs	r2, #26
 80092f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092fa:	f000 f843 	bl	8009384 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092fe:	4b02      	ldr	r3, [pc, #8]	@ (8009308 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009300:	4618      	mov	r0, r3
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	200000e4 	.word	0x200000e4

0800930c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	4603      	mov	r3, r0
 8009314:	6039      	str	r1, [r7, #0]
 8009316:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009318:	79fb      	ldrb	r3, [r7, #7]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d105      	bne.n	800932a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	4907      	ldr	r1, [pc, #28]	@ (8009340 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009322:	4808      	ldr	r0, [pc, #32]	@ (8009344 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009324:	f7ff fdce 	bl	8008ec4 <USBD_GetString>
 8009328:	e004      	b.n	8009334 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	4904      	ldr	r1, [pc, #16]	@ (8009340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800932e:	4805      	ldr	r0, [pc, #20]	@ (8009344 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009330:	f7ff fdc8 	bl	8008ec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009334:	4b02      	ldr	r3, [pc, #8]	@ (8009340 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20001500 	.word	0x20001500
 8009344:	08009b40 	.word	0x08009b40

08009348 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	6039      	str	r1, [r7, #0]
 8009352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d105      	bne.n	8009366 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	4907      	ldr	r1, [pc, #28]	@ (800937c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800935e:	4808      	ldr	r0, [pc, #32]	@ (8009380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009360:	f7ff fdb0 	bl	8008ec4 <USBD_GetString>
 8009364:	e004      	b.n	8009370 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	4904      	ldr	r1, [pc, #16]	@ (800937c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800936a:	4805      	ldr	r0, [pc, #20]	@ (8009380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800936c:	f7ff fdaa 	bl	8008ec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009370:	4b02      	ldr	r3, [pc, #8]	@ (800937c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	20001500 	.word	0x20001500
 8009380:	08009b4c 	.word	0x08009b4c

08009384 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800938a:	4b0f      	ldr	r3, [pc, #60]	@ (80093c8 <Get_SerialNum+0x44>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009390:	4b0e      	ldr	r3, [pc, #56]	@ (80093cc <Get_SerialNum+0x48>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009396:	4b0e      	ldr	r3, [pc, #56]	@ (80093d0 <Get_SerialNum+0x4c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4413      	add	r3, r2
 80093a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d009      	beq.n	80093be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093aa:	2208      	movs	r2, #8
 80093ac:	4909      	ldr	r1, [pc, #36]	@ (80093d4 <Get_SerialNum+0x50>)
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f000 f814 	bl	80093dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093b4:	2204      	movs	r2, #4
 80093b6:	4908      	ldr	r1, [pc, #32]	@ (80093d8 <Get_SerialNum+0x54>)
 80093b8:	68b8      	ldr	r0, [r7, #8]
 80093ba:	f000 f80f 	bl	80093dc <IntToUnicode>
  }
}
 80093be:	bf00      	nop
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	1fff7a10 	.word	0x1fff7a10
 80093cc:	1fff7a14 	.word	0x1fff7a14
 80093d0:	1fff7a18 	.word	0x1fff7a18
 80093d4:	200000e6 	.word	0x200000e6
 80093d8:	200000f6 	.word	0x200000f6

080093dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093dc:	b480      	push	{r7}
 80093de:	b087      	sub	sp, #28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	4613      	mov	r3, r2
 80093e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093ee:	2300      	movs	r3, #0
 80093f0:	75fb      	strb	r3, [r7, #23]
 80093f2:	e027      	b.n	8009444 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	0f1b      	lsrs	r3, r3, #28
 80093f8:	2b09      	cmp	r3, #9
 80093fa:	d80b      	bhi.n	8009414 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	0f1b      	lsrs	r3, r3, #28
 8009400:	b2da      	uxtb	r2, r3
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	4619      	mov	r1, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	440b      	add	r3, r1
 800940c:	3230      	adds	r2, #48	@ 0x30
 800940e:	b2d2      	uxtb	r2, r2
 8009410:	701a      	strb	r2, [r3, #0]
 8009412:	e00a      	b.n	800942a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	0f1b      	lsrs	r3, r3, #28
 8009418:	b2da      	uxtb	r2, r3
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	005b      	lsls	r3, r3, #1
 800941e:	4619      	mov	r1, r3
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	440b      	add	r3, r1
 8009424:	3237      	adds	r2, #55	@ 0x37
 8009426:	b2d2      	uxtb	r2, r2
 8009428:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	011b      	lsls	r3, r3, #4
 800942e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	005b      	lsls	r3, r3, #1
 8009434:	3301      	adds	r3, #1
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	4413      	add	r3, r2
 800943a:	2200      	movs	r2, #0
 800943c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800943e:	7dfb      	ldrb	r3, [r7, #23]
 8009440:	3301      	adds	r3, #1
 8009442:	75fb      	strb	r3, [r7, #23]
 8009444:	7dfa      	ldrb	r2, [r7, #23]
 8009446:	79fb      	ldrb	r3, [r7, #7]
 8009448:	429a      	cmp	r2, r3
 800944a:	d3d3      	bcc.n	80093f4 <IntToUnicode+0x18>
  }
}
 800944c:	bf00      	nop
 800944e:	bf00      	nop
 8009450:	371c      	adds	r7, #28
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
	...

0800945c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b08a      	sub	sp, #40	@ 0x28
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009464:	f107 0314 	add.w	r3, r7, #20
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]
 800946c:	605a      	str	r2, [r3, #4]
 800946e:	609a      	str	r2, [r3, #8]
 8009470:	60da      	str	r2, [r3, #12]
 8009472:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800947c:	d13a      	bne.n	80094f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800947e:	2300      	movs	r3, #0
 8009480:	613b      	str	r3, [r7, #16]
 8009482:	4b1e      	ldr	r3, [pc, #120]	@ (80094fc <HAL_PCD_MspInit+0xa0>)
 8009484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009486:	4a1d      	ldr	r2, [pc, #116]	@ (80094fc <HAL_PCD_MspInit+0xa0>)
 8009488:	f043 0301 	orr.w	r3, r3, #1
 800948c:	6313      	str	r3, [r2, #48]	@ 0x30
 800948e:	4b1b      	ldr	r3, [pc, #108]	@ (80094fc <HAL_PCD_MspInit+0xa0>)
 8009490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	613b      	str	r3, [r7, #16]
 8009498:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800949a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800949e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094a0:	2302      	movs	r3, #2
 80094a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094a4:	2300      	movs	r3, #0
 80094a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094a8:	2303      	movs	r3, #3
 80094aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094ac:	230a      	movs	r3, #10
 80094ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094b0:	f107 0314 	add.w	r3, r7, #20
 80094b4:	4619      	mov	r1, r3
 80094b6:	4812      	ldr	r0, [pc, #72]	@ (8009500 <HAL_PCD_MspInit+0xa4>)
 80094b8:	f7f8 f95a 	bl	8001770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094bc:	4b0f      	ldr	r3, [pc, #60]	@ (80094fc <HAL_PCD_MspInit+0xa0>)
 80094be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094c0:	4a0e      	ldr	r2, [pc, #56]	@ (80094fc <HAL_PCD_MspInit+0xa0>)
 80094c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80094c8:	2300      	movs	r3, #0
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	4b0b      	ldr	r3, [pc, #44]	@ (80094fc <HAL_PCD_MspInit+0xa0>)
 80094ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094d0:	4a0a      	ldr	r2, [pc, #40]	@ (80094fc <HAL_PCD_MspInit+0xa0>)
 80094d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80094d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80094d8:	4b08      	ldr	r3, [pc, #32]	@ (80094fc <HAL_PCD_MspInit+0xa0>)
 80094da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094e0:	60fb      	str	r3, [r7, #12]
 80094e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094e4:	2200      	movs	r2, #0
 80094e6:	2100      	movs	r1, #0
 80094e8:	2043      	movs	r0, #67	@ 0x43
 80094ea:	f7f8 f878 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094ee:	2043      	movs	r0, #67	@ 0x43
 80094f0:	f7f8 f891 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094f4:	bf00      	nop
 80094f6:	3728      	adds	r7, #40	@ 0x28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	40023800 	.word	0x40023800
 8009500:	40020000 	.word	0x40020000

08009504 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009518:	4619      	mov	r1, r3
 800951a:	4610      	mov	r0, r2
 800951c:	f7fe fb6f 	bl	8007bfe <USBD_LL_SetupStage>
}
 8009520:	bf00      	nop
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800953a:	78fa      	ldrb	r2, [r7, #3]
 800953c:	6879      	ldr	r1, [r7, #4]
 800953e:	4613      	mov	r3, r2
 8009540:	00db      	lsls	r3, r3, #3
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	440b      	add	r3, r1
 8009548:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	78fb      	ldrb	r3, [r7, #3]
 8009550:	4619      	mov	r1, r3
 8009552:	f7fe fba9 	bl	8007ca8 <USBD_LL_DataOutStage>
}
 8009556:	bf00      	nop
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b082      	sub	sp, #8
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	460b      	mov	r3, r1
 8009568:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009570:	78fa      	ldrb	r2, [r7, #3]
 8009572:	6879      	ldr	r1, [r7, #4]
 8009574:	4613      	mov	r3, r2
 8009576:	00db      	lsls	r3, r3, #3
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	440b      	add	r3, r1
 800957e:	3320      	adds	r3, #32
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	4619      	mov	r1, r3
 8009586:	f7fe fc42 	bl	8007e0e <USBD_LL_DataInStage>
}
 800958a:	bf00      	nop
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b082      	sub	sp, #8
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7fe fd7c 	bl	800809e <USBD_LL_SOF>
}
 80095a6:	bf00      	nop
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095b6:	2301      	movs	r3, #1
 80095b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	79db      	ldrb	r3, [r3, #7]
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d001      	beq.n	80095c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095c2:	f7f7 f9d9 	bl	8000978 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095cc:	7bfa      	ldrb	r2, [r7, #15]
 80095ce:	4611      	mov	r1, r2
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe fd20 	bl	8008016 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fe fcc8 	bl	8007f72 <USBD_LL_Reset>
}
 80095e2:	bf00      	nop
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fe fd1b 	bl	8008036 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	6812      	ldr	r2, [r2, #0]
 800960e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009612:	f043 0301 	orr.w	r3, r3, #1
 8009616:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	7adb      	ldrb	r3, [r3, #11]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009620:	4b04      	ldr	r3, [pc, #16]	@ (8009634 <HAL_PCD_SuspendCallback+0x48>)
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	4a03      	ldr	r2, [pc, #12]	@ (8009634 <HAL_PCD_SuspendCallback+0x48>)
 8009626:	f043 0306 	orr.w	r3, r3, #6
 800962a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800962c:	bf00      	nop
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	e000ed00 	.word	0xe000ed00

08009638 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009646:	4618      	mov	r0, r3
 8009648:	f7fe fd11 	bl	800806e <USBD_LL_Resume>
}
 800964c:	bf00      	nop
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	460b      	mov	r3, r1
 800965e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009666:	78fa      	ldrb	r2, [r7, #3]
 8009668:	4611      	mov	r1, r2
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe fd69 	bl	8008142 <USBD_LL_IsoOUTIncomplete>
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800968a:	78fa      	ldrb	r2, [r7, #3]
 800968c:	4611      	mov	r1, r2
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe fd25 	bl	80080de <USBD_LL_IsoINIncomplete>
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fe fd7b 	bl	80081a6 <USBD_LL_DevConnected>
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe fd78 	bl	80081bc <USBD_LL_DevDisconnected>
}
 80096cc:	bf00      	nop
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d13c      	bne.n	800975e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80096e4:	4a20      	ldr	r2, [pc, #128]	@ (8009768 <USBD_LL_Init+0x94>)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009768 <USBD_LL_Init+0x94>)
 80096f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009768 <USBD_LL_Init+0x94>)
 80096f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80096fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80096fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009768 <USBD_LL_Init+0x94>)
 80096fe:	2204      	movs	r2, #4
 8009700:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009702:	4b19      	ldr	r3, [pc, #100]	@ (8009768 <USBD_LL_Init+0x94>)
 8009704:	2202      	movs	r2, #2
 8009706:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009708:	4b17      	ldr	r3, [pc, #92]	@ (8009768 <USBD_LL_Init+0x94>)
 800970a:	2200      	movs	r2, #0
 800970c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800970e:	4b16      	ldr	r3, [pc, #88]	@ (8009768 <USBD_LL_Init+0x94>)
 8009710:	2202      	movs	r2, #2
 8009712:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009714:	4b14      	ldr	r3, [pc, #80]	@ (8009768 <USBD_LL_Init+0x94>)
 8009716:	2200      	movs	r2, #0
 8009718:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800971a:	4b13      	ldr	r3, [pc, #76]	@ (8009768 <USBD_LL_Init+0x94>)
 800971c:	2200      	movs	r2, #0
 800971e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009720:	4b11      	ldr	r3, [pc, #68]	@ (8009768 <USBD_LL_Init+0x94>)
 8009722:	2200      	movs	r2, #0
 8009724:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009726:	4b10      	ldr	r3, [pc, #64]	@ (8009768 <USBD_LL_Init+0x94>)
 8009728:	2200      	movs	r2, #0
 800972a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800972c:	4b0e      	ldr	r3, [pc, #56]	@ (8009768 <USBD_LL_Init+0x94>)
 800972e:	2200      	movs	r2, #0
 8009730:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009732:	480d      	ldr	r0, [pc, #52]	@ (8009768 <USBD_LL_Init+0x94>)
 8009734:	f7f8 f9ea 	bl	8001b0c <HAL_PCD_Init>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d001      	beq.n	8009742 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800973e:	f7f7 f91b 	bl	8000978 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009742:	2180      	movs	r1, #128	@ 0x80
 8009744:	4808      	ldr	r0, [pc, #32]	@ (8009768 <USBD_LL_Init+0x94>)
 8009746:	f7f9 fc16 	bl	8002f76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800974a:	2240      	movs	r2, #64	@ 0x40
 800974c:	2100      	movs	r1, #0
 800974e:	4806      	ldr	r0, [pc, #24]	@ (8009768 <USBD_LL_Init+0x94>)
 8009750:	f7f9 fbca 	bl	8002ee8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009754:	2280      	movs	r2, #128	@ 0x80
 8009756:	2101      	movs	r1, #1
 8009758:	4803      	ldr	r0, [pc, #12]	@ (8009768 <USBD_LL_Init+0x94>)
 800975a:	f7f9 fbc5 	bl	8002ee8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20001700 	.word	0x20001700

0800976c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009782:	4618      	mov	r0, r3
 8009784:	f7f8 fad1 	bl	8001d2a <HAL_PCD_Start>
 8009788:	4603      	mov	r3, r0
 800978a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	4618      	mov	r0, r3
 8009790:	f000 f942 	bl	8009a18 <USBD_Get_USB_Status>
 8009794:	4603      	mov	r3, r0
 8009796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009798:	7bbb      	ldrb	r3, [r7, #14]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	4608      	mov	r0, r1
 80097ac:	4611      	mov	r1, r2
 80097ae:	461a      	mov	r2, r3
 80097b0:	4603      	mov	r3, r0
 80097b2:	70fb      	strb	r3, [r7, #3]
 80097b4:	460b      	mov	r3, r1
 80097b6:	70bb      	strb	r3, [r7, #2]
 80097b8:	4613      	mov	r3, r2
 80097ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80097ca:	78bb      	ldrb	r3, [r7, #2]
 80097cc:	883a      	ldrh	r2, [r7, #0]
 80097ce:	78f9      	ldrb	r1, [r7, #3]
 80097d0:	f7f8 ffa5 	bl	800271e <HAL_PCD_EP_Open>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f91c 	bl	8009a18 <USBD_Get_USB_Status>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009808:	78fa      	ldrb	r2, [r7, #3]
 800980a:	4611      	mov	r1, r2
 800980c:	4618      	mov	r0, r3
 800980e:	f7f8 fff0 	bl	80027f2 <HAL_PCD_EP_Close>
 8009812:	4603      	mov	r3, r0
 8009814:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	4618      	mov	r0, r3
 800981a:	f000 f8fd 	bl	8009a18 <USBD_Get_USB_Status>
 800981e:	4603      	mov	r3, r0
 8009820:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009822:	7bbb      	ldrb	r3, [r7, #14]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009846:	78fa      	ldrb	r2, [r7, #3]
 8009848:	4611      	mov	r1, r2
 800984a:	4618      	mov	r0, r3
 800984c:	f7f9 f8a8 	bl	80029a0 <HAL_PCD_EP_SetStall>
 8009850:	4603      	mov	r3, r0
 8009852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009854:	7bfb      	ldrb	r3, [r7, #15]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 f8de 	bl	8009a18 <USBD_Get_USB_Status>
 800985c:	4603      	mov	r3, r0
 800985e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009860:	7bbb      	ldrb	r3, [r7, #14]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b084      	sub	sp, #16
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	460b      	mov	r3, r1
 8009874:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009884:	78fa      	ldrb	r2, [r7, #3]
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f7f9 f8ec 	bl	8002a66 <HAL_PCD_EP_ClrStall>
 800988e:	4603      	mov	r3, r0
 8009890:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	4618      	mov	r0, r3
 8009896:	f000 f8bf 	bl	8009a18 <USBD_Get_USB_Status>
 800989a:	4603      	mov	r3, r0
 800989c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800989e:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	da0b      	bge.n	80098dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098ca:	68f9      	ldr	r1, [r7, #12]
 80098cc:	4613      	mov	r3, r2
 80098ce:	00db      	lsls	r3, r3, #3
 80098d0:	4413      	add	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	440b      	add	r3, r1
 80098d6:	3316      	adds	r3, #22
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	e00b      	b.n	80098f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098dc:	78fb      	ldrb	r3, [r7, #3]
 80098de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098e2:	68f9      	ldr	r1, [r7, #12]
 80098e4:	4613      	mov	r3, r2
 80098e6:	00db      	lsls	r3, r3, #3
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	440b      	add	r3, r1
 80098ee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80098f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3714      	adds	r7, #20
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800991a:	78fa      	ldrb	r2, [r7, #3]
 800991c:	4611      	mov	r1, r2
 800991e:	4618      	mov	r0, r3
 8009920:	f7f8 fed9 	bl	80026d6 <HAL_PCD_SetAddress>
 8009924:	4603      	mov	r3, r0
 8009926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	4618      	mov	r0, r3
 800992c:	f000 f874 	bl	8009a18 <USBD_Get_USB_Status>
 8009930:	4603      	mov	r3, r0
 8009932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009934:	7bbb      	ldrb	r3, [r7, #14]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b086      	sub	sp, #24
 8009942:	af00      	add	r7, sp, #0
 8009944:	60f8      	str	r0, [r7, #12]
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	603b      	str	r3, [r7, #0]
 800994a:	460b      	mov	r3, r1
 800994c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800995c:	7af9      	ldrb	r1, [r7, #11]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	f7f8 ffe3 	bl	800292c <HAL_PCD_EP_Transmit>
 8009966:	4603      	mov	r3, r0
 8009968:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800996a:	7dfb      	ldrb	r3, [r7, #23]
 800996c:	4618      	mov	r0, r3
 800996e:	f000 f853 	bl	8009a18 <USBD_Get_USB_Status>
 8009972:	4603      	mov	r3, r0
 8009974:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009976:	7dbb      	ldrb	r3, [r7, #22]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	607a      	str	r2, [r7, #4]
 800998a:	603b      	str	r3, [r7, #0]
 800998c:	460b      	mov	r3, r1
 800998e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800999e:	7af9      	ldrb	r1, [r7, #11]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	f7f8 ff6f 	bl	8002886 <HAL_PCD_EP_Receive>
 80099a8:	4603      	mov	r3, r0
 80099aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 f832 	bl	8009a18 <USBD_Get_USB_Status>
 80099b4:	4603      	mov	r3, r0
 80099b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3718      	adds	r7, #24
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	460b      	mov	r3, r1
 80099cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099d4:	78fa      	ldrb	r2, [r7, #3]
 80099d6:	4611      	mov	r1, r2
 80099d8:	4618      	mov	r0, r3
 80099da:	f7f8 ff8f 	bl	80028fc <HAL_PCD_EP_GetRxCount>
 80099de:	4603      	mov	r3, r0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099f0:	4b03      	ldr	r3, [pc, #12]	@ (8009a00 <USBD_static_malloc+0x18>)
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	20001be4 	.word	0x20001be4

08009a04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]

}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	4603      	mov	r3, r0
 8009a20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a26:	79fb      	ldrb	r3, [r7, #7]
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d817      	bhi.n	8009a5c <USBD_Get_USB_Status+0x44>
 8009a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a34 <USBD_Get_USB_Status+0x1c>)
 8009a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a32:	bf00      	nop
 8009a34:	08009a45 	.word	0x08009a45
 8009a38:	08009a4b 	.word	0x08009a4b
 8009a3c:	08009a51 	.word	0x08009a51
 8009a40:	08009a57 	.word	0x08009a57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	73fb      	strb	r3, [r7, #15]
    break;
 8009a48:	e00b      	b.n	8009a62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a4e:	e008      	b.n	8009a62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a50:	2301      	movs	r3, #1
 8009a52:	73fb      	strb	r3, [r7, #15]
    break;
 8009a54:	e005      	b.n	8009a62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a56:	2303      	movs	r3, #3
 8009a58:	73fb      	strb	r3, [r7, #15]
    break;
 8009a5a:	e002      	b.n	8009a62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a60:	bf00      	nop
  }
  return usb_status;
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <memset>:
 8009a70:	4402      	add	r2, r0
 8009a72:	4603      	mov	r3, r0
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d100      	bne.n	8009a7a <memset+0xa>
 8009a78:	4770      	bx	lr
 8009a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a7e:	e7f9      	b.n	8009a74 <memset+0x4>

08009a80 <__libc_init_array>:
 8009a80:	b570      	push	{r4, r5, r6, lr}
 8009a82:	4d0d      	ldr	r5, [pc, #52]	@ (8009ab8 <__libc_init_array+0x38>)
 8009a84:	4c0d      	ldr	r4, [pc, #52]	@ (8009abc <__libc_init_array+0x3c>)
 8009a86:	1b64      	subs	r4, r4, r5
 8009a88:	10a4      	asrs	r4, r4, #2
 8009a8a:	2600      	movs	r6, #0
 8009a8c:	42a6      	cmp	r6, r4
 8009a8e:	d109      	bne.n	8009aa4 <__libc_init_array+0x24>
 8009a90:	4d0b      	ldr	r5, [pc, #44]	@ (8009ac0 <__libc_init_array+0x40>)
 8009a92:	4c0c      	ldr	r4, [pc, #48]	@ (8009ac4 <__libc_init_array+0x44>)
 8009a94:	f000 f818 	bl	8009ac8 <_init>
 8009a98:	1b64      	subs	r4, r4, r5
 8009a9a:	10a4      	asrs	r4, r4, #2
 8009a9c:	2600      	movs	r6, #0
 8009a9e:	42a6      	cmp	r6, r4
 8009aa0:	d105      	bne.n	8009aae <__libc_init_array+0x2e>
 8009aa2:	bd70      	pop	{r4, r5, r6, pc}
 8009aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aa8:	4798      	blx	r3
 8009aaa:	3601      	adds	r6, #1
 8009aac:	e7ee      	b.n	8009a8c <__libc_init_array+0xc>
 8009aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ab2:	4798      	blx	r3
 8009ab4:	3601      	adds	r6, #1
 8009ab6:	e7f2      	b.n	8009a9e <__libc_init_array+0x1e>
 8009ab8:	08009b7c 	.word	0x08009b7c
 8009abc:	08009b7c 	.word	0x08009b7c
 8009ac0:	08009b7c 	.word	0x08009b7c
 8009ac4:	08009b80 	.word	0x08009b80

08009ac8 <_init>:
 8009ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aca:	bf00      	nop
 8009acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ace:	bc08      	pop	{r3}
 8009ad0:	469e      	mov	lr, r3
 8009ad2:	4770      	bx	lr

08009ad4 <_fini>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	bf00      	nop
 8009ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ada:	bc08      	pop	{r3}
 8009adc:	469e      	mov	lr, r3
 8009ade:	4770      	bx	lr
